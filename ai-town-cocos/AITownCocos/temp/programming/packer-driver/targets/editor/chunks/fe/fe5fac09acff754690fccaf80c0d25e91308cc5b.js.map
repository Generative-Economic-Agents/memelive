{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/services/glacier.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","AWS","util","update","Glacier","prototype","setupRequestListeners","request","Array","isArray","_events","validate","unshift","validateAccountId","on","removeListener","EventListeners","Core","COMPUTE_SHA256","addGlacierApiVersion","addTreeHashHeaders","params","accountId","undefined","copy","version","service","api","apiVersion","httpRequest","headers","body","hashes","computeChecksums","linearHash","treeHash","data","Buffer","isBuffer","buffer","toBuffer","mb","hash","crypto","createHash","i","length","chunk","slice","Math","min","push","sha256","digest","buildHashTree","tmpHashes","tmpHash","alloc","write","toHex","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n\n AWS.util.update(AWS.Glacier.prototype, {\n   /**\n    * @api private\n    */\n   setupRequestListeners: function setupRequestListeners(request) {\n     if (Array.isArray(request._events.validate)) {\n       request._events.validate.unshift(this.validateAccountId);\n     } else {\n       request.on('validate', this.validateAccountId);\n     }\n     request.removeListener('afterBuild',\n       AWS.EventListeners.Core.COMPUTE_SHA256);\n     request.on('build', this.addGlacierApiVersion);\n     request.on('build', this.addTreeHashHeaders);\n   },\n\n   /**\n    * @api private\n    */\n   validateAccountId: function validateAccountId(request) {\n     if (request.params.accountId !== undefined) return;\n     request.params = AWS.util.copy(request.params);\n     request.params.accountId = '-';\n   },\n\n   /**\n    * @api private\n    */\n   addGlacierApiVersion: function addGlacierApiVersion(request) {\n     var version = request.service.api.apiVersion;\n     request.httpRequest.headers['x-amz-glacier-version'] = version;\n   },\n\n   /**\n    * @api private\n    */\n   addTreeHashHeaders: function addTreeHashHeaders(request) {\n     if (request.params.body === undefined) return;\n\n     var hashes = request.service.computeChecksums(request.params.body);\n     request.httpRequest.headers['X-Amz-Content-Sha256'] = hashes.linearHash;\n\n     if (!request.httpRequest.headers['x-amz-sha256-tree-hash']) {\n       request.httpRequest.headers['x-amz-sha256-tree-hash'] = hashes.treeHash;\n     }\n   },\n\n   /**\n    * @!group Computing Checksums\n    */\n\n   /**\n    * Computes the SHA-256 linear and tree hash checksums for a given\n    * block of Buffer data. Pass the tree hash of the computed checksums\n    * as the checksum input to the {completeMultipartUpload} when performing\n    * a multi-part upload.\n    *\n    * @example Calculate checksum of 5.5MB data chunk\n    *   var glacier = new AWS.Glacier();\n    *   var data = Buffer.alloc(5.5 * 1024 * 1024);\n    *   data.fill('0'); // fill with zeros\n    *   var results = glacier.computeChecksums(data);\n    *   // Result: { linearHash: '68aff0c5a9...', treeHash: '154e26c78f...' }\n    * @param data [Buffer, String] data to calculate the checksum for\n    * @return [map<linearHash:String,treeHash:String>] a map containing\n    *   the linearHash and treeHash properties representing hex based digests\n    *   of the respective checksums.\n    * @see completeMultipartUpload\n    */\n   computeChecksums: function computeChecksums(data) {\n     if (!AWS.util.Buffer.isBuffer(data)) data = AWS.util.buffer.toBuffer(data);\n\n     var mb = 1024 * 1024;\n     var hashes = [];\n     var hash = AWS.util.crypto.createHash('sha256');\n\n     // build leaf nodes in 1mb chunks\n     for (var i = 0; i < data.length; i += mb) {\n       var chunk = data.slice(i, Math.min(i + mb, data.length));\n       hash.update(chunk);\n       hashes.push(AWS.util.crypto.sha256(chunk));\n     }\n\n     return {\n       linearHash: hash.digest('hex'),\n       treeHash: this.buildHashTree(hashes)\n     };\n   },\n\n   /**\n    * @api private\n    */\n   buildHashTree: function buildHashTree(hashes) {\n     // merge leaf nodes\n     while (hashes.length > 1) {\n       var tmpHashes = [];\n       for (var i = 0; i < hashes.length; i += 2) {\n         if (hashes[i + 1]) {\n           var tmpHash = AWS.util.buffer.alloc(64);\n           tmpHash.write(hashes[i], 0, 32, 'binary');\n           tmpHash.write(hashes[i + 1], 32, 32, 'binary');\n           tmpHashes.push(AWS.util.crypto.sha256(tmpHash));\n         } else {\n           tmpHashes.push(hashes[i]);\n         }\n       }\n       hashes = tmpHashes;\n     }\n\n     return AWS.util.crypto.toHex(hashes[0]);\n   }\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}