{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/publisher/configuration.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","AWS","resolveMonitoringConfig","config","port","undefined","clientId","enabled","host","fromEnvironment","fromConfigFile","toJSType","process","env","AWS_CSM_PORT","AWS_CSM_ENABLED","AWS_CSM_CLIENT_ID","AWS_CSM_HOST","indexOf","sharedFileConfig","configFile","util","iniLoader","loadFrom","isConfig","filename","sharedConfigFileEnv","AWS_PROFILE","defaultProfile","err","csm_port","csm_enabled","csm_client_id","csm_host","falsyNotations","toLowerCase","parseInt","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n\n /**\n  * Resolve client-side monitoring configuration from either environmental variables\n  * or shared config file. Configurations from environmental variables have higher priority\n  * than those from shared config file. The resolver will try to read the shared config file\n  * no matter whether the AWS_SDK_LOAD_CONFIG variable is set.\n  * @api private\n  */\n function resolveMonitoringConfig() {\n   var config = {\n     port: undefined,\n     clientId: undefined,\n     enabled: undefined,\n     host: undefined\n   };\n   if (fromEnvironment(config) || fromConfigFile(config)) return toJSType(config);\n   return toJSType(config);\n }\n\n /**\n  * Resolve configurations from environmental variables.\n  * @param {object} client side monitoring config object needs to be resolved\n  * @returns {boolean} whether resolving configurations is done\n  * @api private\n  */\n function fromEnvironment(config) {\n   config.port = config.port || process.env.AWS_CSM_PORT;\n   config.enabled = config.enabled || process.env.AWS_CSM_ENABLED;\n   config.clientId = config.clientId || process.env.AWS_CSM_CLIENT_ID;\n   config.host = config.host || process.env.AWS_CSM_HOST;\n   return config.port && config.enabled && config.clientId && config.host ||\n     ['false', '0'].indexOf(config.enabled) >= 0; //no need to read shared config file if explicitely disabled\n }\n\n /**\n  * Resolve cofigurations from shared config file with specified role name\n  * @param {object} client side monitoring config object needs to be resolved\n  * @returns {boolean} whether resolving configurations is done\n  * @api private\n  */\n function fromConfigFile(config) {\n   var sharedFileConfig;\n   try {\n     var configFile = AWS.util.iniLoader.loadFrom({\n       isConfig: true,\n       filename: process.env[AWS.util.sharedConfigFileEnv]\n     });\n     var sharedFileConfig = configFile[\n       process.env.AWS_PROFILE || AWS.util.defaultProfile\n     ];\n   } catch (err) {\n     return false;\n   }\n   if (!sharedFileConfig) return config;\n   config.port = config.port || sharedFileConfig.csm_port;\n   config.enabled = config.enabled || sharedFileConfig.csm_enabled;\n   config.clientId = config.clientId || sharedFileConfig.csm_client_id;\n   config.host = config.host || sharedFileConfig.csm_host;\n   return config.port && config.enabled && config.clientId && config.host;\n }\n\n /**\n  * Transfer the resolved configuration value to proper types: port as number, enabled\n  * as boolean and clientId as string. The 'enabled' flag is valued to false when set\n  * to 'false' or '0'.\n  * @param {object} resolved client side monitoring config\n  * @api private\n  */\n function toJSType(config) {\n     //config.XXX is either undefined or string\n   var falsyNotations = ['false', '0', undefined];\n   if (!config.enabled || falsyNotations.indexOf(config.enabled.toLowerCase()) >= 0) {\n     config.enabled = false;\n   } else {\n     config.enabled = true;\n   }\n   config.port = config.port ? parseInt(config.port, 10) : undefined;\n   return config;\n }\n\n module.exports = resolveMonitoringConfig;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}