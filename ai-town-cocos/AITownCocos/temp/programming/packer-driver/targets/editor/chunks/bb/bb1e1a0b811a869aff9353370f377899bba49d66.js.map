{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/credentials/chainable_temporary_credentials.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","AWS","STS","ChainableTemporaryCredentials","util","inherit","Credentials","constructor","options","call","errorCode","expired","tokenCodeFn","params","copy","RoleArn","RoleSessionName","SerialNumber","error","Error","code","config","merge","credentials","masterCredentials","stsConfig","service","refresh","callback","coalesceRefresh","fn","load","self","operation","getTokenCode","err","tokenCode","TokenCode","data","credentialsFrom","token","message","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;AACgBC,MAAAA,K,iBAAhBD,Y;;;8BAEHA,Y,GAAe,cAAYE,G;;AACjCJ,MAAAA,UAAU,CAACK,MAAX,CAAkBH,YAAlB,EAAgC,UAAUI,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC,YAAIC,GAAG,GAAGJ,OAAO,CAAC,SAAD,CAAjB;;AACA,YAAIK,GAAG,GAAGL,OAAO,CAAC,mBAAD,CAAjB;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCI,QAAAA,GAAG,CAACE,6BAAJ,GAAoCF,GAAG,CAACG,IAAJ,CAASC,OAAT,CAAiBJ,GAAG,CAACK,WAArB,EAAkC;AACpE;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGC,UAAAA,WAAW,EAAE,SAASJ,6BAAT,CAAuCK,OAAvC,EAAgD;AAC3DP,YAAAA,GAAG,CAACK,WAAJ,CAAgBG,IAAhB,CAAqB,IAArB;AACAD,YAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,iBAAKE,SAAL,GAAiB,8CAAjB;AACA,iBAAKC,OAAL,GAAe,IAAf;AACA,iBAAKC,WAAL,GAAmB,IAAnB;AAEA,gBAAIC,MAAM,GAAGZ,GAAG,CAACG,IAAJ,CAASU,IAAT,CAAcN,OAAO,CAACK,MAAtB,KAAiC,EAA9C;;AACA,gBAAIA,MAAM,CAACE,OAAX,EAAoB;AAClBF,cAAAA,MAAM,CAACG,eAAP,GAAyBH,MAAM,CAACG,eAAP,IAA0B,uBAAnD;AACD;;AACD,gBAAIH,MAAM,CAACI,YAAX,EAAyB;AACvB,kBAAI,CAACT,OAAO,CAACI,WAAT,IAAyB,OAAOJ,OAAO,CAACI,WAAf,KAA+B,UAA5D,EAAyE;AACvE,sBAAM,IAAIX,GAAG,CAACG,IAAJ,CAASc,KAAb,CACJ,IAAIC,KAAJ,CAAU,kEAAV,CADI,EAEJ;AAACC,kBAAAA,IAAI,EAAE,KAAKV;AAAZ,iBAFI,CAAN;AAID,eALD,MAKO;AACL,qBAAKE,WAAL,GAAmBJ,OAAO,CAACI,WAA3B;AACD;AACF;;AACD,gBAAIS,MAAM,GAAGpB,GAAG,CAACG,IAAJ,CAASkB,KAAT,CACX;AACET,cAAAA,MAAM,EAAEA,MADV;AAEEU,cAAAA,WAAW,EAAEf,OAAO,CAACgB,iBAAR,IAA6BvB,GAAG,CAACoB,MAAJ,CAAWE;AAFvD,aADW,EAKXf,OAAO,CAACiB,SAAR,IAAqB,EALV,CAAb;AAOA,iBAAKC,OAAL,GAAe,IAAIxB,GAAJ,CAAQmB,MAAR,CAAf;AACD,WA1DmE;;AA4DpE;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGM,UAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClC,iBAAKC,eAAL,CAAqBD,QAAQ,IAAI3B,GAAG,CAACG,IAAJ,CAAS0B,EAAT,CAAYF,QAA7C;AACD,WA3EmE;;AA6EpE;AACH;AACA;AACA;AACGG,UAAAA,IAAI,EAAE,SAASA,IAAT,CAAcH,QAAd,EAAwB;AAC5B,gBAAII,IAAI,GAAG,IAAX;AACA,gBAAIC,SAAS,GAAGD,IAAI,CAACN,OAAL,CAAaL,MAAb,CAAoBR,MAApB,CAA2BE,OAA3B,GAAqC,YAArC,GAAoD,iBAApE;AACA,iBAAKmB,YAAL,CAAkB,UAAUC,GAAV,EAAeC,SAAf,EAA0B;AAC1C,kBAAIvB,MAAM,GAAG,EAAb;;AACA,kBAAIsB,GAAJ,EAAS;AACPP,gBAAAA,QAAQ,CAACO,GAAD,CAAR;AACA;AACD;;AACD,kBAAIC,SAAJ,EAAe;AACbvB,gBAAAA,MAAM,CAACwB,SAAP,GAAmBD,SAAnB;AACD;;AACDJ,cAAAA,IAAI,CAACN,OAAL,CAAaO,SAAb,EAAwBpB,MAAxB,EAAgC,UAAUsB,GAAV,EAAeG,IAAf,EAAqB;AACnD,oBAAI,CAACH,GAAL,EAAU;AACRH,kBAAAA,IAAI,CAACN,OAAL,CAAaa,eAAb,CAA6BD,IAA7B,EAAmCN,IAAnC;AACD;;AACDJ,gBAAAA,QAAQ,CAACO,GAAD,CAAR;AACD,eALD;AAMD,aAfD;AAgBD,WApGmE;;AAsGpE;AACH;AACA;AACGD,UAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBN,QAAtB,EAAgC;AAC5C,gBAAII,IAAI,GAAG,IAAX;;AACA,gBAAI,KAAKpB,WAAT,EAAsB;AACpB,mBAAKA,WAAL,CAAiB,KAAKc,OAAL,CAAaL,MAAb,CAAoBR,MAApB,CAA2BI,YAA5C,EAA0D,UAAUkB,GAAV,EAAeK,KAAf,EAAsB;AAC9E,oBAAIL,GAAJ,EAAS;AACP,sBAAIM,OAAO,GAAGN,GAAd;;AACA,sBAAIA,GAAG,YAAYhB,KAAnB,EAA0B;AACxBsB,oBAAAA,OAAO,GAAGN,GAAG,CAACM,OAAd;AACD;;AACDb,kBAAAA,QAAQ,CACN3B,GAAG,CAACG,IAAJ,CAASc,KAAT,CACE,IAAIC,KAAJ,CAAU,+BAA+BsB,OAAzC,CADF,EAEE;AAAErB,oBAAAA,IAAI,EAAEY,IAAI,CAACtB;AAAb,mBAFF,CADM,CAAR;AAMA;AACD;;AACDkB,gBAAAA,QAAQ,CAAC,IAAD,EAAOY,KAAP,CAAR;AACD,eAfD;AAgBD,aAjBD,MAiBO;AACLZ,cAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF;AA/HmE,SAAlC,CAApC,CA3E0F,CA8M3F;;AAEA,2BAAAc,WAAW,GAAG5C,MAAM,CAACF,OAArB;AAGC,OAnND,EAmNG,OAAO;AACR,mBAAWL,IADH;AAER,6BAAqBE;AAFb,OAAP,CAnNH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from '../../clients/sts';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n var STS = require('../../clients/sts');\n\n /**\n  * Represents temporary credentials retrieved from {AWS.STS}. Without any\n  * extra parameters, credentials will be fetched from the\n  * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the\n  * {AWS.STS.assumeRole} operation will be used to fetch credentials for the\n  * role instead.\n  *\n  * AWS.ChainableTemporaryCredentials differs from AWS.TemporaryCredentials in\n  * the way masterCredentials and refreshes are handled.\n  * AWS.ChainableTemporaryCredentials refreshes expired credentials using the\n  * masterCredentials passed by the user to support chaining of STS credentials.\n  * However, AWS.TemporaryCredentials recursively collapses the masterCredentials\n  * during instantiation, precluding the ability to refresh credentials which\n  * require intermediate, temporary credentials.\n  *\n  * For example, if the application should use RoleA, which must be assumed from\n  * RoleB, and the environment provides credentials which can assume RoleB, then\n  * AWS.ChainableTemporaryCredentials must be used to support refreshing the\n  * temporary credentials for RoleA:\n  *\n  * ```javascript\n  * var roleACreds = new AWS.ChainableTemporaryCredentials({\n  *   params: {RoleArn: 'RoleA'},\n  *   masterCredentials: new AWS.ChainableTemporaryCredentials({\n  *     params: {RoleArn: 'RoleB'},\n  *     masterCredentials: new AWS.EnvironmentCredentials('AWS')\n  *   })\n  * });\n  * ```\n  *\n  * If AWS.TemporaryCredentials had been used in the previous example,\n  * `roleACreds` would fail to refresh because `roleACreds` would\n  * use the environment credentials for the AssumeRole request.\n  *\n  * Another difference is that AWS.ChainableTemporaryCredentials creates the STS\n  * service instance during instantiation while AWS.TemporaryCredentials creates\n  * the STS service instance during the first refresh. Creating the service\n  * instance during instantiation effectively captures the master credentials\n  * from the global config, so that subsequent changes to the global config do\n  * not affect the master credentials used to refresh the temporary credentials.\n  *\n  * This allows an instance of AWS.ChainableTemporaryCredentials to be assigned\n  * to AWS.config.credentials:\n  *\n  * ```javascript\n  * var envCreds = new AWS.EnvironmentCredentials('AWS');\n  * AWS.config.credentials = envCreds;\n  * // masterCredentials will be envCreds\n  * AWS.config.credentials = new AWS.ChainableTemporaryCredentials({\n  *   params: {RoleArn: '...'}\n  * });\n  * ```\n  *\n  * Similarly, to use the CredentialProviderChain's default providers as the\n  * master credentials, simply create a new instance of\n  * AWS.ChainableTemporaryCredentials:\n  *\n  * ```javascript\n  * AWS.config.credentials = new ChainableTemporaryCredentials({\n  *   params: {RoleArn: '...'}\n  * });\n  * ```\n  *\n  * @!attribute service\n  *   @return [AWS.STS] the STS service instance used to\n  *     get and refresh temporary credentials from AWS STS.\n  * @note (see constructor)\n  */\n AWS.ChainableTemporaryCredentials = AWS.util.inherit(AWS.Credentials, {\n   /**\n    * Creates a new temporary credentials object.\n    *\n    * @param options [map] a set of options\n    * @option options params [map] ({}) a map of options that are passed to the\n    *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.\n    *   If a `RoleArn` parameter is passed in, credentials will be based on the\n    *   IAM role. If a `SerialNumber` parameter is passed in, {tokenCodeFn} must\n    *   also be passed in or an error will be thrown.\n    * @option options masterCredentials [AWS.Credentials] the master credentials\n    *   used to get and refresh temporary credentials from AWS STS. By default,\n    *   AWS.config.credentials or AWS.config.credentialProvider will be used.\n    * @option options tokenCodeFn [Function] (null) Function to provide\n    *   `TokenCode`, if `SerialNumber` is provided for profile in {params}. Function\n    *   is called with value of `SerialNumber` and `callback`, and should provide\n    *   the `TokenCode` or an error to the callback in the format\n    *   `callback(err, token)`.\n    * @example Creating a new credentials object for generic temporary credentials\n    *   AWS.config.credentials = new AWS.ChainableTemporaryCredentials();\n    * @example Creating a new credentials object for an IAM role\n    *   AWS.config.credentials = new AWS.ChainableTemporaryCredentials({\n    *     params: {\n    *       RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials'\n    *     }\n    *   });\n    * @see AWS.STS.assumeRole\n    * @see AWS.STS.getSessionToken\n    */\n   constructor: function ChainableTemporaryCredentials(options) {\n     AWS.Credentials.call(this);\n     options = options || {};\n     this.errorCode = 'ChainableTemporaryCredentialsProviderFailure';\n     this.expired = true;\n     this.tokenCodeFn = null;\n\n     var params = AWS.util.copy(options.params) || {};\n     if (params.RoleArn) {\n       params.RoleSessionName = params.RoleSessionName || 'temporary-credentials';\n     }\n     if (params.SerialNumber) {\n       if (!options.tokenCodeFn || (typeof options.tokenCodeFn !== 'function')) {\n         throw new AWS.util.error(\n           new Error('tokenCodeFn must be a function when params.SerialNumber is given'),\n           {code: this.errorCode}\n         );\n       } else {\n         this.tokenCodeFn = options.tokenCodeFn;\n       }\n     }\n     var config = AWS.util.merge(\n       {\n         params: params,\n         credentials: options.masterCredentials || AWS.config.credentials\n       },\n       options.stsConfig || {}\n     );\n     this.service = new STS(config);\n   },\n\n   /**\n    * Refreshes credentials using {AWS.STS.assumeRole} or\n    * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed\n    * to the credentials {constructor}.\n    *\n    * @callback callback function(err)\n    *   Called when the STS service responds (or fails). When\n    *   this callback is called with no error, it means that the credentials\n    *   information has been loaded into the object (as the `accessKeyId`,\n    *   `secretAccessKey`, and `sessionToken` properties).\n    *   @param err [Error] if an error occurred, this value will be filled\n    * @see AWS.Credentials.get\n    */\n   refresh: function refresh(callback) {\n     this.coalesceRefresh(callback || AWS.util.fn.callback);\n   },\n\n   /**\n    * @api private\n    * @param callback\n    */\n   load: function load(callback) {\n     var self = this;\n     var operation = self.service.config.params.RoleArn ? 'assumeRole' : 'getSessionToken';\n     this.getTokenCode(function (err, tokenCode) {\n       var params = {};\n       if (err) {\n         callback(err);\n         return;\n       }\n       if (tokenCode) {\n         params.TokenCode = tokenCode;\n       }\n       self.service[operation](params, function (err, data) {\n         if (!err) {\n           self.service.credentialsFrom(data, self);\n         }\n         callback(err);\n       });\n     });\n   },\n\n   /**\n    * @api private\n    */\n   getTokenCode: function getTokenCode(callback) {\n     var self = this;\n     if (this.tokenCodeFn) {\n       this.tokenCodeFn(this.service.config.params.SerialNumber, function (err, token) {\n         if (err) {\n           var message = err;\n           if (err instanceof Error) {\n             message = err.message;\n           }\n           callback(\n             AWS.util.error(\n               new Error('Error fetching MFA token: ' + message),\n               { code: self.errorCode}\n             )\n           );\n           return;\n         }\n         callback(null, token);\n       });\n     } else {\n       callback(null);\n     }\n   }\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n  '../../clients/sts': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}