{"version":3,"sources":["file:///Users/feiwang/workSpace/AITown/cutepet/node_modules/lodash-es/truncate.js"],"names":["truncate","string","options","length","DEFAULT_TRUNC_LENGTH","omission","DEFAULT_TRUNC_OMISSION","isObject","separator","toInteger","baseToString","toString","strLength","hasUnicode","strSymbols","stringToArray","end","stringSize","result","castSlice","join","slice","undefined","isRegExp","search","match","substring","global","RegExp","source","reFlags","exec","lastIndex","newEnd","index","indexOf","lastIndexOf"],"mappings":"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","sourcesContent":["import baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport hasUnicode from './_hasUnicode.js';\nimport isObject from './isObject.js';\nimport isRegExp from './isRegExp.js';\nimport stringSize from './_stringSize.js';\nimport stringToArray from './_stringToArray.js';\nimport toInteger from './toInteger.js';\nimport toString from './toString.js';\n\n/** Used as default options for `_.truncate`. */\nvar DEFAULT_TRUNC_LENGTH = 30,\n    DEFAULT_TRUNC_OMISSION = '...';\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Truncates `string` if it's longer than the given maximum string length.\n * The last characters of the truncated string are replaced with the omission\n * string which defaults to \"...\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to truncate.\n * @param {Object} [options={}] The options object.\n * @param {number} [options.length=30] The maximum string length.\n * @param {string} [options.omission='...'] The string to indicate text is omitted.\n * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n * @returns {string} Returns the truncated string.\n * @example\n *\n * _.truncate('hi-diddly-ho there, neighborino');\n * // => 'hi-diddly-ho there, neighbo...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': ' '\n * });\n * // => 'hi-diddly-ho there,...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': /,? +/\n * });\n * // => 'hi-diddly-ho there...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'omission': ' [...]'\n * });\n * // => 'hi-diddly-ho there, neig [...]'\n */\nfunction truncate(string, options) {\n  var length = DEFAULT_TRUNC_LENGTH,\n      omission = DEFAULT_TRUNC_OMISSION;\n\n  if (isObject(options)) {\n    var separator = 'separator' in options ? options.separator : separator;\n    length = 'length' in options ? toInteger(options.length) : length;\n    omission = 'omission' in options ? baseToString(options.omission) : omission;\n  }\n  string = toString(string);\n\n  var strLength = string.length;\n  if (hasUnicode(string)) {\n    var strSymbols = stringToArray(string);\n    strLength = strSymbols.length;\n  }\n  if (length >= strLength) {\n    return string;\n  }\n  var end = length - stringSize(omission);\n  if (end < 1) {\n    return omission;\n  }\n  var result = strSymbols\n    ? castSlice(strSymbols, 0, end).join('')\n    : string.slice(0, end);\n\n  if (separator === undefined) {\n    return result + omission;\n  }\n  if (strSymbols) {\n    end += (result.length - end);\n  }\n  if (isRegExp(separator)) {\n    if (string.slice(end).search(separator)) {\n      var match,\n          substring = result;\n\n      if (!separator.global) {\n        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n      }\n      separator.lastIndex = 0;\n      while ((match = separator.exec(substring))) {\n        var newEnd = match.index;\n      }\n      result = result.slice(0, newEnd === undefined ? end : newEnd);\n    }\n  } else if (string.indexOf(baseToString(separator), end) != end) {\n    var index = result.lastIndexOf(separator);\n    if (index > -1) {\n      result = result.slice(0, index);\n    }\n  }\n  return result + omission;\n}\n\nexport default truncate;\n"]}