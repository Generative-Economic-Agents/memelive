{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/verror/lib/verror.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","url","define","exports","require","module","__filename","__dirname","mod_assertplus","mod_util","mod_extsprintf","mod_isError","isError","sprintf","VError","SError","WError","MultiError","parseConstructorArguments","args","argv","options","sprintf_args","shortmessage","k","object","bool","strict","array","length","slice","string","map","a","undefined","apply","obj","parsed","cause","ctor","message","Array","prototype","call","arguments","Object","create","name","jse_shortmsg","ok","jse_cause","skipCauseMessage","jse_info","info","Error","captureStackTrace","constructorOpt","constructor","inherits","toString","ve_toString","str","hasOwnProperty","ve_cause","err","rv","findCauseByName","hasCauseWithName","fullStack","stack","errorFromList","errors","arrayOfObject","forEach","e","errorForEach","func","iterError","ase_errors","me_errors","we_toString","we_cause","c","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'assert-plus';\nimport { __cjsMetaURL as _req0} from 'util';\nimport { __cjsMetaURL as _req1} from 'extsprintf';\nimport { __cjsMetaURL as _req2} from 'core-util-is';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n /*\n  * verror.js: richer JavaScript errors\n  */\n\n var mod_assertplus = require('assert-plus');\n var mod_util = require('util');\n\n var mod_extsprintf = require('extsprintf');\n var mod_isError = require('core-util-is').isError;\n var sprintf = mod_extsprintf.sprintf;\n\n /*\n  * Public interface\n  */\n\n /* So you can 'var VError = require('verror')' */\n module.exports = VError;\n /* For compatibility */\n VError.VError = VError;\n /* Other exported classes */\n VError.SError = SError;\n VError.WError = WError;\n VError.MultiError = MultiError;\n\n /*\n  * Common function used to parse constructor arguments for VError, WError, and\n  * SError.  Named arguments to this function:\n  *\n  *     strict\t\tforce strict interpretation of sprintf arguments, even\n  *     \t\t\tif the options in \"argv\" don't say so\n  *\n  *     argv\t\terror's constructor arguments, which are to be\n  *     \t\t\tinterpreted as described in README.md.  For quick\n  *     \t\t\treference, \"argv\" has one of the following forms:\n  *\n  *          [ sprintf_args... ]           (argv[0] is a string)\n  *          [ cause, sprintf_args... ]    (argv[0] is an Error)\n  *          [ options, sprintf_args... ]  (argv[0] is an object)\n  *\n  * This function normalizes these forms, producing an object with the following\n  * properties:\n  *\n  *    options           equivalent to \"options\" in third form.  This will never\n  *    \t\t\tbe a direct reference to what the caller passed in\n  *    \t\t\t(i.e., it may be a shallow copy), so it can be freely\n  *    \t\t\tmodified.\n  *\n  *    shortmessage      result of sprintf(sprintf_args), taking options.strict\n  *    \t\t\tinto account as described in README.md.\n  */\n function parseConstructorArguments(args)\n {\n \tvar argv, options, sprintf_args, shortmessage, k;\n\n \tmod_assertplus.object(args, 'args');\n \tmod_assertplus.bool(args.strict, 'args.strict');\n \tmod_assertplus.array(args.argv, 'args.argv');\n \targv = args.argv;\n\n \t/*\n \t * First, figure out which form of invocation we've been given.\n \t */\n \tif (argv.length === 0) {\n \t\toptions = {};\n \t\tsprintf_args = [];\n \t} else if (mod_isError(argv[0])) {\n \t\toptions = { 'cause': argv[0] };\n \t\tsprintf_args = argv.slice(1);\n \t} else if (typeof (argv[0]) === 'object') {\n \t\toptions = {};\n \t\tfor (k in argv[0]) {\n \t\t\toptions[k] = argv[0][k];\n \t\t}\n \t\tsprintf_args = argv.slice(1);\n \t} else {\n \t\tmod_assertplus.string(argv[0],\n \t\t    'first argument to VError, SError, or WError ' +\n \t\t    'constructor must be a string, object, or Error');\n \t\toptions = {};\n \t\tsprintf_args = argv;\n \t}\n\n \t/*\n \t * Now construct the error's message.\n \t *\n \t * extsprintf (which we invoke here with our caller's arguments in order\n \t * to construct this Error's message) is strict in its interpretation of\n \t * values to be processed by the \"%s\" specifier.  The value passed to\n \t * extsprintf must actually be a string or something convertible to a\n \t * String using .toString().  Passing other values (notably \"null\" and\n \t * \"undefined\") is considered a programmer error.  The assumption is\n \t * that if you actually want to print the string \"null\" or \"undefined\",\n \t * then that's easy to do that when you're calling extsprintf; on the\n \t * other hand, if you did NOT want that (i.e., there's actually a bug\n \t * where the program assumes some variable is non-null and tries to\n \t * print it, which might happen when constructing a packet or file in\n \t * some specific format), then it's better to stop immediately than\n \t * produce bogus output.\n \t *\n \t * However, sometimes the bug is only in the code calling VError, and a\n \t * programmer might prefer to have the error message contain \"null\" or\n \t * \"undefined\" rather than have the bug in the error path crash the\n \t * program (making the first bug harder to identify).  For that reason,\n \t * by default VError converts \"null\" or \"undefined\" arguments to their\n \t * string representations and passes those to extsprintf.  Programmers\n \t * desiring the strict behavior can use the SError class or pass the\n \t * \"strict\" option to the VError constructor.\n \t */\n \tmod_assertplus.object(options);\n \tif (!options.strict && !args.strict) {\n \t\tsprintf_args = sprintf_args.map(function (a) {\n \t\t\treturn (a === null ? 'null' :\n \t\t\t    a === undefined ? 'undefined' : a);\n \t\t});\n \t}\n\n \tif (sprintf_args.length === 0) {\n \t\tshortmessage = '';\n \t} else {\n \t\tshortmessage = sprintf.apply(null, sprintf_args);\n \t}\n\n \treturn ({\n \t    'options': options,\n \t    'shortmessage': shortmessage\n \t});\n }\n\n /*\n  * See README.md for reference documentation.\n  */\n function VError()\n {\n \tvar args, obj, parsed, cause, ctor, message, k;\n\n \targs = Array.prototype.slice.call(arguments, 0);\n\n \t/*\n \t * This is a regrettable pattern, but JavaScript's built-in Error class\n \t * is defined to work this way, so we allow the constructor to be called\n \t * without \"new\".\n \t */\n \tif (!(this instanceof VError)) {\n \t\tobj = Object.create(VError.prototype);\n \t\tVError.apply(obj, arguments);\n \t\treturn (obj);\n \t}\n\n \t/*\n \t * For convenience and backwards compatibility, we support several\n \t * different calling forms.  Normalize them here.\n \t */\n \tparsed = parseConstructorArguments({\n \t    'argv': args,\n \t    'strict': false\n \t});\n\n \t/*\n \t * If we've been given a name, apply it now.\n \t */\n \tif (parsed.options.name) {\n \t\tmod_assertplus.string(parsed.options.name,\n \t\t    'error\\'s \"name\" must be a string');\n \t\tthis.name = parsed.options.name;\n \t}\n\n \t/*\n \t * For debugging, we keep track of the original short message (attached\n \t * this Error particularly) separately from the complete message (which\n \t * includes the messages of our cause chain).\n \t */\n \tthis.jse_shortmsg = parsed.shortmessage;\n \tmessage = parsed.shortmessage;\n\n \t/*\n \t * If we've been given a cause, record a reference to it and update our\n \t * message appropriately.\n \t */\n \tcause = parsed.options.cause;\n \tif (cause) {\n \t\tmod_assertplus.ok(mod_isError(cause), 'cause is not an Error');\n \t\tthis.jse_cause = cause;\n\n \t\tif (!parsed.options.skipCauseMessage) {\n \t\t\tmessage += ': ' + cause.message;\n \t\t}\n \t}\n\n \t/*\n \t * If we've been given an object with properties, shallow-copy that\n \t * here.  We don't want to use a deep copy in case there are non-plain\n \t * objects here, but we don't want to use the original object in case\n \t * the caller modifies it later.\n \t */\n \tthis.jse_info = {};\n \tif (parsed.options.info) {\n \t\tfor (k in parsed.options.info) {\n \t\t\tthis.jse_info[k] = parsed.options.info[k];\n \t\t}\n \t}\n\n \tthis.message = message;\n \tError.call(this, message);\n\n \tif (Error.captureStackTrace) {\n \t\tctor = parsed.options.constructorOpt || this.constructor;\n \t\tError.captureStackTrace(this, ctor);\n \t}\n\n \treturn (this);\n }\n\n mod_util.inherits(VError, Error);\n VError.prototype.name = 'VError';\n\n VError.prototype.toString = function ve_toString()\n {\n \tvar str = (this.hasOwnProperty('name') && this.name ||\n \t\tthis.constructor.name || this.constructor.prototype.name);\n \tif (this.message)\n \t\tstr += ': ' + this.message;\n\n \treturn (str);\n };\n\n /*\n  * This method is provided for compatibility.  New callers should use\n  * VError.cause() instead.  That method also uses the saner `null` return value\n  * when there is no cause.\n  */\n VError.prototype.cause = function ve_cause()\n {\n \tvar cause = VError.cause(this);\n \treturn (cause === null ? undefined : cause);\n };\n\n /*\n  * Static methods\n  *\n  * These class-level methods are provided so that callers can use them on\n  * instances of Errors that are not VErrors.  New interfaces should be provided\n  * only using static methods to eliminate the class of programming mistake where\n  * people fail to check whether the Error object has the corresponding methods.\n  */\n\n VError.cause = function (err)\n {\n \tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n \treturn (mod_isError(err.jse_cause) ? err.jse_cause : null);\n };\n\n VError.info = function (err)\n {\n \tvar rv, cause, k;\n\n \tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n \tcause = VError.cause(err);\n \tif (cause !== null) {\n \t\trv = VError.info(cause);\n \t} else {\n \t\trv = {};\n \t}\n\n \tif (typeof (err.jse_info) == 'object' && err.jse_info !== null) {\n \t\tfor (k in err.jse_info) {\n \t\t\trv[k] = err.jse_info[k];\n \t\t}\n \t}\n\n \treturn (rv);\n };\n\n VError.findCauseByName = function (err, name)\n {\n \tvar cause;\n\n \tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n \tmod_assertplus.string(name, 'name');\n \tmod_assertplus.ok(name.length > 0, 'name cannot be empty');\n\n \tfor (cause = err; cause !== null; cause = VError.cause(cause)) {\n \t\tmod_assertplus.ok(mod_isError(cause));\n \t\tif (cause.name == name) {\n \t\t\treturn (cause);\n \t\t}\n \t}\n\n \treturn (null);\n };\n\n VError.hasCauseWithName = function (err, name)\n {\n \treturn (VError.findCauseByName(err, name) !== null);\n };\n\n VError.fullStack = function (err)\n {\n \tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\n \tvar cause = VError.cause(err);\n\n \tif (cause) {\n \t\treturn (err.stack + '\\ncaused by: ' + VError.fullStack(cause));\n \t}\n\n \treturn (err.stack);\n };\n\n VError.errorFromList = function (errors)\n {\n \tmod_assertplus.arrayOfObject(errors, 'errors');\n\n \tif (errors.length === 0) {\n \t\treturn (null);\n \t}\n\n \terrors.forEach(function (e) {\n \t\tmod_assertplus.ok(mod_isError(e));\n \t});\n\n \tif (errors.length == 1) {\n \t\treturn (errors[0]);\n \t}\n\n \treturn (new MultiError(errors));\n };\n\n VError.errorForEach = function (err, func)\n {\n \tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n \tmod_assertplus.func(func, 'func');\n\n \tif (err instanceof MultiError) {\n \t\terr.errors().forEach(function iterError(e) { func(e); });\n \t} else {\n \t\tfunc(err);\n \t}\n };\n\n\n /*\n  * SError is like VError, but stricter about types.  You cannot pass \"null\" or\n  * \"undefined\" as string arguments to the formatter.\n  */\n function SError()\n {\n \tvar args, obj, parsed, options;\n\n \targs = Array.prototype.slice.call(arguments, 0);\n \tif (!(this instanceof SError)) {\n \t\tobj = Object.create(SError.prototype);\n \t\tSError.apply(obj, arguments);\n \t\treturn (obj);\n \t}\n\n \tparsed = parseConstructorArguments({\n \t    'argv': args,\n \t    'strict': true\n \t});\n\n \toptions = parsed.options;\n \tVError.call(this, options, '%s', parsed.shortmessage);\n\n \treturn (this);\n }\n\n /*\n  * We don't bother setting SError.prototype.name because once constructed,\n  * SErrors are just like VErrors.\n  */\n mod_util.inherits(SError, VError);\n\n\n /*\n  * Represents a collection of errors for the purpose of consumers that generally\n  * only deal with one error.  Callers can extract the individual errors\n  * contained in this object, but may also just treat it as a normal single\n  * error, in which case a summary message will be printed.\n  */\n function MultiError(errors)\n {\n \tmod_assertplus.array(errors, 'list of errors');\n \tmod_assertplus.ok(errors.length > 0, 'must be at least one error');\n \tthis.ase_errors = errors;\n\n \tVError.call(this, {\n \t    'cause': errors[0]\n \t}, 'first of %d error%s', errors.length, errors.length == 1 ? '' : 's');\n }\n\n mod_util.inherits(MultiError, VError);\n MultiError.prototype.name = 'MultiError';\n\n MultiError.prototype.errors = function me_errors()\n {\n \treturn (this.ase_errors.slice(0));\n };\n\n\n /*\n  * See README.md for reference details.\n  */\n function WError()\n {\n \tvar args, obj, parsed, options;\n\n \targs = Array.prototype.slice.call(arguments, 0);\n \tif (!(this instanceof WError)) {\n \t\tobj = Object.create(WError.prototype);\n \t\tWError.apply(obj, args);\n \t\treturn (obj);\n \t}\n\n \tparsed = parseConstructorArguments({\n \t    'argv': args,\n \t    'strict': false\n \t});\n\n \toptions = parsed.options;\n \toptions['skipCauseMessage'] = true;\n \tVError.call(this, options, '%s', parsed.shortmessage);\n\n \treturn (this);\n }\n\n mod_util.inherits(WError, VError);\n WError.prototype.name = 'WError';\n\n WError.prototype.toString = function we_toString()\n {\n \tvar str = (this.hasOwnProperty('name') && this.name ||\n \t\tthis.constructor.name || this.constructor.prototype.name);\n \tif (this.message)\n \t\tstr += ': ' + this.message;\n \tif (this.jse_cause && this.jse_cause.message)\n \t\tstr += '; caused by ' + this.jse_cause.toString();\n\n \treturn (str);\n };\n\n /*\n  * For purely historical reasons, WError's cause() function allows you to set\n  * the cause.\n  */\n WError.prototype.cause = function we_cause(c)\n {\n \tif (mod_isError(c))\n \t\tthis.jse_cause = c;\n\n \treturn (this.jse_cause);\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  'assert-plus': _req,\n  'util': _req0,\n  'extsprintf': _req1,\n  'core-util-is': _req2,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}