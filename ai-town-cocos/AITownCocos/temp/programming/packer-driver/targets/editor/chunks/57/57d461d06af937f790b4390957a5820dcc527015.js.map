{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/lodash-es/_createRound.js"],"names":["createRound","methodName","func","Math","number","precision","toNumber","nativeMin","toInteger","nativeIsFinite","pair","toString","split","value","root","isFinite","min"],"mappings":";;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,WAAT,CAAqBC,UAArB,EAAiC;AAC/B,QAAIC,IAAI,GAAGC,IAAI,CAACF,UAAD,CAAf;AACA,WAAO,UAASG,MAAT,EAAiBC,SAAjB,EAA4B;AACjCD,MAAAA,MAAM,GAAGE,QAAQ,CAACF,MAAD,CAAjB;AACAC,MAAAA,SAAS,GAAGA,SAAS,IAAI,IAAb,GAAoB,CAApB,GAAwBE,SAAS,CAACC,SAAS,CAACH,SAAD,CAAV,EAAuB,GAAvB,CAA7C;;AACA,UAAIA,SAAS,IAAII,cAAc,CAACL,MAAD,CAA/B,EAAyC;AACvC;AACA;AACA,YAAIM,IAAI,GAAG,CAACC,QAAQ,CAACP,MAAD,CAAR,GAAmB,GAApB,EAAyBQ,KAAzB,CAA+B,GAA/B,CAAX;AAAA,YACIC,KAAK,GAAGX,IAAI,CAACQ,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAV,IAAiB,CAACA,IAAI,CAAC,CAAD,CAAL,GAAWL,SAA5B,CAAD,CADhB;AAGAK,QAAAA,IAAI,GAAG,CAACC,QAAQ,CAACE,KAAD,CAAR,GAAkB,GAAnB,EAAwBD,KAAxB,CAA8B,GAA9B,CAAP;AACA,eAAO,EAAEF,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAV,IAAiB,CAACA,IAAI,CAAC,CAAD,CAAL,GAAWL,SAA5B,CAAF,CAAP;AACD;;AACD,aAAOH,IAAI,CAACE,MAAD,CAAX;AACD,KAbD;AAcD;;;;AAhCMU,MAAAA,I;;AACAN,MAAAA,S;;AACAF,MAAAA,Q;;AACAK,MAAAA,Q;;;AAEP;AACIF,MAAAA,c,GAAiBK,IAAI,CAACC,Q;AACtBR,MAAAA,S,GAAYJ,IAAI,CAACa,G;;yBA2BNhB,W","sourcesContent":["import root from './_root.js';\nimport toInteger from './toInteger.js';\nimport toNumber from './toNumber.js';\nimport toString from './toString.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = root.isFinite,\n    nativeMin = Math.min;\n\n/**\n * Creates a function like `_.round`.\n *\n * @private\n * @param {string} methodName The name of the `Math` method to use when rounding.\n * @returns {Function} Returns the new round function.\n */\nfunction createRound(methodName) {\n  var func = Math[methodName];\n  return function(number, precision) {\n    number = toNumber(number);\n    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n    if (precision && nativeIsFinite(number)) {\n      // Shift with exponential notation to avoid floating-point issues.\n      // See [MDN](https://mdn.io/round#Examples) for more details.\n      var pair = (toString(number) + 'e').split('e'),\n          value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n      pair = (toString(value) + 'e').split('e');\n      return +(pair[0] + 'e' + (+pair[1] - precision));\n    }\n    return func(number);\n  };\n}\n\nexport default createRound;\n"]}