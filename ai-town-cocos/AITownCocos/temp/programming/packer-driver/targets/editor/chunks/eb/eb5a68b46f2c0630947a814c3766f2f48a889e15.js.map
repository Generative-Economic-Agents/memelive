{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/lodash-es/transform.js"],"names":["transform","object","iteratee","accumulator","isArr","isArray","isArrLike","isBuffer","isTypedArray","baseIteratee","Ctor","constructor","isObject","isFunction","baseCreate","getPrototype","arrayEach","baseForOwn","value","index"],"mappings":";;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,SAAT,CAAmBC,MAAnB,EAA2BC,QAA3B,EAAqCC,WAArC,EAAkD;AAChD,QAAIC,KAAK,GAAGC,OAAO,CAACJ,MAAD,CAAnB;AAAA,QACIK,SAAS,GAAGF,KAAK,IAAIG,QAAQ,CAACN,MAAD,CAAjB,IAA6BO,YAAY,CAACP,MAAD,CADzD;AAGAC,IAAAA,QAAQ,GAAGO,YAAY,CAACP,QAAD,EAAW,CAAX,CAAvB;;AACA,QAAIC,WAAW,IAAI,IAAnB,EAAyB;AACvB,UAAIO,IAAI,GAAGT,MAAM,IAAIA,MAAM,CAACU,WAA5B;;AACA,UAAIL,SAAJ,EAAe;AACbH,QAAAA,WAAW,GAAGC,KAAK,GAAG,IAAIM,IAAJ,EAAH,GAAc,EAAjC;AACD,OAFD,MAGK,IAAIE,QAAQ,CAACX,MAAD,CAAZ,EAAsB;AACzBE,QAAAA,WAAW,GAAGU,UAAU,CAACH,IAAD,CAAV,GAAmBI,UAAU,CAACC,YAAY,CAACd,MAAD,CAAb,CAA7B,GAAsD,EAApE;AACD,OAFI,MAGA;AACHE,QAAAA,WAAW,GAAG,EAAd;AACD;AACF;;AACD,KAACG,SAAS,GAAGU,SAAH,GAAeC,UAAzB,EAAqChB,MAArC,EAA6C,UAASiB,KAAT,EAAgBC,KAAhB,EAAuBlB,MAAvB,EAA+B;AAC1E,aAAOC,QAAQ,CAACC,WAAD,EAAce,KAAd,EAAqBC,KAArB,EAA4BlB,MAA5B,CAAf;AACD,KAFD;AAGA,WAAOE,WAAP;AACD;;;;AA9DMa,MAAAA,S;;AACAF,MAAAA,U;;AACAG,MAAAA,U;;AACAR,MAAAA,Y;;AACAM,MAAAA,Y;;AACAV,MAAAA,O;;AACAE,MAAAA,Q;;AACAM,MAAAA,U;;AACAD,MAAAA,Q;;AACAJ,MAAAA,Y;;;yBAuDQR,S","sourcesContent":["import arrayEach from './_arrayEach.js';\nimport baseCreate from './_baseCreate.js';\nimport baseForOwn from './_baseForOwn.js';\nimport baseIteratee from './_baseIteratee.js';\nimport getPrototype from './_getPrototype.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isFunction from './isFunction.js';\nimport isObject from './isObject.js';\nimport isTypedArray from './isTypedArray.js';\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object),\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n  iteratee = baseIteratee(iteratee, 4);\n  if (accumulator == null) {\n    var Ctor = object && object.constructor;\n    if (isArrLike) {\n      accumulator = isArr ? new Ctor : [];\n    }\n    else if (isObject(object)) {\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n    }\n    else {\n      accumulator = {};\n    }\n  }\n  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nexport default transform;\n"]}