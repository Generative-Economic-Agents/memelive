{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/credentials/web_identity_credentials.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","AWS","STS","WebIdentityCredentials","util","inherit","Credentials","constructor","params","clientConfig","call","expired","RoleSessionName","data","_clientConfig","copy","refresh","callback","coalesceRefresh","fn","load","self","createClients","service","assumeRoleWithWebIdentity","err","credentialsFrom","stsConfig","merge","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;AACgBC,MAAAA,K,iBAAhBD,Y;;;8BAEHA,Y,GAAe,cAAYE,G;;AACjCJ,MAAAA,UAAU,CAACK,MAAX,CAAkBH,YAAlB,EAAgC,UAAUI,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC,YAAIC,GAAG,GAAGJ,OAAO,CAAC,SAAD,CAAjB;;AACA,YAAIK,GAAG,GAAGL,OAAO,CAAC,mBAAD,CAAjB;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCI,QAAAA,GAAG,CAACE,sBAAJ,GAA6BF,GAAG,CAACG,IAAJ,CAASC,OAAT,CAAiBJ,GAAG,CAACK,WAArB,EAAkC;AAC7D;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGC,UAAAA,WAAW,EAAE,SAASJ,sBAAT,CAAgCK,MAAhC,EAAwCC,YAAxC,EAAsD;AACjER,YAAAA,GAAG,CAACK,WAAJ,CAAgBI,IAAhB,CAAqB,IAArB;AACA,iBAAKC,OAAL,GAAe,IAAf;AACA,iBAAKH,MAAL,GAAcA,MAAd;AACA,iBAAKA,MAAL,CAAYI,eAAZ,GAA8B,KAAKJ,MAAL,CAAYI,eAAZ,IAA+B,cAA7D;AACA,iBAAKC,IAAL,GAAY,IAAZ;AACA,iBAAKC,aAAL,GAAqBb,GAAG,CAACG,IAAJ,CAASW,IAAT,CAAcN,YAAY,IAAI,EAA9B,CAArB;AACD,WA5B4D;;AA8B7D;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGO,UAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClC,iBAAKC,eAAL,CAAqBD,QAAQ,IAAIhB,GAAG,CAACG,IAAJ,CAASe,EAAT,CAAYF,QAA7C;AACD,WA3C4D;;AA6C7D;AACH;AACA;AACGG,UAAAA,IAAI,EAAE,SAASA,IAAT,CAAcH,QAAd,EAAwB;AAC5B,gBAAII,IAAI,GAAG,IAAX;AACAA,YAAAA,IAAI,CAACC,aAAL;AACAD,YAAAA,IAAI,CAACE,OAAL,CAAaC,yBAAb,CAAuC,UAAUC,GAAV,EAAeZ,IAAf,EAAqB;AAC1DQ,cAAAA,IAAI,CAACR,IAAL,GAAY,IAAZ;;AACA,kBAAI,CAACY,GAAL,EAAU;AACRJ,gBAAAA,IAAI,CAACR,IAAL,GAAYA,IAAZ;AACAQ,gBAAAA,IAAI,CAACE,OAAL,CAAaG,eAAb,CAA6Bb,IAA7B,EAAmCQ,IAAnC;AACD;;AACDJ,cAAAA,QAAQ,CAACQ,GAAD,CAAR;AACD,aAPD;AAQD,WA3D4D;;AA6D7D;AACH;AACA;AACGH,UAAAA,aAAa,EAAE,YAAW;AACxB,gBAAI,CAAC,KAAKC,OAAV,EAAmB;AACjB,kBAAII,SAAS,GAAG1B,GAAG,CAACG,IAAJ,CAASwB,KAAT,CAAe,EAAf,EAAmB,KAAKd,aAAxB,CAAhB;AACAa,cAAAA,SAAS,CAACnB,MAAV,GAAmB,KAAKA,MAAxB;AACA,mBAAKe,OAAL,GAAe,IAAIrB,GAAJ,CAAQyB,SAAR,CAAf;AACD;AACF;AAtE4D,SAAlC,CAA7B,CA9C0F,CAyH3F;;AAEA,2BAAAE,WAAW,GAAG/B,MAAM,CAACF,OAArB;AAGC,OA9HD,EA8HG,OAAO;AACR,mBAAWL,IADH;AAER,6BAAqBE;AAFb,OAAP,CA9HH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from '../../clients/sts';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n var STS = require('../../clients/sts');\n\n /**\n  * Represents credentials retrieved from STS Web Identity Federation support.\n  *\n  * By default this provider gets credentials using the\n  * {AWS.STS.assumeRoleWithWebIdentity} service operation. This operation\n  * requires a `RoleArn` containing the ARN of the IAM trust policy for the\n  * application for which credentials will be given. In addition, the\n  * `WebIdentityToken` must be set to the token provided by the identity\n  * provider. See {constructor} for an example on creating a credentials\n  * object with proper `RoleArn` and `WebIdentityToken` values.\n  *\n  * ## Refreshing Credentials from Identity Service\n  *\n  * In addition to AWS credentials expiring after a given amount of time, the\n  * login token from the identity provider will also expire. Once this token\n  * expires, it will not be usable to refresh AWS credentials, and another\n  * token will be needed. The SDK does not manage refreshing of the token value,\n  * but this can be done through a \"refresh token\" supported by most identity\n  * providers. Consult the documentation for the identity provider for refreshing\n  * tokens. Once the refreshed token is acquired, you should make sure to update\n  * this new token in the credentials object's {params} property. The following\n  * code will update the WebIdentityToken, assuming you have retrieved an updated\n  * token from the identity provider:\n  *\n  * ```javascript\n  * AWS.config.credentials.params.WebIdentityToken = updatedToken;\n  * ```\n  *\n  * Future calls to `credentials.refresh()` will now use the new token.\n  *\n  * @!attribute params\n  *   @return [map] the map of params passed to\n  *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the\n  *     `params.WebIdentityToken` property.\n  * @!attribute data\n  *   @return [map] the raw data response from the call to\n  *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get\n  *     access to other properties from the response.\n  */\n AWS.WebIdentityCredentials = AWS.util.inherit(AWS.Credentials, {\n   /**\n    * Creates a new credentials object.\n    * @param (see AWS.STS.assumeRoleWithWebIdentity)\n    * @example Creating a new credentials object\n    *   AWS.config.credentials = new AWS.WebIdentityCredentials({\n    *     RoleArn: 'arn:aws:iam::1234567890:role/WebIdentity',\n    *     WebIdentityToken: 'ABCDEFGHIJKLMNOP', // token from identity service\n    *     RoleSessionName: 'web' // optional name, defaults to web-identity\n    *   }, {\n    *     // optionally provide configuration to apply to the underlying AWS.STS service client\n    *     // if configuration is not provided, then configuration will be pulled from AWS.config\n    *\n    *     // specify timeout options\n    *     httpOptions: {\n    *       timeout: 100\n    *     }\n    *   });\n    * @see AWS.STS.assumeRoleWithWebIdentity\n    * @see AWS.Config\n    */\n   constructor: function WebIdentityCredentials(params, clientConfig) {\n     AWS.Credentials.call(this);\n     this.expired = true;\n     this.params = params;\n     this.params.RoleSessionName = this.params.RoleSessionName || 'web-identity';\n     this.data = null;\n     this._clientConfig = AWS.util.copy(clientConfig || {});\n   },\n\n   /**\n    * Refreshes credentials using {AWS.STS.assumeRoleWithWebIdentity}\n    *\n    * @callback callback function(err)\n    *   Called when the STS service responds (or fails). When\n    *   this callback is called with no error, it means that the credentials\n    *   information has been loaded into the object (as the `accessKeyId`,\n    *   `secretAccessKey`, and `sessionToken` properties).\n    *   @param err [Error] if an error occurred, this value will be filled\n    * @see get\n    */\n   refresh: function refresh(callback) {\n     this.coalesceRefresh(callback || AWS.util.fn.callback);\n   },\n\n   /**\n    * @api private\n    */\n   load: function load(callback) {\n     var self = this;\n     self.createClients();\n     self.service.assumeRoleWithWebIdentity(function (err, data) {\n       self.data = null;\n       if (!err) {\n         self.data = data;\n         self.service.credentialsFrom(data, self);\n       }\n       callback(err);\n     });\n   },\n\n   /**\n    * @api private\n    */\n   createClients: function() {\n     if (!this.service) {\n       var stsConfig = AWS.util.merge({}, this._clientConfig);\n       stsConfig.params = this.params;\n       this.service = new STS(stsConfig);\n     }\n   }\n\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n  '../../clients/sts': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}