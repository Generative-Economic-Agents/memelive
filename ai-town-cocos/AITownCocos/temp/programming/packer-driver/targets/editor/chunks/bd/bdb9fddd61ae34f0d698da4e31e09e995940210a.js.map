{"version":3,"sources":["file:///Users/feiwang/workSpace/AITown/cutepet/node_modules/lodash-es/trimStart.js"],"names":["trimStart","string","chars","guard","toString","undefined","replace","reTrimStart","baseToString","strSymbols","stringToArray","start","charsStartIndex","castSlice","join"],"mappings":";;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,SAAT,CAAmBC,MAAnB,EAA2BC,KAA3B,EAAkCC,KAAlC,EAAyC;AACvCF,IAAAA,MAAM,GAAGG,QAAQ,CAACH,MAAD,CAAjB;;AACA,QAAIA,MAAM,KAAKE,KAAK,IAAID,KAAK,KAAKG,SAAxB,CAAV,EAA8C;AAC5C,aAAOJ,MAAM,CAACK,OAAP,CAAeC,WAAf,EAA4B,EAA5B,CAAP;AACD;;AACD,QAAI,CAACN,MAAD,IAAW,EAAEC,KAAK,GAAGM,YAAY,CAACN,KAAD,CAAtB,CAAf,EAA+C;AAC7C,aAAOD,MAAP;AACD;;AACD,QAAIQ,UAAU,GAAGC,aAAa,CAACT,MAAD,CAA9B;AAAA,QACIU,KAAK,GAAGC,eAAe,CAACH,UAAD,EAAaC,aAAa,CAACR,KAAD,CAA1B,CAD3B;AAGA,WAAOW,SAAS,CAACJ,UAAD,EAAaE,KAAb,CAAT,CAA6BG,IAA7B,CAAkC,EAAlC,CAAP;AACD;;;;AAxCMN,MAAAA,Y;;AACAK,MAAAA,S;;AACAD,MAAAA,e;;AACAF,MAAAA,a;;AACAN,MAAAA,Q;;;AAEP;AACIG,MAAAA,W,GAAc,M;;yBAmCHP,S","sourcesContent":["import baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport charsStartIndex from './_charsStartIndex.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * Removes leading whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimStart('  abc  ');\n * // => 'abc  '\n *\n * _.trimStart('-_-abc-_-', '_-');\n * // => 'abc-_-'\n */\nfunction trimStart(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrimStart, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      start = charsStartIndex(strSymbols, stringToArray(chars));\n\n  return castSlice(strSymbols, start).join('');\n}\n\nexport default trimStart;\n"]}