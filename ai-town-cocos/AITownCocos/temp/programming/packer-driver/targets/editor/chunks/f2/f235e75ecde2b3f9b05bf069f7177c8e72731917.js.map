{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/apis/wisdom-2020-10-19.min.json"],"names":["version","metadata","apiVersion","endpointPrefix","jsonVersion","protocol","serviceFullName","serviceId","signatureVersion","signingName","uid","operations","CreateAssistant","http","requestUri","responseCode","input","type","required","members","clientToken","idempotencyToken","description","name","serverSideEncryptionConfiguration","shape","tags","output","assistant","idempotent","CreateAssistantAssociation","assistantId","location","locationName","association","knowledgeBaseId","union","associationType","assistantAssociation","CreateContent","overrideLinkOutUri","title","uploadId","content","CreateKnowledgeBase","knowledgeBaseType","renderingConfiguration","sourceConfiguration","knowledgeBase","CreateQuickResponse","channels","contentType","groupingConfiguration","isActive","language","shortcutKey","quickResponse","CreateSession","session","DeleteAssistant","method","DeleteAssistantAssociation","assistantAssociationId","DeleteContent","contentId","DeleteImportJob","importJobId","DeleteKnowledgeBase","DeleteQuickResponse","quickResponseId","GetAssistant","GetAssistantAssociation","GetContent","GetContentSummary","contentSummary","GetImportJob","importJob","GetKnowledgeBase","GetQuickResponse","GetRecommendations","maxResults","sessionId","waitTimeSeconds","recommendations","member","document","recommendationId","relevanceLevel","relevanceScore","triggers","data","query","text","id","recommendationIds","source","deprecated","deprecatedMessage","GetSession","ListAssistantAssociations","nextToken","assistantAssociationSummaries","assistantArn","assistantAssociationArn","associationData","ListAssistants","assistantSummaries","integrationConfiguration","status","ListContents","contentSummaries","ListImportJobs","importJobSummaries","createdTime","externalSourceConfiguration","importJobType","knowledgeBaseArn","lastModifiedTime","ListKnowledgeBases","knowledgeBaseSummaries","ListQuickResponses","quickResponseSummaries","lastModifiedBy","quickResponseArn","ListTagsForResource","resourceArn","NotifyRecommendationsReceived","errors","message","QueryAssistant","queryText","results","resultId","RemoveKnowledgeBaseTemplateUri","SearchContent","searchExpression","SearchQuickResponses","attributes","key","value","sensitive","filters","includeNoExistence","operator","values","orderOnField","order","queries","allowFuzziness","priority","attributesInterpolated","attributesNotInterpolated","contents","SearchSessions","sessionSummaries","sessionArn","StartContentUpload","presignedUrlTimeToLive","headersToInclude","url","urlExpiry","StartImportJob","TagResource","UntagResource","tagKeys","UpdateContent","removeOverrideLinkOutUri","revisionId","UpdateKnowledgeBaseTemplateUri","templateUri","UpdateQuickResponse","removeDescription","removeGroupingConfiguration","removeShortcutKey","shapes","S5","kmsKeyId","S7","Sc","Sf","topicIntegrationArn","Sn","So","knowledgeBaseAssociation","Sr","Sw","contentArn","linkOutUri","Sz","S10","timestampFormat","S13","S14","appIntegrations","appIntegrationArn","objectFields","S18","lastContentModificationTime","S1b","S1d","S1e","S1h","criteria","S1q","S1r","markdown","plainText","S1s","S1w","S2i","S2l","failedRecordReport","S2m","configuration","connectConfiguration","instanceId","S32","contentReference","excerpt","S34","highlights","beginOffsetInclusive","endOffsetExclusive","S3h","S3i","S3y","S4p","field","S5g"],"mappings":"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","sourcesContent":["export default {\n  version: '2.0',\n  metadata: {\n    apiVersion: '2020-10-19',\n    endpointPrefix: 'wisdom',\n    jsonVersion: '1.1',\n    protocol: 'rest-json',\n    serviceFullName: 'Amazon Connect Wisdom Service',\n    serviceId: 'Wisdom',\n    signatureVersion: 'v4',\n    signingName: 'wisdom',\n    uid: 'wisdom-2020-10-19'\n  },\n  operations: {\n    CreateAssistant: {\n      http: {\n        requestUri: '/assistants',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'name',\n          'type'\n        ],\n        members: {\n          clientToken: {\n            idempotencyToken: true\n          },\n          description: {},\n          name: {},\n          serverSideEncryptionConfiguration: {\n            shape: 'S5'\n          },\n          tags: {\n            shape: 'S7'\n          },\n          type: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          assistant: {\n            shape: 'Sc'\n          }\n        }\n      },\n      idempotent: true\n    },\n    CreateAssistantAssociation: {\n      http: {\n        requestUri: '/assistants/{assistantId}/associations',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'assistantId',\n          'association',\n          'associationType'\n        ],\n        members: {\n          assistantId: {\n            location: 'uri',\n            locationName: 'assistantId'\n          },\n          association: {\n            type: 'structure',\n            members: {\n              knowledgeBaseId: {}\n            },\n            union: true\n          },\n          associationType: {},\n          clientToken: {\n            idempotencyToken: true\n          },\n          tags: {\n            shape: 'S7'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          assistantAssociation: {\n            shape: 'Sn'\n          }\n        }\n      },\n      idempotent: true\n    },\n    CreateContent: {\n      http: {\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/contents',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'knowledgeBaseId',\n          'name',\n          'uploadId'\n        ],\n        members: {\n          clientToken: {\n            idempotencyToken: true\n          },\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          },\n          metadata: {\n            shape: 'Sr'\n          },\n          name: {},\n          overrideLinkOutUri: {},\n          tags: {\n            shape: 'S7'\n          },\n          title: {},\n          uploadId: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          content: {\n            shape: 'Sw'\n          }\n        }\n      },\n      idempotent: true\n    },\n    CreateKnowledgeBase: {\n      http: {\n        requestUri: '/knowledgeBases',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'knowledgeBaseType',\n          'name'\n        ],\n        members: {\n          clientToken: {\n            idempotencyToken: true\n          },\n          description: {},\n          knowledgeBaseType: {},\n          name: {},\n          renderingConfiguration: {\n            shape: 'S13'\n          },\n          serverSideEncryptionConfiguration: {\n            shape: 'S5'\n          },\n          sourceConfiguration: {\n            shape: 'S14'\n          },\n          tags: {\n            shape: 'S7'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          knowledgeBase: {\n            shape: 'S18'\n          }\n        }\n      },\n      idempotent: true\n    },\n    CreateQuickResponse: {\n      http: {\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/quickResponses',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'content',\n          'knowledgeBaseId',\n          'name'\n        ],\n        members: {\n          channels: {\n            shape: 'S1b'\n          },\n          clientToken: {\n            idempotencyToken: true\n          },\n          content: {\n            shape: 'S1d'\n          },\n          contentType: {},\n          description: {},\n          groupingConfiguration: {\n            shape: 'S1h'\n          },\n          isActive: {\n            type: 'boolean'\n          },\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          },\n          language: {},\n          name: {},\n          shortcutKey: {},\n          tags: {\n            shape: 'S7'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          quickResponse: {\n            shape: 'S1q'\n          }\n        }\n      },\n      idempotent: true\n    },\n    CreateSession: {\n      http: {\n        requestUri: '/assistants/{assistantId}/sessions',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'assistantId',\n          'name'\n        ],\n        members: {\n          assistantId: {\n            location: 'uri',\n            locationName: 'assistantId'\n          },\n          clientToken: {\n            idempotencyToken: true\n          },\n          description: {},\n          name: {},\n          tags: {\n            shape: 'S7'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          session: {\n            shape: 'S1w'\n          }\n        }\n      },\n      idempotent: true\n    },\n    DeleteAssistant: {\n      http: {\n        method: 'DELETE',\n        requestUri: '/assistants/{assistantId}',\n        responseCode: 204\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'assistantId'\n        ],\n        members: {\n          assistantId: {\n            location: 'uri',\n            locationName: 'assistantId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      },\n      idempotent: true\n    },\n    DeleteAssistantAssociation: {\n      http: {\n        method: 'DELETE',\n        requestUri: '/assistants/{assistantId}/associations/{assistantAssociationId}',\n        responseCode: 204\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'assistantAssociationId',\n          'assistantId'\n        ],\n        members: {\n          assistantAssociationId: {\n            location: 'uri',\n            locationName: 'assistantAssociationId'\n          },\n          assistantId: {\n            location: 'uri',\n            locationName: 'assistantId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      },\n      idempotent: true\n    },\n    DeleteContent: {\n      http: {\n        method: 'DELETE',\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/contents/{contentId}',\n        responseCode: 204\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'contentId',\n          'knowledgeBaseId'\n        ],\n        members: {\n          contentId: {\n            location: 'uri',\n            locationName: 'contentId'\n          },\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      },\n      idempotent: true\n    },\n    DeleteImportJob: {\n      http: {\n        method: 'DELETE',\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/importJobs/{importJobId}',\n        responseCode: 204\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'importJobId',\n          'knowledgeBaseId'\n        ],\n        members: {\n          importJobId: {\n            location: 'uri',\n            locationName: 'importJobId'\n          },\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      },\n      idempotent: true\n    },\n    DeleteKnowledgeBase: {\n      http: {\n        method: 'DELETE',\n        requestUri: '/knowledgeBases/{knowledgeBaseId}',\n        responseCode: 204\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'knowledgeBaseId'\n        ],\n        members: {\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      },\n      idempotent: true\n    },\n    DeleteQuickResponse: {\n      http: {\n        method: 'DELETE',\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/quickResponses/{quickResponseId}',\n        responseCode: 204\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'knowledgeBaseId',\n          'quickResponseId'\n        ],\n        members: {\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          },\n          quickResponseId: {\n            location: 'uri',\n            locationName: 'quickResponseId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      },\n      idempotent: true\n    },\n    GetAssistant: {\n      http: {\n        method: 'GET',\n        requestUri: '/assistants/{assistantId}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'assistantId'\n        ],\n        members: {\n          assistantId: {\n            location: 'uri',\n            locationName: 'assistantId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          assistant: {\n            shape: 'Sc'\n          }\n        }\n      }\n    },\n    GetAssistantAssociation: {\n      http: {\n        method: 'GET',\n        requestUri: '/assistants/{assistantId}/associations/{assistantAssociationId}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'assistantAssociationId',\n          'assistantId'\n        ],\n        members: {\n          assistantAssociationId: {\n            location: 'uri',\n            locationName: 'assistantAssociationId'\n          },\n          assistantId: {\n            location: 'uri',\n            locationName: 'assistantId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          assistantAssociation: {\n            shape: 'Sn'\n          }\n        }\n      }\n    },\n    GetContent: {\n      http: {\n        method: 'GET',\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/contents/{contentId}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'contentId',\n          'knowledgeBaseId'\n        ],\n        members: {\n          contentId: {\n            location: 'uri',\n            locationName: 'contentId'\n          },\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          content: {\n            shape: 'Sw'\n          }\n        }\n      }\n    },\n    GetContentSummary: {\n      http: {\n        method: 'GET',\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/contents/{contentId}/summary',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'contentId',\n          'knowledgeBaseId'\n        ],\n        members: {\n          contentId: {\n            location: 'uri',\n            locationName: 'contentId'\n          },\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          contentSummary: {\n            shape: 'S2i'\n          }\n        }\n      }\n    },\n    GetImportJob: {\n      http: {\n        method: 'GET',\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/importJobs/{importJobId}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'importJobId',\n          'knowledgeBaseId'\n        ],\n        members: {\n          importJobId: {\n            location: 'uri',\n            locationName: 'importJobId'\n          },\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          importJob: {\n            shape: 'S2l'\n          }\n        }\n      }\n    },\n    GetKnowledgeBase: {\n      http: {\n        method: 'GET',\n        requestUri: '/knowledgeBases/{knowledgeBaseId}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'knowledgeBaseId'\n        ],\n        members: {\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          knowledgeBase: {\n            shape: 'S18'\n          }\n        }\n      }\n    },\n    GetQuickResponse: {\n      http: {\n        method: 'GET',\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/quickResponses/{quickResponseId}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'knowledgeBaseId',\n          'quickResponseId'\n        ],\n        members: {\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          },\n          quickResponseId: {\n            location: 'uri',\n            locationName: 'quickResponseId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          quickResponse: {\n            shape: 'S1q'\n          }\n        }\n      }\n    },\n    GetRecommendations: {\n      http: {\n        method: 'GET',\n        requestUri: '/assistants/{assistantId}/sessions/{sessionId}/recommendations',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'assistantId',\n          'sessionId'\n        ],\n        members: {\n          assistantId: {\n            location: 'uri',\n            locationName: 'assistantId'\n          },\n          maxResults: {\n            location: 'querystring',\n            locationName: 'maxResults',\n            type: 'integer'\n          },\n          sessionId: {\n            location: 'uri',\n            locationName: 'sessionId'\n          },\n          waitTimeSeconds: {\n            location: 'querystring',\n            locationName: 'waitTimeSeconds',\n            type: 'integer'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'recommendations'\n        ],\n        members: {\n          recommendations: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'document',\n                'recommendationId'\n              ],\n              members: {\n                document: {\n                  shape: 'S32'\n                },\n                recommendationId: {},\n                relevanceLevel: {},\n                relevanceScore: {\n                  type: 'double'\n                },\n                type: {}\n              }\n            }\n          },\n          triggers: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'data',\n                'id',\n                'recommendationIds',\n                'source',\n                'type'\n              ],\n              members: {\n                data: {\n                  type: 'structure',\n                  members: {\n                    query: {\n                      type: 'structure',\n                      members: {\n                        text: {\n                          shape: 'S3h'\n                        }\n                      }\n                    }\n                  },\n                  union: true\n                },\n                id: {},\n                recommendationIds: {\n                  shape: 'S3i'\n                },\n                source: {},\n                type: {}\n              }\n            }\n          }\n        }\n      },\n      deprecated: true,\n      deprecatedMessage: 'GetRecommendations API will be discontinued starting June 1, 2024. To receive generative responses after March 1, 2024 you will need to create a new Assistant in the Connect console and integrate the Amazon Q in Connect JavaScript library (amazon-q-connectjs) into your applications.'\n    },\n    GetSession: {\n      http: {\n        method: 'GET',\n        requestUri: '/assistants/{assistantId}/sessions/{sessionId}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'assistantId',\n          'sessionId'\n        ],\n        members: {\n          assistantId: {\n            location: 'uri',\n            locationName: 'assistantId'\n          },\n          sessionId: {\n            location: 'uri',\n            locationName: 'sessionId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          session: {\n            shape: 'S1w'\n          }\n        }\n      }\n    },\n    ListAssistantAssociations: {\n      http: {\n        method: 'GET',\n        requestUri: '/assistants/{assistantId}/associations',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'assistantId'\n        ],\n        members: {\n          assistantId: {\n            location: 'uri',\n            locationName: 'assistantId'\n          },\n          maxResults: {\n            location: 'querystring',\n            locationName: 'maxResults',\n            type: 'integer'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'assistantAssociationSummaries'\n        ],\n        members: {\n          assistantAssociationSummaries: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'assistantArn',\n                'assistantAssociationArn',\n                'assistantAssociationId',\n                'assistantId',\n                'associationData',\n                'associationType'\n              ],\n              members: {\n                assistantArn: {},\n                assistantAssociationArn: {},\n                assistantAssociationId: {},\n                assistantId: {},\n                associationData: {\n                  shape: 'So'\n                },\n                associationType: {},\n                tags: {\n                  shape: 'S7'\n                }\n              }\n            }\n          },\n          nextToken: {}\n        }\n      }\n    },\n    ListAssistants: {\n      http: {\n        method: 'GET',\n        requestUri: '/assistants',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        members: {\n          maxResults: {\n            location: 'querystring',\n            locationName: 'maxResults',\n            type: 'integer'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'assistantSummaries'\n        ],\n        members: {\n          assistantSummaries: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'assistantArn',\n                'assistantId',\n                'name',\n                'status',\n                'type'\n              ],\n              members: {\n                assistantArn: {},\n                assistantId: {},\n                description: {},\n                integrationConfiguration: {\n                  shape: 'Sf'\n                },\n                name: {},\n                serverSideEncryptionConfiguration: {\n                  shape: 'S5'\n                },\n                status: {},\n                tags: {\n                  shape: 'S7'\n                },\n                type: {}\n              }\n            }\n          },\n          nextToken: {}\n        }\n      }\n    },\n    ListContents: {\n      http: {\n        method: 'GET',\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/contents',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'knowledgeBaseId'\n        ],\n        members: {\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          },\n          maxResults: {\n            location: 'querystring',\n            locationName: 'maxResults',\n            type: 'integer'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'contentSummaries'\n        ],\n        members: {\n          contentSummaries: {\n            shape: 'S3y'\n          },\n          nextToken: {}\n        }\n      }\n    },\n    ListImportJobs: {\n      http: {\n        method: 'GET',\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/importJobs',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'knowledgeBaseId'\n        ],\n        members: {\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          },\n          maxResults: {\n            location: 'querystring',\n            locationName: 'maxResults',\n            type: 'integer'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'importJobSummaries'\n        ],\n        members: {\n          importJobSummaries: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'createdTime',\n                'importJobId',\n                'importJobType',\n                'knowledgeBaseArn',\n                'knowledgeBaseId',\n                'lastModifiedTime',\n                'status',\n                'uploadId'\n              ],\n              members: {\n                createdTime: {\n                  shape: 'S10'\n                },\n                externalSourceConfiguration: {\n                  shape: 'S2m'\n                },\n                importJobId: {},\n                importJobType: {},\n                knowledgeBaseArn: {},\n                knowledgeBaseId: {},\n                lastModifiedTime: {\n                  shape: 'S10'\n                },\n                metadata: {\n                  shape: 'Sr'\n                },\n                status: {},\n                uploadId: {}\n              }\n            }\n          },\n          nextToken: {}\n        }\n      }\n    },\n    ListKnowledgeBases: {\n      http: {\n        method: 'GET',\n        requestUri: '/knowledgeBases',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        members: {\n          maxResults: {\n            location: 'querystring',\n            locationName: 'maxResults',\n            type: 'integer'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'knowledgeBaseSummaries'\n        ],\n        members: {\n          knowledgeBaseSummaries: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'knowledgeBaseArn',\n                'knowledgeBaseId',\n                'knowledgeBaseType',\n                'name',\n                'status'\n              ],\n              members: {\n                description: {},\n                knowledgeBaseArn: {},\n                knowledgeBaseId: {},\n                knowledgeBaseType: {},\n                name: {},\n                renderingConfiguration: {\n                  shape: 'S13'\n                },\n                serverSideEncryptionConfiguration: {\n                  shape: 'S5'\n                },\n                sourceConfiguration: {\n                  shape: 'S14'\n                },\n                status: {},\n                tags: {\n                  shape: 'S7'\n                }\n              }\n            }\n          },\n          nextToken: {}\n        }\n      }\n    },\n    ListQuickResponses: {\n      http: {\n        method: 'GET',\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/quickResponses',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'knowledgeBaseId'\n        ],\n        members: {\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          },\n          maxResults: {\n            location: 'querystring',\n            locationName: 'maxResults',\n            type: 'integer'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'quickResponseSummaries'\n        ],\n        members: {\n          nextToken: {},\n          quickResponseSummaries: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'contentType',\n                'createdTime',\n                'knowledgeBaseArn',\n                'knowledgeBaseId',\n                'lastModifiedTime',\n                'name',\n                'quickResponseArn',\n                'quickResponseId',\n                'status'\n              ],\n              members: {\n                channels: {\n                  shape: 'S1b'\n                },\n                contentType: {},\n                createdTime: {\n                  shape: 'S10'\n                },\n                description: {},\n                isActive: {\n                  type: 'boolean'\n                },\n                knowledgeBaseArn: {},\n                knowledgeBaseId: {},\n                lastModifiedBy: {},\n                lastModifiedTime: {\n                  shape: 'S10'\n                },\n                name: {},\n                quickResponseArn: {},\n                quickResponseId: {},\n                status: {},\n                tags: {\n                  shape: 'S7'\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    ListTagsForResource: {\n      http: {\n        method: 'GET',\n        requestUri: '/tags/{resourceArn}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'resourceArn'\n        ],\n        members: {\n          resourceArn: {\n            location: 'uri',\n            locationName: 'resourceArn'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          tags: {\n            shape: 'S7'\n          }\n        }\n      }\n    },\n    NotifyRecommendationsReceived: {\n      http: {\n        requestUri: '/assistants/{assistantId}/sessions/{sessionId}/recommendations/notify',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'assistantId',\n          'recommendationIds',\n          'sessionId'\n        ],\n        members: {\n          assistantId: {\n            location: 'uri',\n            locationName: 'assistantId'\n          },\n          recommendationIds: {\n            shape: 'S3i'\n          },\n          sessionId: {\n            location: 'uri',\n            locationName: 'sessionId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          errors: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              members: {\n                message: {},\n                recommendationId: {}\n              }\n            }\n          },\n          recommendationIds: {\n            shape: 'S3i'\n          }\n        }\n      },\n      idempotent: true\n    },\n    QueryAssistant: {\n      http: {\n        requestUri: '/assistants/{assistantId}/query',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'assistantId',\n          'queryText'\n        ],\n        members: {\n          assistantId: {\n            location: 'uri',\n            locationName: 'assistantId'\n          },\n          maxResults: {\n            type: 'integer'\n          },\n          nextToken: {},\n          queryText: {\n            shape: 'S3h'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'results'\n        ],\n        members: {\n          nextToken: {},\n          results: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'document',\n                'resultId'\n              ],\n              members: {\n                document: {\n                  shape: 'S32'\n                },\n                relevanceScore: {\n                  type: 'double'\n                },\n                resultId: {}\n              }\n            }\n          }\n        }\n      },\n      deprecated: true,\n      deprecatedMessage: 'QueryAssistant API will be discontinued starting June 1, 2024. To receive generative responses after March 1, 2024 you will need to create a new Assistant in the Connect console and integrate the Amazon Q in Connect JavaScript library (amazon-q-connectjs) into your applications.'\n    },\n    RemoveKnowledgeBaseTemplateUri: {\n      http: {\n        method: 'DELETE',\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/templateUri',\n        responseCode: 204\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'knowledgeBaseId'\n        ],\n        members: {\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      }\n    },\n    SearchContent: {\n      http: {\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/search',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'knowledgeBaseId',\n          'searchExpression'\n        ],\n        members: {\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          },\n          maxResults: {\n            location: 'querystring',\n            locationName: 'maxResults',\n            type: 'integer'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          },\n          searchExpression: {\n            shape: 'S4p'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'contentSummaries'\n        ],\n        members: {\n          contentSummaries: {\n            shape: 'S3y'\n          },\n          nextToken: {}\n        }\n      }\n    },\n    SearchQuickResponses: {\n      http: {\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/search/quickResponses',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'knowledgeBaseId',\n          'searchExpression'\n        ],\n        members: {\n          attributes: {\n            type: 'map',\n            key: {},\n            value: {},\n            sensitive: true\n          },\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          },\n          maxResults: {\n            location: 'querystring',\n            locationName: 'maxResults',\n            type: 'integer'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          },\n          searchExpression: {\n            type: 'structure',\n            members: {\n              filters: {\n                type: 'list',\n                member: {\n                  type: 'structure',\n                  required: [\n                    'name',\n                    'operator'\n                  ],\n                  members: {\n                    includeNoExistence: {\n                      type: 'boolean'\n                    },\n                    name: {},\n                    operator: {},\n                    values: {\n                      type: 'list',\n                      member: {}\n                    }\n                  }\n                }\n              },\n              orderOnField: {\n                type: 'structure',\n                required: [\n                  'name'\n                ],\n                members: {\n                  name: {},\n                  order: {}\n                }\n              },\n              queries: {\n                type: 'list',\n                member: {\n                  type: 'structure',\n                  required: [\n                    'name',\n                    'operator',\n                    'values'\n                  ],\n                  members: {\n                    allowFuzziness: {\n                      type: 'boolean'\n                    },\n                    name: {},\n                    operator: {},\n                    priority: {},\n                    values: {\n                      type: 'list',\n                      member: {}\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'results'\n        ],\n        members: {\n          nextToken: {},\n          results: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'contentType',\n                'contents',\n                'createdTime',\n                'isActive',\n                'knowledgeBaseArn',\n                'knowledgeBaseId',\n                'lastModifiedTime',\n                'name',\n                'quickResponseArn',\n                'quickResponseId',\n                'status'\n              ],\n              members: {\n                attributesInterpolated: {\n                  shape: 'S5g'\n                },\n                attributesNotInterpolated: {\n                  shape: 'S5g'\n                },\n                channels: {\n                  shape: 'S1b'\n                },\n                contentType: {},\n                contents: {\n                  shape: 'S1r'\n                },\n                createdTime: {\n                  shape: 'S10'\n                },\n                description: {},\n                groupingConfiguration: {\n                  shape: 'S1h'\n                },\n                isActive: {\n                  type: 'boolean'\n                },\n                knowledgeBaseArn: {},\n                knowledgeBaseId: {},\n                language: {},\n                lastModifiedBy: {},\n                lastModifiedTime: {\n                  shape: 'S10'\n                },\n                name: {},\n                quickResponseArn: {},\n                quickResponseId: {},\n                shortcutKey: {},\n                status: {},\n                tags: {\n                  shape: 'S7'\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    SearchSessions: {\n      http: {\n        requestUri: '/assistants/{assistantId}/searchSessions',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'assistantId',\n          'searchExpression'\n        ],\n        members: {\n          assistantId: {\n            location: 'uri',\n            locationName: 'assistantId'\n          },\n          maxResults: {\n            location: 'querystring',\n            locationName: 'maxResults',\n            type: 'integer'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          },\n          searchExpression: {\n            shape: 'S4p'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'sessionSummaries'\n        ],\n        members: {\n          nextToken: {},\n          sessionSummaries: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'assistantArn',\n                'assistantId',\n                'sessionArn',\n                'sessionId'\n              ],\n              members: {\n                assistantArn: {},\n                assistantId: {},\n                sessionArn: {},\n                sessionId: {}\n              }\n            }\n          }\n        }\n      }\n    },\n    StartContentUpload: {\n      http: {\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/upload',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'contentType',\n          'knowledgeBaseId'\n        ],\n        members: {\n          contentType: {},\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          },\n          presignedUrlTimeToLive: {\n            type: 'integer'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'headersToInclude',\n          'uploadId',\n          'url',\n          'urlExpiry'\n        ],\n        members: {\n          headersToInclude: {\n            type: 'map',\n            key: {},\n            value: {}\n          },\n          uploadId: {},\n          url: {\n            shape: 'Sz'\n          },\n          urlExpiry: {\n            shape: 'S10'\n          }\n        }\n      }\n    },\n    StartImportJob: {\n      http: {\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/importJobs',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'importJobType',\n          'knowledgeBaseId',\n          'uploadId'\n        ],\n        members: {\n          clientToken: {\n            idempotencyToken: true\n          },\n          externalSourceConfiguration: {\n            shape: 'S2m'\n          },\n          importJobType: {},\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          },\n          metadata: {\n            shape: 'Sr'\n          },\n          uploadId: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          importJob: {\n            shape: 'S2l'\n          }\n        }\n      },\n      idempotent: true\n    },\n    TagResource: {\n      http: {\n        requestUri: '/tags/{resourceArn}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'resourceArn',\n          'tags'\n        ],\n        members: {\n          resourceArn: {\n            location: 'uri',\n            locationName: 'resourceArn'\n          },\n          tags: {\n            shape: 'S7'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      },\n      idempotent: true\n    },\n    UntagResource: {\n      http: {\n        method: 'DELETE',\n        requestUri: '/tags/{resourceArn}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'resourceArn',\n          'tagKeys'\n        ],\n        members: {\n          resourceArn: {\n            location: 'uri',\n            locationName: 'resourceArn'\n          },\n          tagKeys: {\n            location: 'querystring',\n            locationName: 'tagKeys',\n            type: 'list',\n            member: {}\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      },\n      idempotent: true\n    },\n    UpdateContent: {\n      http: {\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/contents/{contentId}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'contentId',\n          'knowledgeBaseId'\n        ],\n        members: {\n          contentId: {\n            location: 'uri',\n            locationName: 'contentId'\n          },\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          },\n          metadata: {\n            shape: 'Sr'\n          },\n          overrideLinkOutUri: {},\n          removeOverrideLinkOutUri: {\n            type: 'boolean'\n          },\n          revisionId: {},\n          title: {},\n          uploadId: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          content: {\n            shape: 'Sw'\n          }\n        }\n      }\n    },\n    UpdateKnowledgeBaseTemplateUri: {\n      http: {\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/templateUri',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'knowledgeBaseId',\n          'templateUri'\n        ],\n        members: {\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          },\n          templateUri: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          knowledgeBase: {\n            shape: 'S18'\n          }\n        }\n      }\n    },\n    UpdateQuickResponse: {\n      http: {\n        requestUri: '/knowledgeBases/{knowledgeBaseId}/quickResponses/{quickResponseId}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'knowledgeBaseId',\n          'quickResponseId'\n        ],\n        members: {\n          channels: {\n            shape: 'S1b'\n          },\n          content: {\n            shape: 'S1d'\n          },\n          contentType: {},\n          description: {},\n          groupingConfiguration: {\n            shape: 'S1h'\n          },\n          isActive: {\n            type: 'boolean'\n          },\n          knowledgeBaseId: {\n            location: 'uri',\n            locationName: 'knowledgeBaseId'\n          },\n          language: {},\n          name: {},\n          quickResponseId: {\n            location: 'uri',\n            locationName: 'quickResponseId'\n          },\n          removeDescription: {\n            type: 'boolean'\n          },\n          removeGroupingConfiguration: {\n            type: 'boolean'\n          },\n          removeShortcutKey: {\n            type: 'boolean'\n          },\n          shortcutKey: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          quickResponse: {\n            shape: 'S1q'\n          }\n        }\n      }\n    }\n  },\n  shapes: {\n    S5: {\n      type: 'structure',\n      members: {\n        kmsKeyId: {}\n      }\n    },\n    S7: {\n      type: 'map',\n      key: {},\n      value: {}\n    },\n    Sc: {\n      type: 'structure',\n      required: [\n        'assistantArn',\n        'assistantId',\n        'name',\n        'status',\n        'type'\n      ],\n      members: {\n        assistantArn: {},\n        assistantId: {},\n        description: {},\n        integrationConfiguration: {\n          shape: 'Sf'\n        },\n        name: {},\n        serverSideEncryptionConfiguration: {\n          shape: 'S5'\n        },\n        status: {},\n        tags: {\n          shape: 'S7'\n        },\n        type: {}\n      }\n    },\n    Sf: {\n      type: 'structure',\n      members: {\n        topicIntegrationArn: {}\n      }\n    },\n    Sn: {\n      type: 'structure',\n      required: [\n        'assistantArn',\n        'assistantAssociationArn',\n        'assistantAssociationId',\n        'assistantId',\n        'associationData',\n        'associationType'\n      ],\n      members: {\n        assistantArn: {},\n        assistantAssociationArn: {},\n        assistantAssociationId: {},\n        assistantId: {},\n        associationData: {\n          shape: 'So'\n        },\n        associationType: {},\n        tags: {\n          shape: 'S7'\n        }\n      }\n    },\n    So: {\n      type: 'structure',\n      members: {\n        knowledgeBaseAssociation: {\n          type: 'structure',\n          members: {\n            knowledgeBaseArn: {},\n            knowledgeBaseId: {}\n          }\n        }\n      },\n      union: true\n    },\n    Sr: {\n      type: 'map',\n      key: {},\n      value: {}\n    },\n    Sw: {\n      type: 'structure',\n      required: [\n        'contentArn',\n        'contentId',\n        'contentType',\n        'knowledgeBaseArn',\n        'knowledgeBaseId',\n        'metadata',\n        'name',\n        'revisionId',\n        'status',\n        'title',\n        'url',\n        'urlExpiry'\n      ],\n      members: {\n        contentArn: {},\n        contentId: {},\n        contentType: {},\n        knowledgeBaseArn: {},\n        knowledgeBaseId: {},\n        linkOutUri: {},\n        metadata: {\n          shape: 'Sr'\n        },\n        name: {},\n        revisionId: {},\n        status: {},\n        tags: {\n          shape: 'S7'\n        },\n        title: {},\n        url: {\n          shape: 'Sz'\n        },\n        urlExpiry: {\n          shape: 'S10'\n        }\n      }\n    },\n    Sz: {\n      type: 'string',\n      sensitive: true\n    },\n    S10: {\n      type: 'timestamp',\n      timestampFormat: 'unixTimestamp'\n    },\n    S13: {\n      type: 'structure',\n      members: {\n        templateUri: {}\n      }\n    },\n    S14: {\n      type: 'structure',\n      members: {\n        appIntegrations: {\n          type: 'structure',\n          required: [\n            'appIntegrationArn'\n          ],\n          members: {\n            appIntegrationArn: {},\n            objectFields: {\n              type: 'list',\n              member: {}\n            }\n          }\n        }\n      },\n      union: true\n    },\n    S18: {\n      type: 'structure',\n      required: [\n        'knowledgeBaseArn',\n        'knowledgeBaseId',\n        'knowledgeBaseType',\n        'name',\n        'status'\n      ],\n      members: {\n        description: {},\n        knowledgeBaseArn: {},\n        knowledgeBaseId: {},\n        knowledgeBaseType: {},\n        lastContentModificationTime: {\n          shape: 'S10'\n        },\n        name: {},\n        renderingConfiguration: {\n          shape: 'S13'\n        },\n        serverSideEncryptionConfiguration: {\n          shape: 'S5'\n        },\n        sourceConfiguration: {\n          shape: 'S14'\n        },\n        status: {},\n        tags: {\n          shape: 'S7'\n        }\n      }\n    },\n    S1b: {\n      type: 'list',\n      member: {\n        type: 'string',\n        sensitive: true\n      }\n    },\n    S1d: {\n      type: 'structure',\n      members: {\n        content: {\n          shape: 'S1e'\n        }\n      },\n      union: true\n    },\n    S1e: {\n      type: 'string',\n      sensitive: true\n    },\n    S1h: {\n      type: 'structure',\n      members: {\n        criteria: {\n          type: 'string',\n          sensitive: true\n        },\n        values: {\n          type: 'list',\n          member: {\n            type: 'string',\n            sensitive: true\n          }\n        }\n      }\n    },\n    S1q: {\n      type: 'structure',\n      required: [\n        'contentType',\n        'createdTime',\n        'knowledgeBaseArn',\n        'knowledgeBaseId',\n        'lastModifiedTime',\n        'name',\n        'quickResponseArn',\n        'quickResponseId',\n        'status'\n      ],\n      members: {\n        channels: {\n          shape: 'S1b'\n        },\n        contentType: {},\n        contents: {\n          shape: 'S1r'\n        },\n        createdTime: {\n          shape: 'S10'\n        },\n        description: {},\n        groupingConfiguration: {\n          shape: 'S1h'\n        },\n        isActive: {\n          type: 'boolean'\n        },\n        knowledgeBaseArn: {},\n        knowledgeBaseId: {},\n        language: {},\n        lastModifiedBy: {},\n        lastModifiedTime: {\n          shape: 'S10'\n        },\n        name: {},\n        quickResponseArn: {},\n        quickResponseId: {},\n        shortcutKey: {},\n        status: {},\n        tags: {\n          shape: 'S7'\n        }\n      }\n    },\n    S1r: {\n      type: 'structure',\n      members: {\n        markdown: {\n          shape: 'S1s'\n        },\n        plainText: {\n          shape: 'S1s'\n        }\n      }\n    },\n    S1s: {\n      type: 'structure',\n      members: {\n        content: {\n          shape: 'S1e'\n        }\n      },\n      union: true\n    },\n    S1w: {\n      type: 'structure',\n      required: [\n        'name',\n        'sessionArn',\n        'sessionId'\n      ],\n      members: {\n        description: {},\n        integrationConfiguration: {\n          type: 'structure',\n          members: {\n            topicIntegrationArn: {}\n          }\n        },\n        name: {},\n        sessionArn: {},\n        sessionId: {},\n        tags: {\n          shape: 'S7'\n        }\n      }\n    },\n    S2i: {\n      type: 'structure',\n      required: [\n        'contentArn',\n        'contentId',\n        'contentType',\n        'knowledgeBaseArn',\n        'knowledgeBaseId',\n        'metadata',\n        'name',\n        'revisionId',\n        'status',\n        'title'\n      ],\n      members: {\n        contentArn: {},\n        contentId: {},\n        contentType: {},\n        knowledgeBaseArn: {},\n        knowledgeBaseId: {},\n        metadata: {\n          shape: 'Sr'\n        },\n        name: {},\n        revisionId: {},\n        status: {},\n        tags: {\n          shape: 'S7'\n        },\n        title: {}\n      }\n    },\n    S2l: {\n      type: 'structure',\n      required: [\n        'createdTime',\n        'importJobId',\n        'importJobType',\n        'knowledgeBaseArn',\n        'knowledgeBaseId',\n        'lastModifiedTime',\n        'status',\n        'uploadId',\n        'url',\n        'urlExpiry'\n      ],\n      members: {\n        createdTime: {\n          shape: 'S10'\n        },\n        externalSourceConfiguration: {\n          shape: 'S2m'\n        },\n        failedRecordReport: {\n          shape: 'Sz'\n        },\n        importJobId: {},\n        importJobType: {},\n        knowledgeBaseArn: {},\n        knowledgeBaseId: {},\n        lastModifiedTime: {\n          shape: 'S10'\n        },\n        metadata: {\n          shape: 'Sr'\n        },\n        status: {},\n        uploadId: {},\n        url: {\n          shape: 'Sz'\n        },\n        urlExpiry: {\n          shape: 'S10'\n        }\n      }\n    },\n    S2m: {\n      type: 'structure',\n      required: [\n        'configuration',\n        'source'\n      ],\n      members: {\n        configuration: {\n          type: 'structure',\n          members: {\n            connectConfiguration: {\n              type: 'structure',\n              members: {\n                instanceId: {}\n              }\n            }\n          },\n          union: true\n        },\n        source: {}\n      }\n    },\n    S32: {\n      type: 'structure',\n      required: [\n        'contentReference'\n      ],\n      members: {\n        contentReference: {\n          type: 'structure',\n          members: {\n            contentArn: {},\n            contentId: {},\n            knowledgeBaseArn: {},\n            knowledgeBaseId: {}\n          }\n        },\n        excerpt: {\n          shape: 'S34'\n        },\n        title: {\n          shape: 'S34'\n        }\n      }\n    },\n    S34: {\n      type: 'structure',\n      members: {\n        highlights: {\n          type: 'list',\n          member: {\n            type: 'structure',\n            members: {\n              beginOffsetInclusive: {\n                type: 'integer'\n              },\n              endOffsetExclusive: {\n                type: 'integer'\n              }\n            }\n          }\n        },\n        text: {\n          type: 'string',\n          sensitive: true\n        }\n      }\n    },\n    S3h: {\n      type: 'string',\n      sensitive: true\n    },\n    S3i: {\n      type: 'list',\n      member: {}\n    },\n    S3y: {\n      type: 'list',\n      member: {\n        shape: 'S2i'\n      }\n    },\n    S4p: {\n      type: 'structure',\n      required: [\n        'filters'\n      ],\n      members: {\n        filters: {\n          type: 'list',\n          member: {\n            type: 'structure',\n            required: [\n              'field',\n              'operator',\n              'value'\n            ],\n            members: {\n              field: {},\n              operator: {},\n              value: {}\n            }\n          }\n        }\n      }\n    },\n    S5g: {\n      type: 'list',\n      member: {},\n      sensitive: true\n    }\n  }\n}"]}