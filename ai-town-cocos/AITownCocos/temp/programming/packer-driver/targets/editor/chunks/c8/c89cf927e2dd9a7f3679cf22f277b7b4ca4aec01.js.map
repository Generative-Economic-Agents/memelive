{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/lodash-es/chunk.js"],"names":["chunk","array","size","guard","isIterateeCall","undefined","nativeMax","toInteger","length","index","resIndex","result","Array","nativeCeil","baseSlice","Math","ceil","max"],"mappings":";;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,KAAT,CAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC;AACjC,QAAKA,KAAK,GAAGC,cAAc,CAACH,KAAD,EAAQC,IAAR,EAAcC,KAAd,CAAjB,GAAwCD,IAAI,KAAKG,SAA3D,EAAuE;AACrEH,MAAAA,IAAI,GAAG,CAAP;AACD,KAFD,MAEO;AACLA,MAAAA,IAAI,GAAGI,SAAS,CAACC,SAAS,CAACL,IAAD,CAAV,EAAkB,CAAlB,CAAhB;AACD;;AACD,QAAIM,MAAM,GAAGP,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoBA,KAAK,CAACO,MAAvC;;AACA,QAAI,CAACA,MAAD,IAAWN,IAAI,GAAG,CAAtB,EAAyB;AACvB,aAAO,EAAP;AACD;;AACD,QAAIO,KAAK,GAAG,CAAZ;AAAA,QACIC,QAAQ,GAAG,CADf;AAAA,QAEIC,MAAM,GAAGC,KAAK,CAACC,UAAU,CAACL,MAAM,GAAGN,IAAV,CAAX,CAFlB;;AAIA,WAAOO,KAAK,GAAGD,MAAf,EAAuB;AACrBG,MAAAA,MAAM,CAACD,QAAQ,EAAT,CAAN,GAAqBI,SAAS,CAACb,KAAD,EAAQQ,KAAR,EAAgBA,KAAK,IAAIP,IAAzB,CAA9B;AACD;;AACD,WAAOS,MAAP;AACD;;;;AA/CMG,MAAAA,S;;AACAV,MAAAA,c;;AACAG,MAAAA,S;;;AAEP;AACIM,MAAAA,U,GAAaE,IAAI,CAACC,I;AAClBV,MAAAA,S,GAAYS,IAAI,CAACE,G;;yBA2CNjB,K","sourcesContent":["import baseSlice from './_baseSlice.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\nfunction chunk(array, size, guard) {\n  if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n    size = 1;\n  } else {\n    size = nativeMax(toInteger(size), 0);\n  }\n  var length = array == null ? 0 : array.length;\n  if (!length || size < 1) {\n    return [];\n  }\n  var index = 0,\n      resIndex = 0,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[resIndex++] = baseSlice(array, index, (index += size));\n  }\n  return result;\n}\n\nexport default chunk;\n"]}