{"version":3,"sources":["file:///Users/feiwang/workSpace/AITown/cutepet/node_modules/lodash-es/xorWith.js"],"names":["arrayFilter","baseRest","baseXor","isArrayLikeObject","last","xorWith","arrays","comparator","undefined"],"mappings":";;;;;;AAAOA,MAAAA,W;;AACAC,MAAAA,Q;;AACAC,MAAAA,O;;AACAC,MAAAA,iB;;AACAC,MAAAA,I;;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,O,GAAUJ,QAAQ,CAAC,UAASK,MAAT,EAAiB;AACtC,YAAIC,UAAU,GAAGH,IAAI,CAACE,MAAD,CAArB;AACAC,QAAAA,UAAU,GAAG,OAAOA,UAAP,IAAqB,UAArB,GAAkCA,UAAlC,GAA+CC,SAA5D;AACA,eAAON,OAAO,CAACF,WAAW,CAACM,MAAD,EAASH,iBAAT,CAAZ,EAAyCK,SAAzC,EAAoDD,UAApD,CAAd;AACD,OAJqB,C;;yBAMPF,O","sourcesContent":["import arrayFilter from './_arrayFilter.js';\nimport baseRest from './_baseRest.js';\nimport baseXor from './_baseXor.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\nimport last from './last.js';\n\n/**\n * This method is like `_.xor` except that it accepts `comparator` which is\n * invoked to compare elements of `arrays`. The order of result values is\n * determined by the order they occur in the arrays. The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.xorWith(objects, others, _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n */\nvar xorWith = baseRest(function(arrays) {\n  var comparator = last(arrays);\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n});\n\nexport default xorWith;\n"]}