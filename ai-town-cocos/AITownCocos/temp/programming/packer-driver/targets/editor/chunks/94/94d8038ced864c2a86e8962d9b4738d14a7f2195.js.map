{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/toNumber.js"],"names":["toNumber","value","isSymbol","NAN","isObject","other","valueOf","baseTrim","isBinary","reIsBinary","test","reIsOctal","freeParseInt","slice","reIsBadHex","parseInt"],"mappings":";;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC5B,aAAOA,KAAP;AACD;;AACD,QAAIC,QAAQ,CAACD,KAAD,CAAZ,EAAqB;AACnB,aAAOE,GAAP;AACD;;AACD,QAAIC,QAAQ,CAACH,KAAD,CAAZ,EAAqB;AACnB,UAAII,KAAK,GAAG,OAAOJ,KAAK,CAACK,OAAb,IAAwB,UAAxB,GAAqCL,KAAK,CAACK,OAAN,EAArC,GAAuDL,KAAnE;AACAA,MAAAA,KAAK,GAAGG,QAAQ,CAACC,KAAD,CAAR,GAAmBA,KAAK,GAAG,EAA3B,GAAiCA,KAAzC;AACD;;AACD,QAAI,OAAOJ,KAAP,IAAgB,QAApB,EAA8B;AAC5B,aAAOA,KAAK,KAAK,CAAV,GAAcA,KAAd,GAAsB,CAACA,KAA9B;AACD;;AACDA,IAAAA,KAAK,GAAGM,QAAQ,CAACN,KAAD,CAAhB;AACA,QAAIO,QAAQ,GAAGC,UAAU,CAACC,IAAX,CAAgBT,KAAhB,CAAf;AACA,WAAQO,QAAQ,IAAIG,SAAS,CAACD,IAAV,CAAeT,KAAf,CAAb,GACHW,YAAY,CAACX,KAAK,CAACY,KAAN,CAAY,CAAZ,CAAD,EAAiBL,QAAQ,GAAG,CAAH,GAAO,CAAhC,CADT,GAEFM,UAAU,CAACJ,IAAX,CAAgBT,KAAhB,IAAyBE,GAAzB,GAA+B,CAACF,KAFrC;AAGD;;;;AA7DMM,MAAAA,Q;;AACAH,MAAAA,Q;;AACAF,MAAAA,Q;;;AAEP;AACIC,MAAAA,G,GAAM,IAAI,C;AAEd;;AACIW,MAAAA,U,GAAa,oB;AAEjB;;AACIL,MAAAA,U,GAAa,Y;AAEjB;;AACIE,MAAAA,S,GAAY,a;AAEhB;;AACIC,MAAAA,Y,GAAeG,Q;;yBA8CJf,Q","sourcesContent":["import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n"]}