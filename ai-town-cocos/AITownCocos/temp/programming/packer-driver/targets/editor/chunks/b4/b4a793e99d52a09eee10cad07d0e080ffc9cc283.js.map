{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/apis/streams.dynamodb-2012-08-10.min.json"],"names":["version","metadata","apiVersion","endpointPrefix","jsonVersion","protocol","serviceFullName","serviceId","signatureVersion","signingName","targetPrefix","uid","operations","DescribeStream","input","type","required","members","StreamArn","Limit","ExclusiveStartShardId","output","StreamDescription","StreamLabel","StreamStatus","StreamViewType","CreationRequestDateTime","TableName","KeySchema","member","AttributeName","KeyType","Shards","ShardId","SequenceNumberRange","StartingSequenceNumber","EndingSequenceNumber","ParentShardId","LastEvaluatedShardId","GetRecords","ShardIterator","Records","eventID","eventName","eventVersion","eventSource","awsRegion","dynamodb","ApproximateCreationDateTime","Keys","shape","NewImage","OldImage","SequenceNumber","SizeBytes","userIdentity","PrincipalId","Type","NextShardIterator","GetShardIterator","ShardIteratorType","ListStreams","ExclusiveStartStreamArn","Streams","LastEvaluatedStreamArn","shapes","Sr","key","value","St","S","N","B","SS","NS","BS","M","L","NULL","BOOL"],"mappings":"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","sourcesContent":["export default {\n  version: '2.0',\n  metadata: {\n    apiVersion: '2012-08-10',\n    endpointPrefix: 'streams.dynamodb',\n    jsonVersion: '1.0',\n    protocol: 'json',\n    serviceFullName: 'Amazon DynamoDB Streams',\n    serviceId: 'DynamoDB Streams',\n    signatureVersion: 'v4',\n    signingName: 'dynamodb',\n    targetPrefix: 'DynamoDBStreams_20120810',\n    uid: 'streams-dynamodb-2012-08-10'\n  },\n  operations: {\n    DescribeStream: {\n      input: {\n        type: 'structure',\n        required: [\n          'StreamArn'\n        ],\n        members: {\n          StreamArn: {},\n          Limit: {\n            type: 'integer'\n          },\n          ExclusiveStartShardId: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          StreamDescription: {\n            type: 'structure',\n            members: {\n              StreamArn: {},\n              StreamLabel: {},\n              StreamStatus: {},\n              StreamViewType: {},\n              CreationRequestDateTime: {\n                type: 'timestamp'\n              },\n              TableName: {},\n              KeySchema: {\n                type: 'list',\n                member: {\n                  type: 'structure',\n                  required: [\n                    'AttributeName',\n                    'KeyType'\n                  ],\n                  members: {\n                    AttributeName: {},\n                    KeyType: {}\n                  }\n                }\n              },\n              Shards: {\n                type: 'list',\n                member: {\n                  type: 'structure',\n                  members: {\n                    ShardId: {},\n                    SequenceNumberRange: {\n                      type: 'structure',\n                      members: {\n                        StartingSequenceNumber: {},\n                        EndingSequenceNumber: {}\n                      }\n                    },\n                    ParentShardId: {}\n                  }\n                }\n              },\n              LastEvaluatedShardId: {}\n            }\n          }\n        }\n      }\n    },\n    GetRecords: {\n      input: {\n        type: 'structure',\n        required: [\n          'ShardIterator'\n        ],\n        members: {\n          ShardIterator: {},\n          Limit: {\n            type: 'integer'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          Records: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              members: {\n                eventID: {},\n                eventName: {},\n                eventVersion: {},\n                eventSource: {},\n                awsRegion: {},\n                dynamodb: {\n                  type: 'structure',\n                  members: {\n                    ApproximateCreationDateTime: {\n                      type: 'timestamp'\n                    },\n                    Keys: {\n                      shape: 'Sr'\n                    },\n                    NewImage: {\n                      shape: 'Sr'\n                    },\n                    OldImage: {\n                      shape: 'Sr'\n                    },\n                    SequenceNumber: {},\n                    SizeBytes: {\n                      type: 'long'\n                    },\n                    StreamViewType: {}\n                  }\n                },\n                userIdentity: {\n                  type: 'structure',\n                  members: {\n                    PrincipalId: {},\n                    Type: {}\n                  }\n                }\n              }\n            }\n          },\n          NextShardIterator: {}\n        }\n      }\n    },\n    GetShardIterator: {\n      input: {\n        type: 'structure',\n        required: [\n          'StreamArn',\n          'ShardId',\n          'ShardIteratorType'\n        ],\n        members: {\n          StreamArn: {},\n          ShardId: {},\n          ShardIteratorType: {},\n          SequenceNumber: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          ShardIterator: {}\n        }\n      }\n    },\n    ListStreams: {\n      input: {\n        type: 'structure',\n        members: {\n          TableName: {},\n          Limit: {\n            type: 'integer'\n          },\n          ExclusiveStartStreamArn: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          Streams: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              members: {\n                StreamArn: {},\n                TableName: {},\n                StreamLabel: {}\n              }\n            }\n          },\n          LastEvaluatedStreamArn: {}\n        }\n      }\n    }\n  },\n  shapes: {\n    Sr: {\n      type: 'map',\n      key: {},\n      value: {\n        shape: 'St'\n      }\n    },\n    St: {\n      type: 'structure',\n      members: {\n        S: {},\n        N: {},\n        B: {\n          type: 'blob'\n        },\n        SS: {\n          type: 'list',\n          member: {}\n        },\n        NS: {\n          type: 'list',\n          member: {}\n        },\n        BS: {\n          type: 'list',\n          member: {\n            type: 'blob'\n          }\n        },\n        M: {\n          type: 'map',\n          key: {},\n          value: {\n            shape: 'St'\n          }\n        },\n        L: {\n          type: 'list',\n          member: {\n            shape: 'St'\n          }\n        },\n        NULL: {\n          type: 'boolean'\n        },\n        BOOL: {\n          type: 'boolean'\n        }\n      }\n    }\n  }\n}"]}