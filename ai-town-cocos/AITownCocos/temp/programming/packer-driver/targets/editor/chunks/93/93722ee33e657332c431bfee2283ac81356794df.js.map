{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/lodash-es/_equalArrays.js"],"names":["equalArrays","array","other","bitmask","customizer","equalFunc","stack","isPartial","COMPARE_PARTIAL_FLAG","arrLength","length","othLength","arrStacked","get","othStacked","index","result","seen","COMPARE_UNORDERED_FLAG","SetCache","undefined","set","arrValue","othValue","compared","arraySome","othIndex","cacheHas","push"],"mappings":"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","sourcesContent":["import SetCache from './_SetCache.js';\nimport arraySome from './_arraySome.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalArrays;\n"]}