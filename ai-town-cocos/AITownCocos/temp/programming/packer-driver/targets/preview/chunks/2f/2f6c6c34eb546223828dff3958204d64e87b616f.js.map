{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/_basePullAll.js"],"names":["basePullAll","array","values","iteratee","comparator","indexOf","baseIndexOfWith","baseIndexOf","index","length","seen","copyArray","arrayMap","baseUnary","fromIndex","value","computed","splice","call","arrayProto","Array","prototype"],"mappings":";;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoCC,QAApC,EAA8CC,UAA9C,EAA0D;AACxD,QAAIC,OAAO,GAAGD,UAAU,GAAGE,eAAH,GAAqBC,WAA7C;AAAA,QACIC,KAAK,GAAG,CAAC,CADb;AAAA,QAEIC,MAAM,GAAGP,MAAM,CAACO,MAFpB;AAAA,QAGIC,IAAI,GAAGT,KAHX;;AAKA,QAAIA,KAAK,KAAKC,MAAd,EAAsB;AACpBA,MAAAA,MAAM,GAAGS,SAAS,CAACT,MAAD,CAAlB;AACD;;AACD,QAAIC,QAAJ,EAAc;AACZO,MAAAA,IAAI,GAAGE,QAAQ,CAACX,KAAD,EAAQY,SAAS,CAACV,QAAD,CAAjB,CAAf;AACD;;AACD,WAAO,EAAEK,KAAF,GAAUC,MAAjB,EAAyB;AACvB,UAAIK,SAAS,GAAG,CAAhB;AAAA,UACIC,KAAK,GAAGb,MAAM,CAACM,KAAD,CADlB;AAAA,UAEIQ,QAAQ,GAAGb,QAAQ,GAAGA,QAAQ,CAACY,KAAD,CAAX,GAAqBA,KAF5C;;AAIA,aAAO,CAACD,SAAS,GAAGT,OAAO,CAACK,IAAD,EAAOM,QAAP,EAAiBF,SAAjB,EAA4BV,UAA5B,CAApB,IAA+D,CAAC,CAAvE,EAA0E;AACxE,YAAIM,IAAI,KAAKT,KAAb,EAAoB;AAClBgB,UAAAA,MAAM,CAACC,IAAP,CAAYR,IAAZ,EAAkBI,SAAlB,EAA6B,CAA7B;AACD;;AACDG,QAAAA,MAAM,CAACC,IAAP,CAAYjB,KAAZ,EAAmBa,SAAnB,EAA8B,CAA9B;AACD;AACF;;AACD,WAAOb,KAAP;AACD;;;;AAhDMW,MAAAA,Q;;AACAL,MAAAA,W;;AACAD,MAAAA,e;;AACAO,MAAAA,S;;AACAF,MAAAA,S;;;AAEP;AACIQ,MAAAA,U,GAAaC,KAAK,CAACC,S;AAEvB;;AACIJ,MAAAA,M,GAASE,UAAU,CAACF,M;;yBAwCTjB,W","sourcesContent":["import arrayMap from './_arrayMap.js';\nimport baseIndexOf from './_baseIndexOf.js';\nimport baseIndexOfWith from './_baseIndexOfWith.js';\nimport baseUnary from './_baseUnary.js';\nimport copyArray from './_copyArray.js';\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * The base implementation of `_.pullAllBy` without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns `array`.\n */\nfunction basePullAll(array, values, iteratee, comparator) {\n  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n      index = -1,\n      length = values.length,\n      seen = array;\n\n  if (array === values) {\n    values = copyArray(values);\n  }\n  if (iteratee) {\n    seen = arrayMap(array, baseUnary(iteratee));\n  }\n  while (++index < length) {\n    var fromIndex = 0,\n        value = values[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n      if (seen !== array) {\n        splice.call(seen, fromIndex, 1);\n      }\n      splice.call(array, fromIndex, 1);\n    }\n  }\n  return array;\n}\n\nexport default basePullAll;\n"]}