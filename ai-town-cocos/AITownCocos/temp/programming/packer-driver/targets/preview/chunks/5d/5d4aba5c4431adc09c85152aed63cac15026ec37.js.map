{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/_composeArgsRight.js"],"names":["composeArgsRight","args","partials","holders","isCurried","argsIndex","argsLength","length","holdersIndex","holdersLength","rightIndex","rightLength","rangeLength","nativeMax","result","Array","isUncurried","offset","Math","max"],"mappings":";;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,gBAAT,CAA0BC,IAA1B,EAAgCC,QAAhC,EAA0CC,OAA1C,EAAmDC,SAAnD,EAA8D;AAC5D,QAAIC,SAAS,GAAG,CAAC,CAAjB;AAAA,QACIC,UAAU,GAAGL,IAAI,CAACM,MADtB;AAAA,QAEIC,YAAY,GAAG,CAAC,CAFpB;AAAA,QAGIC,aAAa,GAAGN,OAAO,CAACI,MAH5B;AAAA,QAIIG,UAAU,GAAG,CAAC,CAJlB;AAAA,QAKIC,WAAW,GAAGT,QAAQ,CAACK,MAL3B;AAAA,QAMIK,WAAW,GAAGC,SAAS,CAACP,UAAU,GAAGG,aAAd,EAA6B,CAA7B,CAN3B;AAAA,QAOIK,MAAM,GAAGC,KAAK,CAACH,WAAW,GAAGD,WAAf,CAPlB;AAAA,QAQIK,WAAW,GAAG,CAACZ,SARnB;;AAUA,WAAO,EAAEC,SAAF,GAAcO,WAArB,EAAkC;AAChCE,MAAAA,MAAM,CAACT,SAAD,CAAN,GAAoBJ,IAAI,CAACI,SAAD,CAAxB;AACD;;AACD,QAAIY,MAAM,GAAGZ,SAAb;;AACA,WAAO,EAAEK,UAAF,GAAeC,WAAtB,EAAmC;AACjCG,MAAAA,MAAM,CAACG,MAAM,GAAGP,UAAV,CAAN,GAA8BR,QAAQ,CAACQ,UAAD,CAAtC;AACD;;AACD,WAAO,EAAEF,YAAF,GAAiBC,aAAxB,EAAuC;AACrC,UAAIO,WAAW,IAAIX,SAAS,GAAGC,UAA/B,EAA2C;AACzCQ,QAAAA,MAAM,CAACG,MAAM,GAAGd,OAAO,CAACK,YAAD,CAAjB,CAAN,GAAyCP,IAAI,CAACI,SAAS,EAAV,CAA7C;AACD;AACF;;AACD,WAAOS,MAAP;AACD;;;;;AAtCD;AACID,MAAAA,S,GAAYK,IAAI,CAACC,G;;yBAuCNnB,gB","sourcesContent":["/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This function is like `composeArgs` except that the arguments composition\n * is tailored for `_.partialRight`.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to append to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgsRight(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersIndex = -1,\n      holdersLength = holders.length,\n      rightIndex = -1,\n      rightLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(rangeLength + rightLength),\n      isUncurried = !isCurried;\n\n  while (++argsIndex < rangeLength) {\n    result[argsIndex] = args[argsIndex];\n  }\n  var offset = argsIndex;\n  while (++rightIndex < rightLength) {\n    result[offset + rightIndex] = partials[rightIndex];\n  }\n  while (++holdersIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[offset + holders[holdersIndex]] = args[argsIndex++];\n    }\n  }\n  return result;\n}\n\nexport default composeArgsRight;\n"]}