{"version":3,"sources":["file:///Users/feiwang/cutepet/assets/src/manager/WASManager.ts"],"names":["AWSManager","WorkCatModel","Log","s3","AWS","setConfig","window","config","update","region","credentials","Credentials","accessKeyId","secretAccessKey","S3","uploadTextureToS3","picbuf","bucketName","fileName","blob","Blob","type","uploadParams","Bucket","Key","Body","ACL","upload","err","data","log","content","encodedContent","btoa","shareUrl","encodeURIComponent","Location","open","shareDone","_instance"],"mappings":";;;iDAMOA,U;;;;;;;;;;;;;;;;AAJAC,MAAAA,Y;;AACAC,MAAAA,G;;;;;kFAHP;;;AAMOF,MAAAA,U,GAAN,MAAMA,UAAN,CAAiB;AAAA;AAClB;AADkB,eAEdG,EAFc;AAAA,eAGdC,GAHc;AAAA;;AAKPC,QAAAA,SAAS,GAAG;AACf,eAAKD,GAAL,GAAWE,MAAM,CAACF,GAAlB,CADe,CAEf;AACA;;AACA,eAAKA,GAAL,CAASG,MAAT,CAAgBC,MAAhB,CAAuB;AACnBC,YAAAA,MAAM,EAAE,gBADW;AACO;AAC1BC,YAAAA,WAAW,EAAE,IAAI,KAAKN,GAAL,CAASO,WAAb,CAAyB;AAClCC,cAAAA,WAAW,EAAE,sBADqB;AACG;AACrCC,cAAAA,eAAe,EAAE,0CAFiB,CAE0B;;AAF1B,aAAzB;AAFM,WAAvB;AAOA,eAAKV,EAAL,GAAU,IAAI,KAAKC,GAAL,CAASU,EAAb,EAAV;AAEH,SAlBa,CAmBlB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACWC,QAAAA,iBAAiB,CAACC,MAAD,EAASC,UAAT,EAA6BC,QAA7B,EAA+C;AACnE;AACA;AACA,cAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACJ,MAAD,CAAT,EAAmB;AAAEK,YAAAA,IAAI,EAAE;AAAR,WAAnB,CAAb,CAHmE,CAInE;;AACA,cAAMC,YAAY,GAAG;AACjBC,YAAAA,MAAM,EAAEN,UADS;AAEjBO,YAAAA,GAAG,EAAEN,QAFY;AAGjBO,YAAAA,IAAI,EAAET,MAHW;AAIjBU,YAAAA,GAAG,EAAE,aAJY,CAIG;AACpB;;AALiB,WAArB,CALmE,CAanE;;AACA,eAAKvB,EAAL,CAAQwB,MAAR,CAAeL,YAAf,EAA6B,CAACM,GAAD,EAAMC,IAAN,KAAe;AACxC,gBAAID,GAAJ,EAAS;AACL;AAAA;AAAA,8BAAIE,GAAJ,CAAQ,wBAAR,EAAkCF,GAAlC;AACH,aAFD,MAEO;AACH;AAAA;AAAA,8BAAIE,GAAJ,CAAQ,mCAAmCb,UAAnC,GAAgD,GAAhD,GAAsDC,QAA9D,EADG,CAEH;;AACA,kBAAMa,OAAO,yCAAb;AACA,kBAAMC,cAAc,GAAGC,IAAI,CAACF,OAAD,CAA3B,CAJG,CAImC;;AACtC,kBAAMG,QAAQ,0CAAwCC,kBAAkB,CAACN,IAAI,CAACO,QAAN,CAA1D,mGAAwJD,kBAAkB,CAACJ,OAAD,CAAxL;AAEAzB,cAAAA,MAAM,CAAC+B,IAAP,CAAYH,QAAZ,EAAsB,QAAtB;AACA;AAAA;AAAA,gDAAaI,SAAb,GAAyB,IAAzB;AACH;AACJ,WAbD;AAcH;;AAxDa,O;AAAXtC,MAAAA,U,CAIIuC,S;;yBAwDI,IAAIvC,UAAJ,E","sourcesContent":["// import * as AWS from '../../../node_modules/aws-sdk/dist/aws-sdk.min.js'\n\nimport WorkCatModel from \"../model/WorkCatModel\";\nimport Log from '../../../assets/src/utils/LogUtils'\n\n\n class AWSManager {\n//     // 创建一个 S3 实例\n    s3;\n    AWS;\n    static _instance: any;\n    public setConfig() {\n        this.AWS = window.AWS\n        // 配置 AWS 的区域和凭证\n        // 这些值应该从环境变量或你的配置管理系统中获取\n        this.AWS.config.update({\n            region: 'ap-southeast-1', // 替换为你的 S3 存储桶区域\n            credentials: new this.AWS.Credentials({\n                accessKeyId: 'AKIA5FTZD3LOHMBXBUEU', // 替换为你的 Access Key ID\n                secretAccessKey: '8Ggq1a899n6s6MeMtugtpIR7DP2gkIU7vYmxN/z0' // 替换为你的 Secret Access Key\n            })\n        });\n        this.s3 = new this.AWS.S3();\n\n    }\n//     // static get instance() {\n//     //     if (this._instance) {\n//     //         return this._instance;\n//     //     }\n\n//     //     this._instance = new AWSManager();\n//     //     return this._instance;\n//     // }\n//     // 假设你有一个 cc.Texture2D 对象，你想要上传它的图片数据\n    public uploadTextureToS3(picbuf, bucketName: string, fileName: string) {\n        // 获取图片数据 ArrayBuffer\n        // const data = texture.getImage().data;\n        const blob = new Blob([picbuf], { type: 'image/jpeg' });\n        // 创建一个上传参数对象\n        const uploadParams = {\n            Bucket: bucketName,\n            Key: fileName,\n            Body: picbuf,\n            ACL: 'public-read', // 如果你想要图片公开访问的话,\n            //ContentType: 'image/jpeg',\n        };\n\n        // 调用 S3 的上传函数\n        this.s3.upload(uploadParams, (err, data) => {\n            if (err) {\n                Log.log(\"Error uploading data: \", err);\n            } else {\n                Log.log(\"Successfully uploaded data to \" + bucketName + \"/\" + fileName);\n                //window.open('https://telegram.me/share/url?url=' + encodeURIComponent(data.Location) + encodeURIComponent('https://www.infinitytest.cc/waitlist'), '_blank')\n                const content = `https://www.infinitytest.cc/waitlist`;\n                const encodedContent = btoa(content); // 使用Base64编码内容\n                const shareUrl = `https://telegram.me/share/url?url=${encodeURIComponent(data.Location)}'&text=🐱✨ Join the Cat Academia waitlist now to win over $2000 in rewards: ${encodeURIComponent(content)}`;\n\n                window.open(shareUrl, '_blank');\n                WorkCatModel.shareDone = true\n            }\n        });\n    }\n\n}\n\nexport default new AWSManager()"]}