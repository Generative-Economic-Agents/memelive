{"version":3,"sources":["file:///Users/feiwang/cutepet/assets/cases/network/NetworkCtrl.ts"],"names":["_decorator","director","ReconnectingWebSocket","network","observer","socket","EventType","showMsg2","Log","GlobalConfig","ccclass","property","TAG","NetworkCtrl","constructor","_reconnectCount","_wsiSendBinary","_sioClient","tag","_url","heartbeatInterval","heartbeatTimer","currentURL","window","location","href","indexOf","instance","testTools","log","prepareWebSocket","startHeartbeat","setInterval","sendWebSocketBinary","onDestroy","wsiSendBinary","onopen","onmessage","onerror","onclose","close","self","websocketLabel","respLabel","url","maxReconnectionDelay","minReconnectionDelay","Math","random","reconnectionDelayGrowFactor","minUptime","connectionTimeout","maxRetries","Infinity","maxEnqueuedMessages","startClosed","debug","retryCount","_wsiSend","binaryType","evt","getScene","name","json","LoginRequest","requestId","type","command","data","avatar","clientOs","loginType","playername","nickName","userId","password","timeZone","post","SOCKET_ONOPEN","hasInitGame","reconnect","binaryStr","c","JSON","parse","code","message","SOCKET_ONMESSAGE","req","readyState","WebSocket","OPEN","Date","now","floor","buf","stringify","arrData","Uint16Array","length","i","charCodeAt","send","warningStr"],"mappings":"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","sourcesContent":["import { _decorator, Component, Label, Asset, assert, loader, sys, assetManager, director } from 'cc';\nconst { ccclass, property } = _decorator;\nimport { Player, encodePlayer } from '../../src/proto';\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport { network } from '../../src/model/RequestData';\nimport { modelMgr, observer, socket } from '../../src/game/App';\nimport { EventType } from '../../src/EventType';\nimport { showMsg2 } from '../../src/core/message/MessageManager';\nimport Log from '../../../assets/src/utils/LogUtils'\nimport { GlobalConfig } from '../../src/game/config/GlobalConfig';\nimport AxiosManager from '../../src/manager/AxiosManager';\n// imported from socket-io.js\ndeclare var io: any;\nconst TAG = 'NetworkCtrl'\n@ccclass('NetworkCtrl')\nexport class NetworkCtrl {\n\n\n    private _reconnectCount = 0;\n\n    private _wsiSendBinary: ReconnectingWebSocket | null = null;\n    private _sioClient: any = null;\n\n    private tag: string = '';\n    private _url: string = \"\";\n\n    private heartbeatInterval: number = 60000;\n    private heartbeatTimer: any;\n\n    // use this for initialization\n    constructor() {\n        const currentURL = window.location.href;\n        if (currentURL.indexOf(\"localhost\") != -1||currentURL.indexOf(\"192.168\") != -1) {\n            this._url = \"ws://192.168.254.88:8989\";//本地\n            //this._url = \"wss://13.214.33.171:8989\"; //windows\n            //this._url = \"wss://www.infinitytest.cc:8989\"\n            //this._url = \"ws://44.200.143.84:8989\"; //linux\n\n            //this._url = \"wss://cat.infinityg.ai/api/ws\"\n            GlobalConfig.instance.testTools = true\n            \n        } else {\n            //this._url = \"wss://www.infinitytest.cc:8989\"\n            this._url = \"wss://cat.infinityg.ai/api/ws\"\n            //this._url = \"wss://cat.infinitytest.cc/api/ws\"\n            GlobalConfig.instance.testTools = false\n        }\n        this._wsiSendBinary = null;\n        Log.log(TAG, \"socket waiting...\")\n\n        this.prepareWebSocket();\n        this.startHeartbeat()\n    }\n\n    private startHeartbeat(): void {\n        // if (this.heartbeatTimer) {\n        //   clearInterval(this.heartbeatTimer);\n        // }\n    \n        this.heartbeatTimer = setInterval(() => {\n          Log.log(TAG, 'send heart pin')\n          this.sendWebSocketBinary({\n            \"requestId\": 111110,\n            \"command\": 99996,\n            \"msg\":\"1\"\n          }); // 假设服务器用 'pong' 响应心跳\n        }, this.heartbeatInterval);\n      }\n\n    onDestroy() {\n        let wsiSendBinary = this._wsiSendBinary;\n        if (wsiSendBinary) {\n            wsiSendBinary.onopen = null;\n            wsiSendBinary.onmessage = null;\n            wsiSendBinary.onerror = null;\n            wsiSendBinary.onclose = null;\n            wsiSendBinary.close();\n        }\n\n    }\n\n\n\n    prepareWebSocket() {\n        const self = this;\n        let websocketLabel = \"\";\n        let respLabel = \"\";\n        let url = this._url;\n        // if (assetManager.cacheManager) {\n        //     url = assetManager.cacheManager.getCache(url) || assetManager.cacheManager.getTemp(url) || url;\n        // }\n        // We should pass the cacert to libwebsockets used in native platform, otherwise the wss connection would be closed.\n        // @ts-ignore\n        this._wsiSendBinary = new ReconnectingWebSocket(url, [], {\n            maxReconnectionDelay: 10000,\n            minReconnectionDelay: 1000 + Math.random() * 4000,\n            reconnectionDelayGrowFactor: 1.3,\n            minUptime: 5000,\n            connectionTimeout: 4000,\n            maxRetries: Infinity,\n            maxEnqueuedMessages: Infinity,\n            startClosed: false,\n            debug: false,\n        });\n        this._wsiSendBinary.retryCount\n        let _wsiSend = this._wsiSendBinary\n\n        // this._wsiSendBinary = new WebSocket('wss://echo.websocket.events', [], url);\n        this._wsiSendBinary.binaryType = 'arraybuffer';\n        this._wsiSendBinary.onopen = function (evt) {\n            respLabel = 'Opened!';\n            websocketLabel = 'WebSocket: onopen'\n            Log.log(TAG, websocketLabel)\n            if(director.getScene().name === 'mainView'){\n                let json = new network.LoginRequest();\n                json.requestId = 0;\n                json.type = 1;\n                json.command = 10000;\n                json.data.avatar = \"\";\n                json.data.clientOs = \"\";\n                json.data.loginType = 1;\n                json.data.name = GlobalConfig.instance.playername;\n                json.data.nickName = GlobalConfig.instance.nickName;\n                json.data.userId = GlobalConfig.instance.userId;\n                json.data.password = \"123\";\n                json.data.timeZone = 0;\n                socket.sendWebSocketBinary(json);\n                //AxiosManager.init();\n            } \n            observer.post(EventType.SOCKET_ONOPEN);\n            GlobalConfig.instance.hasInitGame = true\n        };\n\n        this._wsiSendBinary.onmessage = this.onmessage;\n\n        this._wsiSendBinary.onerror = function (evt) {\n            if(this._wsiSendBinary){\n                this._wsiSendBinary.reconnect()\n            }\n\n            websocketLabel = 'WebSocket: onerror'\n            respLabel = 'Error!';\n        };\n\n        this._wsiSendBinary.onclose = function (evt) {\n            // _wsiSend = this._wsiSendBinary = new ReconnectingWebSocket(url, [], {\n            //     maxReconnectionDelay: 10000,\n            //     minReconnectionDelay: 1000 + Math.random() * 4000,\n            //     reconnectionDelayGrowFactor: 1.3,\n            //     minUptime: 5000,\n            //     connectionTimeout: 4000,\n            //     maxRetries: Infinity,\n            //     maxEnqueuedMessages: Infinity,\n            //     startClosed: false,\n            //     debug: false,\n            // });\n            // _wsiSend.onmessage =this.onmessage;\n\n            // websocketLabel = 'WebSocket: onclose'\n            // // After close, it's no longer possible to use it again,\n            // // if you want to send another request, you need to create a new websocket instance\n            // //self._wsiSendBinary = null;\n            // respLabel = 'Close!';\n            \n\n            //this._wsiSendBinary.reconnect()\n        };\n\n    }\n    /**\n     * 消息响应\n     * @param evt \n     */\n    private onmessage(evt) {\n        // const binary = new Uint8Array(evt.data);\n        let binaryStr = 'response bin msg: ';\n\n        // let str = '0x';\n        // const hexMap = '0123456789ABCDEF'.split('');\n        // assert(hexMap.length == 16);\n\n\n        // for (let i = 0; i < binary.length; i++) {\n        //     str += hexMap[binary[i] >> 4];\n        //     str += hexMap[binary[i] & 0x0F];\n        // }\n        var c: any = evt.data;\n        binaryStr += c;\n        Log.log(TAG, binaryStr)\n        // c = c.replace(/\\\\/g, \"\");\n        c = JSON.parse(c);\n        if(c){\n            if(c.code == 10019){\n                showMsg2(c.message);\n            }else if (c.code == 99998) {\n\n            }\n        }\n        observer.post(EventType.SOCKET_ONMESSAGE, c);\n    };\n    /**\n     * 发送消息\n     * @returns \n     */\n    sendWebSocketBinary(req: Object) {\n        let websocketLabel = \"\";\n        if (!this._wsiSendBinary) { return; }\n        if (this._wsiSendBinary.readyState === WebSocket.OPEN) {\n            websocketLabel = 'WebSocket: sendbinary';\n            req[\"requestId\"] = Date.now() + Math.floor(Math.random() * 100);\n\n            let buf = JSON.stringify(req);\n            Log.log(TAG, 'websocket::', buf)\n            //--------\n            let arrData = new Uint16Array(buf.length);\n            for (let i = 0; i < buf.length; i++) {\n                arrData[i] = buf.charCodeAt(i);\n            }\n\n            // this._wsiSendBinary.send(arrData.buffer);\n            //------------\n            // let p: Player = { name: \"hello\", score: 10 };\n            // this._wsiSendBinary.send(encodePlayer(p));\n            this._wsiSendBinary.send(buf);\n        }\n        else {\n            let warningStr = 'send binary websocket instance wasn\\'t ready...';\n            websocketLabel = 'WebSocket: not ready';\n            Log.log(TAG, websocketLabel)\n            // this.scheduleOnce(() => {\n            //     this.sendWebSocketBinary();\n            // }, 1);\n        }\n    }\n\n}\n"]}