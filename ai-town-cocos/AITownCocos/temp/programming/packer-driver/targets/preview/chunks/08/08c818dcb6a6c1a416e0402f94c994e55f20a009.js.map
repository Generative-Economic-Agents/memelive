{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/lodash-es/invokeMap.js"],"names":["apply","baseEach","baseInvoke","baseRest","isArrayLike","invokeMap","collection","path","args","index","isFunc","result","Array","length","value"],"mappings":";;;;;;AAAOA,MAAAA,K;;AACAC,MAAAA,Q;;AACAC,MAAAA,U;;AACAC,MAAAA,Q;;AACAC,MAAAA,W;;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,S,GAAYF,QAAQ,CAAC,UAASG,UAAT,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AACxD,YAAIC,KAAK,GAAG,CAAC,CAAb;AAAA,YACIC,MAAM,GAAG,OAAOH,IAAP,IAAe,UAD5B;AAAA,YAEII,MAAM,GAAGP,WAAW,CAACE,UAAD,CAAX,GAA0BM,KAAK,CAACN,UAAU,CAACO,MAAZ,CAA/B,GAAqD,EAFlE;AAIAZ,QAAAA,QAAQ,CAACK,UAAD,EAAa,UAASQ,KAAT,EAAgB;AACnCH,UAAAA,MAAM,CAAC,EAAEF,KAAH,CAAN,GAAkBC,MAAM,GAAGV,KAAK,CAACO,IAAD,EAAOO,KAAP,EAAcN,IAAd,CAAR,GAA8BN,UAAU,CAACY,KAAD,EAAQP,IAAR,EAAcC,IAAd,CAAhE;AACD,SAFO,CAAR;AAGA,eAAOG,MAAP;AACD,OATuB,C;;yBAWTN,S","sourcesContent":["import apply from './_apply.js';\nimport baseEach from './_baseEach.js';\nimport baseInvoke from './_baseInvoke.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Invokes the method at `path` of each element in `collection`, returning\n * an array of the results of each invoked method. Any additional arguments\n * are provided to each invoked method. If `path` is a function, it's invoked\n * for, and `this` bound to, each element in `collection`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array|Function|string} path The path of the method to invoke or\n *  the function invoked per iteration.\n * @param {...*} [args] The arguments to invoke each method with.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n * // => [[1, 5, 7], [1, 2, 3]]\n *\n * _.invokeMap([123, 456], String.prototype.split, '');\n * // => [['1', '2', '3'], ['4', '5', '6']]\n */\nvar invokeMap = baseRest(function(collection, path, args) {\n  var index = -1,\n      isFunc = typeof path == 'function',\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value) {\n    result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n  });\n  return result;\n});\n\nexport default invokeMap;\n"]}