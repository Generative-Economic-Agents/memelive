{"version":3,"sources":["file:///Users/feiwang/workSpace/AITown/cutepet/node_modules/lodash-es/_baseSortedIndex.js"],"names":["baseSortedIndex","array","value","retHighest","low","high","length","HALF_MAX_ARRAY_LENGTH","mid","computed","isSymbol","baseSortedIndexBy","identity","MAX_ARRAY_LENGTH"],"mappings":";;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,eAAT,CAAyBC,KAAzB,EAAgCC,KAAhC,EAAuCC,UAAvC,EAAmD;AACjD,QAAIC,GAAG,GAAG,CAAV;AAAA,QACIC,IAAI,GAAGJ,KAAK,IAAI,IAAT,GAAgBG,GAAhB,GAAsBH,KAAK,CAACK,MADvC;;AAGA,QAAI,OAAOJ,KAAP,IAAgB,QAAhB,IAA4BA,KAAK,KAAKA,KAAtC,IAA+CG,IAAI,IAAIE,qBAA3D,EAAkF;AAChF,aAAOH,GAAG,GAAGC,IAAb,EAAmB;AACjB,YAAIG,GAAG,GAAIJ,GAAG,GAAGC,IAAP,KAAiB,CAA3B;AAAA,YACII,QAAQ,GAAGR,KAAK,CAACO,GAAD,CADpB;;AAGA,YAAIC,QAAQ,KAAK,IAAb,IAAqB,CAACC,QAAQ,CAACD,QAAD,CAA9B,KACCN,UAAU,GAAIM,QAAQ,IAAIP,KAAhB,GAA0BO,QAAQ,GAAGP,KADhD,CAAJ,EAC6D;AAC3DE,UAAAA,GAAG,GAAGI,GAAG,GAAG,CAAZ;AACD,SAHD,MAGO;AACLH,UAAAA,IAAI,GAAGG,GAAP;AACD;AACF;;AACD,aAAOH,IAAP;AACD;;AACD,WAAOM,iBAAiB,CAACV,KAAD,EAAQC,KAAR,EAAeU,QAAf,EAAyBT,UAAzB,CAAxB;AACD;;;;AAvCMQ,MAAAA,iB;;AACAC,MAAAA,Q;;AACAF,MAAAA,Q;;;AAEP;AACIG,MAAAA,gB,GAAmB,U;AACnBN,MAAAA,qB,GAAwBM,gBAAgB,KAAK,C;;yBAmClCb,e","sourcesContent":["import baseSortedIndexBy from './_baseSortedIndexBy.js';\nimport identity from './identity.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n/**\n * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n * performs a binary search of `array` to determine the index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction baseSortedIndex(array, value, retHighest) {\n  var low = 0,\n      high = array == null ? low : array.length;\n\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n    while (low < high) {\n      var mid = (low + high) >>> 1,\n          computed = array[mid];\n\n      if (computed !== null && !isSymbol(computed) &&\n          (retHighest ? (computed <= value) : (computed < value))) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return high;\n  }\n  return baseSortedIndexBy(array, value, identity, retHighest);\n}\n\nexport default baseSortedIndex;\n"]}