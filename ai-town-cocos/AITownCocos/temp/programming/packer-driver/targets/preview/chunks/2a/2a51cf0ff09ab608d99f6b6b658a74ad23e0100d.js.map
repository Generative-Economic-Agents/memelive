{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/punycode/punycode.js"],"names":["_cjsLoader","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","root","freeExports","nodeType","freeModule","freeGlobal","global","window","self","punycode","maxInt","base","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexPunycode","regexNonASCII","regexSeparators","errors","baseMinusTMin","floor","Math","stringFromCharCode","String","fromCharCode","key","error","type","RangeError","map","array","fn","length","result","mapDomain","string","parts","split","replace","labels","encoded","join","ucs2decode","output","counter","value","extra","charCodeAt","push","ucs2encode","basicToDigit","codePoint","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","decode","input","inputLength","out","i","n","bias","basic","j","index","oldi","w","t","baseMinusT","lastIndexOf","splice","encode","handledCPCount","basicLength","m","q","currentValue","handledCPCountPlusOne","qMinusT","toUnicode","test","slice","toLowerCase","toASCII","amd","hasOwnProperty","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n /*! https://mths.be/punycode v1.3.2 by @mathias */\n ;(function(root) {\n\n \t/** Detect free variables */\n \tvar freeExports = typeof exports == 'object' && exports &&\n \t\t!exports.nodeType && exports;\n \tvar freeModule = typeof module == 'object' && module &&\n \t\t!module.nodeType && module;\n \tvar freeGlobal = typeof global == 'object' && global;\n \tif (\n \t\tfreeGlobal.global === freeGlobal ||\n \t\tfreeGlobal.window === freeGlobal ||\n \t\tfreeGlobal.self === freeGlobal\n \t) {\n \t\troot = freeGlobal;\n \t}\n\n \t/**\n \t * The `punycode` object.\n \t * @name punycode\n \t * @type Object\n \t */\n \tvar punycode,\n\n \t/** Highest positive signed 32-bit float value */\n \tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n \t/** Bootstring parameters */\n \tbase = 36,\n \ttMin = 1,\n \ttMax = 26,\n \tskew = 38,\n \tdamp = 700,\n \tinitialBias = 72,\n \tinitialN = 128, // 0x80\n \tdelimiter = '-', // '\\x2D'\n\n \t/** Regular expressions */\n \tregexPunycode = /^xn--/,\n \tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n \tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n \t/** Error messages */\n \terrors = {\n \t\t'overflow': 'Overflow: input needs wider integers to process',\n \t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n \t\t'invalid-input': 'Invalid input'\n \t},\n\n \t/** Convenience shortcuts */\n \tbaseMinusTMin = base - tMin,\n \tfloor = Math.floor,\n \tstringFromCharCode = String.fromCharCode,\n\n \t/** Temporary variable */\n \tkey;\n\n \t/*--------------------------------------------------------------------------*/\n\n \t/**\n \t * A generic error utility function.\n \t * @private\n \t * @param {String} type The error type.\n \t * @returns {Error} Throws a `RangeError` with the applicable error message.\n \t */\n \tfunction error(type) {\n \t\tthrow RangeError(errors[type]);\n \t}\n\n \t/**\n \t * A generic `Array#map` utility function.\n \t * @private\n \t * @param {Array} array The array to iterate over.\n \t * @param {Function} callback The function that gets called for every array\n \t * item.\n \t * @returns {Array} A new array of values returned by the callback function.\n \t */\n \tfunction map(array, fn) {\n \t\tvar length = array.length;\n \t\tvar result = [];\n \t\twhile (length--) {\n \t\t\tresult[length] = fn(array[length]);\n \t\t}\n \t\treturn result;\n \t}\n\n \t/**\n \t * A simple `Array#map`-like wrapper to work with domain name strings or email\n \t * addresses.\n \t * @private\n \t * @param {String} domain The domain name or email address.\n \t * @param {Function} callback The function that gets called for every\n \t * character.\n \t * @returns {Array} A new string of characters returned by the callback\n \t * function.\n \t */\n \tfunction mapDomain(string, fn) {\n \t\tvar parts = string.split('@');\n \t\tvar result = '';\n \t\tif (parts.length > 1) {\n \t\t\t// In email addresses, only the domain name should be punycoded. Leave\n \t\t\t// the local part (i.e. everything up to `@`) intact.\n \t\t\tresult = parts[0] + '@';\n \t\t\tstring = parts[1];\n \t\t}\n \t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n \t\tstring = string.replace(regexSeparators, '\\x2E');\n \t\tvar labels = string.split('.');\n \t\tvar encoded = map(labels, fn).join('.');\n \t\treturn result + encoded;\n \t}\n\n \t/**\n \t * Creates an array containing the numeric code points of each Unicode\n \t * character in the string. While JavaScript uses UCS-2 internally,\n \t * this function will convert a pair of surrogate halves (each of which\n \t * UCS-2 exposes as separate characters) into a single code point,\n \t * matching UTF-16.\n \t * @see `punycode.ucs2.encode`\n \t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n \t * @memberOf punycode.ucs2\n \t * @name decode\n \t * @param {String} string The Unicode input string (UCS-2).\n \t * @returns {Array} The new array of code points.\n \t */\n \tfunction ucs2decode(string) {\n \t\tvar output = [],\n \t\t    counter = 0,\n \t\t    length = string.length,\n \t\t    value,\n \t\t    extra;\n \t\twhile (counter < length) {\n \t\t\tvalue = string.charCodeAt(counter++);\n \t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n \t\t\t\t// high surrogate, and there is a next character\n \t\t\t\textra = string.charCodeAt(counter++);\n \t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n \t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n \t\t\t\t} else {\n \t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n \t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n \t\t\t\t\toutput.push(value);\n \t\t\t\t\tcounter--;\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\toutput.push(value);\n \t\t\t}\n \t\t}\n \t\treturn output;\n \t}\n\n \t/**\n \t * Creates a string based on an array of numeric code points.\n \t * @see `punycode.ucs2.decode`\n \t * @memberOf punycode.ucs2\n \t * @name encode\n \t * @param {Array} codePoints The array of numeric code points.\n \t * @returns {String} The new Unicode string (UCS-2).\n \t */\n \tfunction ucs2encode(array) {\n \t\treturn map(array, function(value) {\n \t\t\tvar output = '';\n \t\t\tif (value > 0xFFFF) {\n \t\t\t\tvalue -= 0x10000;\n \t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n \t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n \t\t\t}\n \t\t\toutput += stringFromCharCode(value);\n \t\t\treturn output;\n \t\t}).join('');\n \t}\n\n \t/**\n \t * Converts a basic code point into a digit/integer.\n \t * @see `digitToBasic()`\n \t * @private\n \t * @param {Number} codePoint The basic numeric code point value.\n \t * @returns {Number} The numeric value of a basic code point (for use in\n \t * representing integers) in the range `0` to `base - 1`, or `base` if\n \t * the code point does not represent a value.\n \t */\n \tfunction basicToDigit(codePoint) {\n \t\tif (codePoint - 48 < 10) {\n \t\t\treturn codePoint - 22;\n \t\t}\n \t\tif (codePoint - 65 < 26) {\n \t\t\treturn codePoint - 65;\n \t\t}\n \t\tif (codePoint - 97 < 26) {\n \t\t\treturn codePoint - 97;\n \t\t}\n \t\treturn base;\n \t}\n\n \t/**\n \t * Converts a digit/integer into a basic code point.\n \t * @see `basicToDigit()`\n \t * @private\n \t * @param {Number} digit The numeric value of a basic code point.\n \t * @returns {Number} The basic code point whose value (when used for\n \t * representing integers) is `digit`, which needs to be in the range\n \t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n \t * used; else, the lowercase form is used. The behavior is undefined\n \t * if `flag` is non-zero and `digit` has no uppercase form.\n \t */\n \tfunction digitToBasic(digit, flag) {\n \t\t//  0..25 map to ASCII a..z or A..Z\n \t\t// 26..35 map to ASCII 0..9\n \t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n \t}\n\n \t/**\n \t * Bias adaptation function as per section 3.4 of RFC 3492.\n \t * http://tools.ietf.org/html/rfc3492#section-3.4\n \t * @private\n \t */\n \tfunction adapt(delta, numPoints, firstTime) {\n \t\tvar k = 0;\n \t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n \t\tdelta += floor(delta / numPoints);\n \t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n \t\t\tdelta = floor(delta / baseMinusTMin);\n \t\t}\n \t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n \t}\n\n \t/**\n \t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n \t * symbols.\n \t * @memberOf punycode\n \t * @param {String} input The Punycode string of ASCII-only symbols.\n \t * @returns {String} The resulting string of Unicode symbols.\n \t */\n \tfunction decode(input) {\n \t\t// Don't use UCS-2\n \t\tvar output = [],\n \t\t    inputLength = input.length,\n \t\t    out,\n \t\t    i = 0,\n \t\t    n = initialN,\n \t\t    bias = initialBias,\n \t\t    basic,\n \t\t    j,\n \t\t    index,\n \t\t    oldi,\n \t\t    w,\n \t\t    k,\n \t\t    digit,\n \t\t    t,\n \t\t    /** Cached calculation results */\n \t\t    baseMinusT;\n\n \t\t// Handle the basic code points: let `basic` be the number of input code\n \t\t// points before the last delimiter, or `0` if there is none, then copy\n \t\t// the first basic code points to the output.\n\n \t\tbasic = input.lastIndexOf(delimiter);\n \t\tif (basic < 0) {\n \t\t\tbasic = 0;\n \t\t}\n\n \t\tfor (j = 0; j < basic; ++j) {\n \t\t\t// if it's not a basic code point\n \t\t\tif (input.charCodeAt(j) >= 0x80) {\n \t\t\t\terror('not-basic');\n \t\t\t}\n \t\t\toutput.push(input.charCodeAt(j));\n \t\t}\n\n \t\t// Main decoding loop: start just after the last delimiter if any basic code\n \t\t// points were copied; start at the beginning otherwise.\n\n \t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n \t\t\t// `index` is the index of the next character to be consumed.\n \t\t\t// Decode a generalized variable-length integer into `delta`,\n \t\t\t// which gets added to `i`. The overflow checking is easier\n \t\t\t// if we increase `i` as we go, then subtract off its starting\n \t\t\t// value at the end to obtain `delta`.\n \t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n \t\t\t\tif (index >= inputLength) {\n \t\t\t\t\terror('invalid-input');\n \t\t\t\t}\n\n \t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n \t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n \t\t\t\t\terror('overflow');\n \t\t\t\t}\n\n \t\t\t\ti += digit * w;\n \t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n \t\t\t\tif (digit < t) {\n \t\t\t\t\tbreak;\n \t\t\t\t}\n\n \t\t\t\tbaseMinusT = base - t;\n \t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n \t\t\t\t\terror('overflow');\n \t\t\t\t}\n\n \t\t\t\tw *= baseMinusT;\n\n \t\t\t}\n\n \t\t\tout = output.length + 1;\n \t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n \t\t\t// `i` was supposed to wrap around from `out` to `0`,\n \t\t\t// incrementing `n` each time, so we'll fix that now:\n \t\t\tif (floor(i / out) > maxInt - n) {\n \t\t\t\terror('overflow');\n \t\t\t}\n\n \t\t\tn += floor(i / out);\n \t\t\ti %= out;\n\n \t\t\t// Insert `n` at position `i` of the output\n \t\t\toutput.splice(i++, 0, n);\n\n \t\t}\n\n \t\treturn ucs2encode(output);\n \t}\n\n \t/**\n \t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n \t * Punycode string of ASCII-only symbols.\n \t * @memberOf punycode\n \t * @param {String} input The string of Unicode symbols.\n \t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n \t */\n \tfunction encode(input) {\n \t\tvar n,\n \t\t    delta,\n \t\t    handledCPCount,\n \t\t    basicLength,\n \t\t    bias,\n \t\t    j,\n \t\t    m,\n \t\t    q,\n \t\t    k,\n \t\t    t,\n \t\t    currentValue,\n \t\t    output = [],\n \t\t    /** `inputLength` will hold the number of code points in `input`. */\n \t\t    inputLength,\n \t\t    /** Cached calculation results */\n \t\t    handledCPCountPlusOne,\n \t\t    baseMinusT,\n \t\t    qMinusT;\n\n \t\t// Convert the input in UCS-2 to Unicode\n \t\tinput = ucs2decode(input);\n\n \t\t// Cache the length\n \t\tinputLength = input.length;\n\n \t\t// Initialize the state\n \t\tn = initialN;\n \t\tdelta = 0;\n \t\tbias = initialBias;\n\n \t\t// Handle the basic code points\n \t\tfor (j = 0; j < inputLength; ++j) {\n \t\t\tcurrentValue = input[j];\n \t\t\tif (currentValue < 0x80) {\n \t\t\t\toutput.push(stringFromCharCode(currentValue));\n \t\t\t}\n \t\t}\n\n \t\thandledCPCount = basicLength = output.length;\n\n \t\t// `handledCPCount` is the number of code points that have been handled;\n \t\t// `basicLength` is the number of basic code points.\n\n \t\t// Finish the basic string - if it is not empty - with a delimiter\n \t\tif (basicLength) {\n \t\t\toutput.push(delimiter);\n \t\t}\n\n \t\t// Main encoding loop:\n \t\twhile (handledCPCount < inputLength) {\n\n \t\t\t// All non-basic code points < n have been handled already. Find the next\n \t\t\t// larger one:\n \t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n \t\t\t\tcurrentValue = input[j];\n \t\t\t\tif (currentValue >= n && currentValue < m) {\n \t\t\t\t\tm = currentValue;\n \t\t\t\t}\n \t\t\t}\n\n \t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n \t\t\t// but guard against overflow\n \t\t\thandledCPCountPlusOne = handledCPCount + 1;\n \t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n \t\t\t\terror('overflow');\n \t\t\t}\n\n \t\t\tdelta += (m - n) * handledCPCountPlusOne;\n \t\t\tn = m;\n\n \t\t\tfor (j = 0; j < inputLength; ++j) {\n \t\t\t\tcurrentValue = input[j];\n\n \t\t\t\tif (currentValue < n && ++delta > maxInt) {\n \t\t\t\t\terror('overflow');\n \t\t\t\t}\n\n \t\t\t\tif (currentValue == n) {\n \t\t\t\t\t// Represent delta as a generalized variable-length integer\n \t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n \t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n \t\t\t\t\t\tif (q < t) {\n \t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\t}\n \t\t\t\t\t\tqMinusT = q - t;\n \t\t\t\t\t\tbaseMinusT = base - t;\n \t\t\t\t\t\toutput.push(\n \t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n \t\t\t\t\t\t);\n \t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n \t\t\t\t\t}\n\n \t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n \t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n \t\t\t\t\tdelta = 0;\n \t\t\t\t\t++handledCPCount;\n \t\t\t\t}\n \t\t\t}\n\n \t\t\t++delta;\n \t\t\t++n;\n\n \t\t}\n \t\treturn output.join('');\n \t}\n\n \t/**\n \t * Converts a Punycode string representing a domain name or an email address\n \t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n \t * it doesn't matter if you call it on a string that has already been\n \t * converted to Unicode.\n \t * @memberOf punycode\n \t * @param {String} input The Punycoded domain name or email address to\n \t * convert to Unicode.\n \t * @returns {String} The Unicode representation of the given Punycode\n \t * string.\n \t */\n \tfunction toUnicode(input) {\n \t\treturn mapDomain(input, function(string) {\n \t\t\treturn regexPunycode.test(string)\n \t\t\t\t? decode(string.slice(4).toLowerCase())\n \t\t\t\t: string;\n \t\t});\n \t}\n\n \t/**\n \t * Converts a Unicode string representing a domain name or an email address to\n \t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n \t * i.e. it doesn't matter if you call it with a domain that's already in\n \t * ASCII.\n \t * @memberOf punycode\n \t * @param {String} input The domain name or email address to convert, as a\n \t * Unicode string.\n \t * @returns {String} The Punycode representation of the given domain name or\n \t * email address.\n \t */\n \tfunction toASCII(input) {\n \t\treturn mapDomain(input, function(string) {\n \t\t\treturn regexNonASCII.test(string)\n \t\t\t\t? 'xn--' + encode(string)\n \t\t\t\t: string;\n \t\t});\n \t}\n\n \t/*--------------------------------------------------------------------------*/\n\n \t/** Define the public API */\n \tpunycode = {\n \t\t/**\n \t\t * A string representing the current Punycode.js version number.\n \t\t * @memberOf punycode\n \t\t * @type String\n \t\t */\n \t\t'version': '1.3.2',\n \t\t/**\n \t\t * An object of methods to convert from JavaScript's internal character\n \t\t * representation (UCS-2) to Unicode code points, and back.\n \t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n \t\t * @memberOf punycode\n \t\t * @type Object\n \t\t */\n \t\t'ucs2': {\n \t\t\t'decode': ucs2decode,\n \t\t\t'encode': ucs2encode\n \t\t},\n \t\t'decode': decode,\n \t\t'encode': encode,\n \t\t'toASCII': toASCII,\n \t\t'toUnicode': toUnicode\n \t};\n\n \t/** Expose `punycode` */\n \t// Some AMD build optimizers, like r.js, check for specific condition patterns\n \t// like the following:\n \tif (\n \t\ttypeof define == 'function' &&\n \t\ttypeof define.amd == 'object' &&\n \t\tdefine.amd\n \t) {\n \t\tdefine('punycode', function() {\n \t\t\treturn punycode;\n \t\t});\n \t} else if (freeExports && freeModule) {\n \t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n \t\t\tfreeModule.exports = punycode;\n \t\t} else { // in Narwhal or RingoJS v0.7.0-\n \t\t\tfor (key in punycode) {\n \t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n \t\t\t}\n \t\t}\n \t} else { // in Rhino or a web browser\n \t\troot.punycode = punycode;\n \t}\n\n }(this));\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, {});\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}