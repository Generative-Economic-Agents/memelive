{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/dynamodb/document_client.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","url","define","exports","require","module","__filename","__dirname","AWS","Translator","DynamoDBSet","DynamoDB","DocumentClient","util","inherit","constructor","options","self","configure","service","bindServiceObject","attrValue","api","operations","putItem","input","members","Item","value","shape","config","copy","__super__","params","merge","makeServiceRequest","operation","callback","request","setupRequest","setupResponse","send","serviceClientOperationsMap","batchGet","batchWrite","delete","get","put","query","scan","update","transactGet","transactWrite","createSet","list","getTranslator","translator","inputShape","_events","validate","unshift","req","rawParams","translateInput","outputShape","output","on","response","data","translateOutput","nextPage","cb","resp","paginationConfig","e","error","hasNextPage","nextPageTokens","inputTokens","inputToken","i","length","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;AACgBC,MAAAA,K,iBAAhBD,Y;;AACgBE,MAAAA,K,iBAAhBF,Y;;;8BAEHA,Y,GAAe,cAAYG,G;;AACjCL,MAAAA,UAAU,CAACM,MAAX,CAAkBJ,YAAlB,EAAgC,UAAUK,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC,YAAIC,GAAG,GAAGJ,OAAO,CAAC,SAAD,CAAjB;;AACA,YAAIK,UAAU,GAAGL,OAAO,CAAC,cAAD,CAAxB;;AACA,YAAIM,WAAW,GAAGN,OAAO,CAAC,OAAD,CAAzB;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCI,QAAAA,GAAG,CAACG,QAAJ,CAAaC,cAAb,GAA8BJ,GAAG,CAACK,IAAJ,CAASC,OAAT,CAAiB;AAE7C;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGC,UAAAA,WAAW,EAAE,SAASH,cAAT,CAAwBI,OAAxB,EAAiC;AAC5C,gBAAIC,IAAI,GAAG,IAAX;AACAA,YAAAA,IAAI,CAACD,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACAC,YAAAA,IAAI,CAACC,SAAL,CAAeD,IAAI,CAACD,OAApB;AACD,WA1B4C;;AA4B7C;AACH;AACA;AACGE,UAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBF,OAAnB,EAA4B;AACrC,gBAAIC,IAAI,GAAG,IAAX;AACAA,YAAAA,IAAI,CAACE,OAAL,GAAeH,OAAO,CAACG,OAAvB;AACAF,YAAAA,IAAI,CAACG,iBAAL,CAAuBJ,OAAvB;AACAC,YAAAA,IAAI,CAACI,SAAL,GAAiBL,OAAO,CAACK,SAAR,GACfJ,IAAI,CAACE,OAAL,CAAaG,GAAb,CAAiBC,UAAjB,CAA4BC,OAA5B,CAAoCC,KAApC,CAA0CC,OAA1C,CAAkDC,IAAlD,CAAuDC,KAAvD,CAA6DC,KAD/D;AAED,WArC4C;;AAuC7C;AACH;AACA;AACGT,UAAAA,iBAAiB,EAAE,SAASA,iBAAT,CAA2BJ,OAA3B,EAAoC;AACrD,gBAAIC,IAAI,GAAG,IAAX;AACAD,YAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,gBAAI,CAACC,IAAI,CAACE,OAAV,EAAmB;AACjBF,cAAAA,IAAI,CAACE,OAAL,GAAe,IAAIX,GAAG,CAACG,QAAR,CAAiBK,OAAjB,CAAf;AACD,aAFD,MAEO;AACL,kBAAIc,MAAM,GAAGtB,GAAG,CAACK,IAAJ,CAASkB,IAAT,CAAcd,IAAI,CAACE,OAAL,CAAaW,MAA3B,CAAb;AACAb,cAAAA,IAAI,CAACE,OAAL,GAAe,IAAIF,IAAI,CAACE,OAAL,CAAaJ,WAAb,CAAyBiB,SAA7B,CAAuCF,MAAvC,CAAf;AACAb,cAAAA,IAAI,CAACE,OAAL,CAAaW,MAAb,CAAoBG,MAApB,GACEzB,GAAG,CAACK,IAAJ,CAASqB,KAAT,CAAejB,IAAI,CAACE,OAAL,CAAaW,MAAb,CAAoBG,MAApB,IAA8B,EAA7C,EAAiDjB,OAAO,CAACiB,MAAzD,CADF;AAED;AACF,WAtD4C;;AAwD7C;AACH;AACA;AACGE,UAAAA,kBAAkB,EAAE,4BAASC,SAAT,EAAoBH,MAApB,EAA4BI,QAA5B,EAAsC;AACxD,gBAAIpB,IAAI,GAAG,IAAX;AACA,gBAAIqB,OAAO,GAAGrB,IAAI,CAACE,OAAL,CAAaiB,SAAb,EAAwBH,MAAxB,CAAd;AACAhB,YAAAA,IAAI,CAACsB,YAAL,CAAkBD,OAAlB;AACArB,YAAAA,IAAI,CAACuB,aAAL,CAAmBF,OAAnB;;AACA,gBAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAClCC,cAAAA,OAAO,CAACG,IAAR,CAAaJ,QAAb;AACD;;AACD,mBAAOC,OAAP;AACD,WApE4C;;AAsE7C;AACH;AACA;AACGI,UAAAA,0BAA0B,EAAE;AAC1BC,YAAAA,QAAQ,EAAE,cADgB;AAE1BC,YAAAA,UAAU,EAAE,gBAFc;AAG1BC,YAAAA,MAAM,EAAE,YAHkB;AAI1BC,YAAAA,GAAG,EAAE,SAJqB;AAK1BC,YAAAA,GAAG,EAAE,SALqB;AAM1BC,YAAAA,KAAK,EAAE,OANmB;AAO1BC,YAAAA,IAAI,EAAE,MAPoB;AAQ1BC,YAAAA,MAAM,EAAE,YARkB;AAS1BC,YAAAA,WAAW,EAAE,kBATa;AAU1BC,YAAAA,aAAa,EAAE;AAVW,WAzEiB;;AAsF7C;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGT,UAAAA,QAAQ,EAAE,kBAASV,MAAT,EAAiBI,QAAjB,EAA2B;AACnC,gBAAID,SAAS,GAAG,KAAKM,0BAAL,CAAgC,UAAhC,CAAhB;AACA,mBAAO,KAAKP,kBAAL,CAAwBC,SAAxB,EAAmCH,MAAnC,EAA2CI,QAA3C,CAAP;AACD,WA5H4C;;AA8H7C;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGO,UAAAA,UAAU,EAAE,oBAASX,MAAT,EAAiBI,QAAjB,EAA2B;AACrC,gBAAID,SAAS,GAAG,KAAKM,0BAAL,CAAgC,YAAhC,CAAhB;AACA,mBAAO,KAAKP,kBAAL,CAAwBC,SAAxB,EAAmCH,MAAnC,EAA2CI,QAA3C,CAAP;AACD,WAzK4C;;AA2K7C;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGQ,UAAAA,MAAM,EAAE,iBAASZ,MAAT,EAAiBI,QAAjB,EAA2B;AACjC,gBAAID,SAAS,GAAG,KAAKM,0BAAL,CAAgC,QAAhC,CAAhB;AACA,mBAAO,KAAKP,kBAAL,CAAwBC,SAAxB,EAAmCH,MAAnC,EAA2CI,QAA3C,CAAP;AACD,WAvM4C;;AAyM7C;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGS,UAAAA,GAAG,EAAE,aAASb,MAAT,EAAiBI,QAAjB,EAA2B;AAC9B,gBAAID,SAAS,GAAG,KAAKM,0BAAL,CAAgC,KAAhC,CAAhB;AACA,mBAAO,KAAKP,kBAAL,CAAwBC,SAAxB,EAAmCH,MAAnC,EAA2CI,QAA3C,CAAP;AACD,WApO4C;;AAsO7C;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGU,UAAAA,GAAG,EAAE,aAASd,MAAT,EAAiBI,QAAjB,EAA2B;AAC9B,gBAAID,SAAS,GAAG,KAAKM,0BAAL,CAAgC,KAAhC,CAAhB;AACA,mBAAO,KAAKP,kBAAL,CAAwBC,SAAxB,EAAmCH,MAAnC,EAA2CI,QAA3C,CAAP;AACD,WAtQ4C;;AAwQ7C;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGa,UAAAA,MAAM,EAAE,gBAASjB,MAAT,EAAiBI,QAAjB,EAA2B;AACjC,gBAAID,SAAS,GAAG,KAAKM,0BAAL,CAAgC,QAAhC,CAAhB;AACA,mBAAO,KAAKP,kBAAL,CAAwBC,SAAxB,EAAmCH,MAAnC,EAA2CI,QAA3C,CAAP;AACD,WAzS4C;;AA2S7C;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGY,UAAAA,IAAI,EAAE,cAAShB,MAAT,EAAiBI,QAAjB,EAA2B;AAC/B,gBAAID,SAAS,GAAG,KAAKM,0BAAL,CAAgC,MAAhC,CAAhB;AACA,mBAAO,KAAKP,kBAAL,CAAwBC,SAAxB,EAAmCH,MAAnC,EAA2CI,QAA3C,CAAP;AACD,WArU4C;;AAuU5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGW,UAAAA,KAAK,EAAE,eAASf,MAAT,EAAiBI,QAAjB,EAA2B;AAChC,gBAAID,SAAS,GAAG,KAAKM,0BAAL,CAAgC,OAAhC,CAAhB;AACA,mBAAO,KAAKP,kBAAL,CAAwBC,SAAxB,EAAmCH,MAAnC,EAA2CI,QAA3C,CAAP;AACD,WApW4C;;AAsW7C;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGe,UAAAA,aAAa,EAAE,uBAASnB,MAAT,EAAiBI,QAAjB,EAA2B;AACxC,gBAAID,SAAS,GAAG,KAAKM,0BAAL,CAAgC,eAAhC,CAAhB;AACA,mBAAO,KAAKP,kBAAL,CAAwBC,SAAxB,EAAmCH,MAAnC,EAA2CI,QAA3C,CAAP;AACD,WAnZ4C;;AAqZ7C;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGc,UAAAA,WAAW,EAAE,qBAASlB,MAAT,EAAiBI,QAAjB,EAA2B;AACtC,gBAAID,SAAS,GAAG,KAAKM,0B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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from './translator';\nimport { __cjsMetaURL as _req1} from './set';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n var Translator = require('./translator');\n var DynamoDBSet = require('./set');\n\n /**\n  * The document client simplifies working with items in Amazon DynamoDB\n  * by abstracting away the notion of attribute values. This abstraction\n  * annotates native JavaScript types supplied as input parameters, as well\n  * as converts annotated response data to native JavaScript types.\n  *\n  * ## Marshalling Input and Unmarshalling Response Data\n  *\n  * The document client affords developers the use of native JavaScript types\n  * instead of `AttributeValue`s to simplify the JavaScript development\n  * experience with Amazon DynamoDB. JavaScript objects passed in as parameters\n  * are marshalled into `AttributeValue` shapes required by Amazon DynamoDB.\n  * Responses from DynamoDB are unmarshalled into plain JavaScript objects\n  * by the `DocumentClient`. The `DocumentClient`, does not accept\n  * `AttributeValue`s in favor of native JavaScript types.\n  *\n  * |                             JavaScript Type                            | DynamoDB AttributeValue |\n  * |:----------------------------------------------------------------------:|-------------------------|\n  * | String                                                                 | S                       |\n  * | Number                                                                 | N                       |\n  * | Boolean                                                                | BOOL                    |\n  * | null                                                                   | NULL                    |\n  * | Array                                                                  | L                       |\n  * | Object                                                                 | M                       |\n  * | Buffer, File, Blob, ArrayBuffer, DataView, and JavaScript typed arrays | B                       |\n  *\n  * ## Support for Sets\n  *\n  * The `DocumentClient` offers a convenient way to create sets from\n  * JavaScript Arrays. The type of set is inferred from the first element\n  * in the array. DynamoDB supports string, number, and binary sets. To\n  * learn more about supported types see the\n  * [Amazon DynamoDB Data Model Documentation](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html)\n  * For more information see {AWS.DynamoDB.DocumentClient.createSet}\n  *\n  */\n AWS.DynamoDB.DocumentClient = AWS.util.inherit({\n\n   /**\n    * Creates a DynamoDB document client with a set of configuration options.\n    *\n    * @option options params [map] An optional map of parameters to bind to every\n    *   request sent by this service object.\n    * @option options service [AWS.DynamoDB] An optional pre-configured instance\n    *  of the AWS.DynamoDB service object. This instance's config will be\n    *  copied to a new instance used by this client. You should not need to\n    *  retain a reference to the input object, and may destroy it or allow it\n    *  to be garbage collected.\n    * @option options convertEmptyValues [Boolean] set to true if you would like\n    *  the document client to convert empty values (0-length strings, binary\n    *  buffers, and sets) to be converted to NULL types when persisting to\n    *  DynamoDB.\n    * @option options wrapNumbers [Boolean] Set to true to return numbers as a\n    *  NumberValue object instead of converting them to native JavaScript numbers.\n    *  This allows for the safe round-trip transport of numbers of arbitrary size.\n    * @see AWS.DynamoDB.constructor\n    *\n    */\n   constructor: function DocumentClient(options) {\n     var self = this;\n     self.options = options || {};\n     self.configure(self.options);\n   },\n\n   /**\n    * @api private\n    */\n   configure: function configure(options) {\n     var self = this;\n     self.service = options.service;\n     self.bindServiceObject(options);\n     self.attrValue = options.attrValue =\n       self.service.api.operations.putItem.input.members.Item.value.shape;\n   },\n\n   /**\n    * @api private\n    */\n   bindServiceObject: function bindServiceObject(options) {\n     var self = this;\n     options = options || {};\n\n     if (!self.service) {\n       self.service = new AWS.DynamoDB(options);\n     } else {\n       var config = AWS.util.copy(self.service.config);\n       self.service = new self.service.constructor.__super__(config);\n       self.service.config.params =\n         AWS.util.merge(self.service.config.params || {}, options.params);\n     }\n   },\n\n   /**\n    * @api private\n    */\n   makeServiceRequest: function(operation, params, callback) {\n     var self = this;\n     var request = self.service[operation](params);\n     self.setupRequest(request);\n     self.setupResponse(request);\n     if (typeof callback === 'function') {\n       request.send(callback);\n     }\n     return request;\n   },\n\n   /**\n    * @api private\n    */\n   serviceClientOperationsMap: {\n     batchGet: 'batchGetItem',\n     batchWrite: 'batchWriteItem',\n     delete: 'deleteItem',\n     get: 'getItem',\n     put: 'putItem',\n     query: 'query',\n     scan: 'scan',\n     update: 'updateItem',\n     transactGet: 'transactGetItems',\n     transactWrite: 'transactWriteItems'\n   },\n\n   /**\n    * Returns the attributes of one or more items from one or more tables\n    * by delegating to `AWS.DynamoDB.batchGetItem()`.\n    *\n    * Supply the same parameters as {AWS.DynamoDB.batchGetItem} with\n    * `AttributeValue`s substituted by native JavaScript types.\n    *\n    * @see AWS.DynamoDB.batchGetItem\n    * @example Get items from multiple tables\n    *  var params = {\n    *    RequestItems: {\n    *      'Table-1': {\n    *        Keys: [\n    *          {\n    *             HashKey: 'haskey',\n    *             NumberRangeKey: 1\n    *          }\n    *        ]\n    *      },\n    *      'Table-2': {\n    *        Keys: [\n    *          { foo: 'bar' },\n    *        ]\n    *      }\n    *    }\n    *  };\n    *\n    *  var documentClient = new AWS.DynamoDB.DocumentClient();\n    *\n    *  documentClient.batchGet(params, function(err, data) {\n    *    if (err) console.log(err);\n    *    else console.log(data);\n    *  });\n    *\n    */\n   batchGet: function(params, callback) {\n     var operation = this.serviceClientOperationsMap['batchGet'];\n     return this.makeServiceRequest(operation, params, callback);\n   },\n\n   /**\n    * Puts or deletes multiple items in one or more tables by delegating\n    * to `AWS.DynamoDB.batchWriteItem()`.\n    *\n    * Supply the same parameters as {AWS.DynamoDB.batchWriteItem} with\n    * `AttributeValue`s substituted by native JavaScript types.\n    *\n    * @see AWS.DynamoDB.batchWriteItem\n    * @example Write to and delete from a table\n    *  var params = {\n    *    RequestItems: {\n    *      'Table-1': [\n    *        {\n    *          DeleteRequest: {\n    *            Key: { HashKey: 'someKey' }\n    *          }\n    *        },\n    *        {\n    *          PutRequest: {\n    *            Item: {\n    *              HashKey: 'anotherKey',\n    *              NumAttribute: 1,\n    *              BoolAttribute: true,\n    *              ListAttribute: [1, 'two', false],\n    *              MapAttribute: { foo: 'bar' }\n    *            }\n    *          }\n    *        }\n    *      ]\n    *    }\n    *  };\n    *\n    *  var documentClient = new AWS.DynamoDB.DocumentClient();\n    *\n    *  documentClient.batchWrite(params, function(err, data) {\n    *    if (err) console.log(err);\n    *    else console.log(data);\n    *  });\n    *\n    */\n   batchWrite: function(params, callback) {\n     var operation = this.serviceClientOperationsMap['batchWrite'];\n     return this.makeServiceRequest(operation, params, callback);\n   },\n\n   /**\n    * Deletes a single item in a table by primary key by delegating to\n    * `AWS.DynamoDB.deleteItem()`\n    *\n    * Supply the same parameters as {AWS.DynamoDB.deleteItem} with\n    * `AttributeValue`s substituted by native JavaScript types.\n    *\n    * @see AWS.DynamoDB.deleteItem\n    * @example Delete an item from a table\n    *  var params = {\n    *    TableName : 'Table',\n    *    Key: {\n    *      HashKey: 'hashkey',\n    *      NumberRangeKey: 1\n    *    }\n    *  };\n    *\n    *  var documentClient = new AWS.DynamoDB.DocumentClient();\n    *\n    *  documentClient.delete(params, function(err, data) {\n    *    if (err) console.log(err);\n    *    else console.log(data);\n    *  });\n    *\n    */\n   delete: function(params, callback) {\n     var operation = this.serviceClientOperationsMap['delete'];\n     return this.makeServiceRequest(operation, params, callback);\n   },\n\n   /**\n    * Returns a set of attributes for the item with the given primary key\n    * by delegating to `AWS.DynamoDB.getItem()`.\n    *\n    * Supply the same parameters as {AWS.DynamoDB.getItem} with\n    * `AttributeValue`s substituted by native JavaScript types.\n    *\n    * @see AWS.DynamoDB.getItem\n    * @example Get an item from a table\n    *  var params = {\n    *    TableName : 'Table',\n    *    Key: {\n    *      HashKey: 'hashkey'\n    *    }\n    *  };\n    *\n    *  var documentClient = new AWS.DynamoDB.DocumentClient();\n    *\n    *  documentClient.get(params, function(err, data) {\n    *    if (err) console.log(err);\n    *    else console.log(data);\n    *  });\n    *\n    */\n   get: function(params, callback) {\n     var operation = this.serviceClientOperationsMap['get'];\n     return this.makeServiceRequest(operation, params, callback);\n   },\n\n   /**\n    * Creates a new item, or replaces an old item with a new item by\n    * delegating to `AWS.DynamoDB.putItem()`.\n    *\n    * Supply the same parameters as {AWS.DynamoDB.putItem} with\n    * `AttributeValue`s substituted by native JavaScript types.\n    *\n    * @see AWS.DynamoDB.putItem\n    * @example Create a new item in a table\n    *  var params = {\n    *    TableName : 'Table',\n    *    Item: {\n    *       HashKey: 'haskey',\n    *       NumAttribute: 1,\n    *       BoolAttribute: true,\n    *       ListAttribute: [1, 'two', false],\n    *       MapAttribute: { foo: 'bar'},\n    *       NullAttribute: null\n    *    }\n    *  };\n    *\n    *  var documentClient = new AWS.DynamoDB.DocumentClient();\n    *\n    *  documentClient.put(params, function(err, data) {\n    *    if (err) console.log(err);\n    *    else console.log(data);\n    *  });\n    *\n    */\n   put: function(params, callback) {\n     var operation = this.serviceClientOperationsMap['put'];\n     return this.makeServiceRequest(operation, params, callback);\n   },\n\n   /**\n    * Edits an existing item's attributes, or adds a new item to the table if\n    * it does not already exist by delegating to `AWS.DynamoDB.updateItem()`.\n    *\n    * Supply the same parameters as {AWS.DynamoDB.updateItem} with\n    * `AttributeValue`s substituted by native JavaScript types.\n    *\n    * @see AWS.DynamoDB.updateItem\n    * @example Update an item with expressions\n    *  var params = {\n    *    TableName: 'Table',\n    *    Key: { HashKey : 'hashkey' },\n    *    UpdateExpression: 'set #a = :x + :y',\n    *    ConditionExpression: '#a < :MAX',\n    *    ExpressionAttributeNames: {'#a' : 'Sum'},\n    *    ExpressionAttributeValues: {\n    *      ':x' : 20,\n    *      ':y' : 45,\n    *      ':MAX' : 100,\n    *    }\n    *  };\n    *\n    *  var documentClient = new AWS.DynamoDB.DocumentClient();\n    *\n    *  documentClient.update(params, function(err, data) {\n    *     if (err) console.log(err);\n    *     else console.log(data);\n    *  });\n    *\n    */\n   update: function(params, callback) {\n     var operation = this.serviceClientOperationsMap['update'];\n     return this.makeServiceRequest(operation, params, callback);\n   },\n\n   /**\n    * Returns one or more items and item attributes by accessing every item\n    * in a table or a secondary index.\n    *\n    * Supply the same parameters as {AWS.DynamoDB.scan} with\n    * `AttributeValue`s substituted by native JavaScript types.\n    *\n    * @see AWS.DynamoDB.scan\n    * @example Scan the table with a filter expression\n    *  var params = {\n    *    TableName : 'Table',\n    *    FilterExpression : 'Year = :this_year',\n    *    ExpressionAttributeValues : {':this_year' : 2015}\n    *  };\n    *\n    *  var documentClient = new AWS.DynamoDB.DocumentClient();\n    *\n    *  documentClient.scan(params, function(err, data) {\n    *     if (err) console.log(err);\n    *     else console.log(data);\n    *  });\n    *\n    */\n   scan: function(params, callback) {\n     var operation = this.serviceClientOperationsMap['scan'];\n     return this.makeServiceRequest(operation, params, callback);\n   },\n\n    /**\n     * Directly access items from a table by primary key or a secondary index.\n     *\n     * Supply the same parameters as {AWS.DynamoDB.query} with\n     * `AttributeValue`s substituted by native JavaScript types.\n     *\n     * @see AWS.DynamoDB.query\n     * @example Query an index\n     *  var params = {\n     *    TableName: 'Table',\n     *    IndexName: 'Index',\n     *    KeyConditionExpression: 'HashKey = :hkey and RangeKey > :rkey',\n     *    ExpressionAttributeValues: {\n     *      ':hkey': 'key',\n     *      ':rkey': 2015\n     *    }\n     *  };\n     *\n     *  var documentClient = new AWS.DynamoDB.DocumentClient();\n     *\n     *  documentClient.query(params, function(err, data) {\n     *     if (err) console.log(err);\n     *     else console.log(data);\n     *  });\n     *\n     */\n   query: function(params, callback) {\n     var operation = this.serviceClientOperationsMap['query'];\n     return this.makeServiceRequest(operation, params, callback);\n   },\n\n   /**\n    * Synchronous write operation that groups up to 100 action requests.\n    *\n    * Supply the same parameters as {AWS.DynamoDB.transactWriteItems} with\n    * `AttributeValue`s substituted by native JavaScript types.\n    *\n    * @see AWS.DynamoDB.transactWriteItems\n    * @example Get items from multiple tables\n    *  var params = {\n    *    TransactItems: [{\n    *      Put: {\n    *        TableName : 'Table0',\n    *        Item: {\n    *          HashKey: 'haskey',\n    *          NumAttribute: 1,\n    *          BoolAttribute: true,\n    *          ListAttribute: [1, 'two', false],\n    *          MapAttribute: { foo: 'bar'},\n    *          NullAttribute: null\n    *        }\n    *      }\n    *    }, {\n    *      Update: {\n    *        TableName: 'Table1',\n    *        Key: { HashKey : 'hashkey' },\n    *        UpdateExpression: 'set #a = :x + :y',\n    *        ConditionExpression: '#a < :MAX',\n    *        ExpressionAttributeNames: {'#a' : 'Sum'},\n    *        ExpressionAttributeValues: {\n    *          ':x' : 20,\n    *          ':y' : 45,\n    *          ':MAX' : 100,\n    *        }\n    *      }\n    *    }]\n    *  };\n    *\n    *  documentClient.transactWrite(params, function(err, data) {\n    *    if (err) console.log(err);\n    *    else console.log(data);\n    *  });\n    */\n   transactWrite: function(params, callback) {\n     var operation = this.serviceClientOperationsMap['transactWrite'];\n     return this.makeServiceRequest(operation, params, callback);\n   },\n\n   /**\n    * Atomically retrieves multiple items from one or more tables (but not from indexes)\n    * in a single account and region.\n    *\n    * Supply the same parameters as {AWS.DynamoDB.transactGetItems} with\n    * `AttributeValue`s substituted by native JavaScript types.\n    *\n    * @see AWS.DynamoDB.transactGetItems\n    * @example Get items from multiple tables\n    *  var params = {\n    *    TransactItems: [{\n    *      Get: {\n    *        TableName : 'Table0',\n    *        Key: {\n    *          HashKey: 'hashkey0'\n    *        }\n    *      }\n    *    }, {\n    *      Get: {\n    *        TableName : 'Table1',\n    *        Key: {\n    *          HashKey: 'hashkey1'\n    *        }\n    *      }\n    *    }]\n    *  };\n    *\n    *  documentClient.transactGet(params, function(err, data) {\n    *    if (err) console.log(err);\n    *    else console.log(data);\n    *  });\n    */\n   transactGet: function(params, callback) {\n     var operation = this.serviceClientOperationsMap['transactGet'];\n     return this.makeServiceRequest(operation, params, callback);\n   },\n\n   /**\n    * Creates a set of elements inferring the type of set from\n    * the type of the first element. Amazon DynamoDB currently supports\n    * the number sets, string sets, and binary sets. For more information\n    * about DynamoDB data types see the documentation on the\n    * [Amazon DynamoDB Data Model](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModel.DataTypes).\n    *\n    * @param list [Array] Collection to represent your DynamoDB Set\n    * @param options [map]\n    *  * **validate** [Boolean] set to true if you want to validate the type\n    *    of each element in the set. Defaults to `false`.\n    * @example Creating a number set\n    *  var documentClient = new AWS.DynamoDB.DocumentClient();\n    *\n    *  var params = {\n    *    Item: {\n    *      hashkey: 'hashkey'\n    *      numbers: documentClient.createSet([1, 2, 3]);\n    *    }\n    *  };\n    *\n    *  documentClient.put(params, function(err, data) {\n    *    if (err) console.log(err);\n    *    else console.log(data);\n    *  });\n    *\n    */\n   createSet: function(list, options) {\n     options = options || {};\n     return new DynamoDBSet(list, options);\n   },\n\n   /**\n    * @api private\n    */\n   getTranslator: function() {\n     return new Translator(this.options);\n   },\n\n   /**\n    * @api private\n    */\n   setupRequest: function setupRequest(request) {\n     var self = this;\n     var translator = self.getTranslator();\n     var operation = request.operation;\n     var inputShape = request.service.api.operations[operation].input;\n     request._events.validate.unshift(function(req) {\n       req.rawParams = AWS.util.copy(req.params);\n       req.params = translator.translateInput(req.rawParams, inputShape);\n     });\n   },\n\n   /**\n    * @api private\n    */\n   setupResponse: function setupResponse(request) {\n     var self = this;\n     var translator = self.getTranslator();\n     var outputShape = self.service.api.operations[request.operation].output;\n     request.on('extractData', function(response) {\n       response.data = translator.translateOutput(response.data, outputShape);\n     });\n\n     var response = request.response;\n     response.nextPage = function(cb) {\n       var resp = this;\n       var req = resp.request;\n       var config;\n       var service = req.service;\n       var operation = req.operation;\n       try {\n         config = service.paginationConfig(operation, true);\n       } catch (e) { resp.error = e; }\n\n       if (!resp.hasNextPage()) {\n         if (cb) cb(resp.error, null);\n         else if (resp.error) throw resp.error;\n         return null;\n       }\n\n       var params = AWS.util.copy(req.rawParams);\n       if (!resp.nextPageTokens) {\n         return cb ? cb(null, null) : null;\n       } else {\n         var inputTokens = config.inputToken;\n         if (typeof inputTokens === 'string') inputTokens = [inputTokens];\n         for (var i = 0; i < inputTokens.length; i++) {\n           params[inputTokens[i]] = resp.nextPageTokens[i];\n         }\n         return self[operation](params, cb);\n       }\n     };\n   }\n\n });\n\n /**\n  * @api private\n  */\n module.exports = AWS.DynamoDB.DocumentClient;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n  './translator': _req0,\n  './set': _req1,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}