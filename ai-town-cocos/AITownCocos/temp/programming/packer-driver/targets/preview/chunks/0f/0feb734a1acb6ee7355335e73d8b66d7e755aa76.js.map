{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/sshpk/lib/formats/rfc4253.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","_req4","_req5","url","define","exports","require","module","__filename","__dirname","read","bind","undefined","readType","write","readPartial","readInternal","keyTypeToAlg","algToKeyType","assert","Buffer","algs","utils","Key","PrivateKey","SSHBuffer","alg","string","match","Error","key","object","type","part","curve","data","toString","partial","buf","options","from","buffer","parts","sshbuf","readString","ok","atEnd","partCount","info","length","privInfo","push","readPart","Constructor","algInfo","strictEqual","res","exec","normalized","i","p","name","slice","normalize","nd","zeroPadToLength","mpNormalize","_rfc4253Cache","toBuffer","remainder","consumed","_offset","isPrivateKey","writeString","concat","A","writeBuffer","_cjsExports","_read"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'assert-plus';\nimport { __cjsMetaURL as _req0} from 'safer-buffer';\nimport { __cjsMetaURL as _req1} from '../algs';\nimport { __cjsMetaURL as _req2} from '../utils';\nimport { __cjsMetaURL as _req3} from '../key';\nimport { __cjsMetaURL as _req4} from '../private-key';\nimport { __cjsMetaURL as _req5} from '../ssh-buffer';\nlet _cjsExports;\nlet _read;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n // Copyright 2015 Joyent, Inc.\n\n module.exports = {\n \tread: read.bind(undefined, false, undefined),\n \treadType: read.bind(undefined, false),\n \twrite: write,\n \t/* semi-private api, used by sshpk-agent */\n \treadPartial: read.bind(undefined, true),\n\n \t/* shared with ssh format */\n \treadInternal: read,\n \tkeyTypeToAlg: keyTypeToAlg,\n \talgToKeyType: algToKeyType\n };\n\n var assert = require('assert-plus');\n var Buffer = require('safer-buffer').Buffer;\n var algs = require('../algs');\n var utils = require('../utils');\n var Key = require('../key');\n var PrivateKey = require('../private-key');\n var SSHBuffer = require('../ssh-buffer');\n\n function algToKeyType(alg) {\n \tassert.string(alg);\n \tif (alg === 'ssh-dss')\n \t\treturn ('dsa');\n \telse if (alg === 'ssh-rsa')\n \t\treturn ('rsa');\n \telse if (alg === 'ssh-ed25519')\n \t\treturn ('ed25519');\n \telse if (alg === 'ssh-curve25519')\n \t\treturn ('curve25519');\n \telse if (alg.match(/^ecdsa-sha2-/))\n \t\treturn ('ecdsa');\n \telse\n \t\tthrow (new Error('Unknown algorithm ' + alg));\n }\n\n function keyTypeToAlg(key) {\n \tassert.object(key);\n \tif (key.type === 'dsa')\n \t\treturn ('ssh-dss');\n \telse if (key.type === 'rsa')\n \t\treturn ('ssh-rsa');\n \telse if (key.type === 'ed25519')\n \t\treturn ('ssh-ed25519');\n \telse if (key.type === 'curve25519')\n \t\treturn ('ssh-curve25519');\n \telse if (key.type === 'ecdsa')\n \t\treturn ('ecdsa-sha2-' + key.part.curve.data.toString());\n \telse\n \t\tthrow (new Error('Unknown key type ' + key.type));\n }\n\n function read(partial, type, buf, options) {\n \tif (typeof (buf) === 'string')\n \t\tbuf = Buffer.from(buf);\n \tassert.buffer(buf, 'buf');\n\n \tvar key = {};\n\n \tvar parts = key.parts = [];\n \tvar sshbuf = new SSHBuffer({buffer: buf});\n\n \tvar alg = sshbuf.readString();\n \tassert.ok(!sshbuf.atEnd(), 'key must have at least one part');\n\n \tkey.type = algToKeyType(alg);\n\n \tvar partCount = algs.info[key.type].parts.length;\n \tif (type && type === 'private')\n \t\tpartCount = algs.privInfo[key.type].parts.length;\n\n \twhile (!sshbuf.atEnd() && parts.length < partCount)\n \t\tparts.push(sshbuf.readPart());\n \twhile (!partial && !sshbuf.atEnd())\n \t\tparts.push(sshbuf.readPart());\n\n \tassert.ok(parts.length >= 1,\n \t    'key must have at least one part');\n \tassert.ok(partial || sshbuf.atEnd(),\n \t    'leftover bytes at end of key');\n\n \tvar Constructor = Key;\n \tvar algInfo = algs.info[key.type];\n \tif (type === 'private' || algInfo.parts.length !== parts.length) {\n \t\talgInfo = algs.privInfo[key.type];\n \t\tConstructor = PrivateKey;\n \t}\n \tassert.strictEqual(algInfo.parts.length, parts.length);\n\n \tif (key.type === 'ecdsa') {\n \t\tvar res = /^ecdsa-sha2-(.+)$/.exec(alg);\n \t\tassert.ok(res !== null);\n \t\tassert.strictEqual(res[1], parts[0].data.toString());\n \t}\n\n \tvar normalized = true;\n \tfor (var i = 0; i < algInfo.parts.length; ++i) {\n \t\tvar p = parts[i];\n \t\tp.name = algInfo.parts[i];\n \t\t/*\n \t\t * OpenSSH stores ed25519 \"private\" keys as seed + public key\n \t\t * concat'd together (k followed by A). We want to keep them\n \t\t * separate for other formats that don't do this.\n \t\t */\n \t\tif (key.type === 'ed25519' && p.name === 'k')\n \t\t\tp.data = p.data.slice(0, 32);\n\n \t\tif (p.name !== 'curve' && algInfo.normalize !== false) {\n \t\t\tvar nd;\n \t\t\tif (key.type === 'ed25519') {\n \t\t\t\tnd = utils.zeroPadToLength(p.data, 32);\n \t\t\t} else {\n \t\t\t\tnd = utils.mpNormalize(p.data);\n \t\t\t}\n \t\t\tif (nd.toString('binary') !==\n \t\t\t    p.data.toString('binary')) {\n \t\t\t\tp.data = nd;\n \t\t\t\tnormalized = false;\n \t\t\t}\n \t\t}\n \t}\n\n \tif (normalized)\n \t\tkey._rfc4253Cache = sshbuf.toBuffer();\n\n \tif (partial && typeof (partial) === 'object') {\n \t\tpartial.remainder = sshbuf.remainder();\n \t\tpartial.consumed = sshbuf._offset;\n \t}\n\n \treturn (new Constructor(key));\n }\n\n function write(key, options) {\n \tassert.object(key);\n\n \tvar alg = keyTypeToAlg(key);\n \tvar i;\n\n \tvar algInfo = algs.info[key.type];\n \tif (PrivateKey.isPrivateKey(key))\n \t\talgInfo = algs.privInfo[key.type];\n \tvar parts = algInfo.parts;\n\n \tvar buf = new SSHBuffer({});\n\n \tbuf.writeString(alg);\n\n \tfor (i = 0; i < parts.length; ++i) {\n \t\tvar data = key.part[parts[i]].data;\n \t\tif (algInfo.normalize !== false) {\n \t\t\tif (key.type === 'ed25519')\n \t\t\t\tdata = utils.zeroPadToLength(data, 32);\n \t\t\telse\n \t\t\t\tdata = utils.mpNormalize(data);\n \t\t}\n \t\tif (key.type === 'ed25519' && parts[i] === 'k')\n \t\t\tdata = Buffer.concat([data, key.part.A.data]);\n \t\tbuf.writeBuffer(data);\n \t}\n\n \treturn (buf.toBuffer());\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_read = module.exports.read;\n\n}, () => ({\n  'assert-plus': _req,\n  'safer-buffer': _req0,\n  '../algs': _req1,\n  '../utils': _req2,\n  '../key': _req3,\n  '../private-key': _req4,\n  '../ssh-buffer': _req5,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}