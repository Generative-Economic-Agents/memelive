{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/_baseFlatten.js"],"names":["baseFlatten","array","depth","predicate","isStrict","result","index","length","isFlattenable","value","arrayPush"],"mappings":";;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,SAAnC,EAA8CC,QAA9C,EAAwDC,MAAxD,EAAgE;AAC9D,QAAIC,KAAK,GAAG,CAAC,CAAb;AAAA,QACIC,MAAM,GAAGN,KAAK,CAACM,MADnB;AAGAJ,IAAAA,SAAS,KAAKA,SAAS,GAAGK,aAAjB,CAAT;AACAH,IAAAA,MAAM,KAAKA,MAAM,GAAG,EAAd,CAAN;;AAEA,WAAO,EAAEC,KAAF,GAAUC,MAAjB,EAAyB;AACvB,UAAIE,KAAK,GAAGR,KAAK,CAACK,KAAD,CAAjB;;AACA,UAAIJ,KAAK,GAAG,CAAR,IAAaC,SAAS,CAACM,KAAD,CAA1B,EAAmC;AACjC,YAAIP,KAAK,GAAG,CAAZ,EAAe;AACb;AACAF,UAAAA,WAAW,CAACS,KAAD,EAAQP,KAAK,GAAG,CAAhB,EAAmBC,SAAnB,EAA8BC,QAA9B,EAAwCC,MAAxC,CAAX;AACD,SAHD,MAGO;AACLK,UAAAA,SAAS,CAACL,MAAD,EAASI,KAAT,CAAT;AACD;AACF,OAPD,MAOO,IAAI,CAACL,QAAL,EAAe;AACpBC,QAAAA,MAAM,CAACA,MAAM,CAACE,MAAR,CAAN,GAAwBE,KAAxB;AACD;AACF;;AACD,WAAOJ,MAAP;AACD;;;;AAnCMK,MAAAA,S;;AACAF,MAAAA,a;;;yBAoCQR,W","sourcesContent":["import arrayPush from './_arrayPush.js';\nimport isFlattenable from './_isFlattenable.js';\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nexport default baseFlatten;\n"]}