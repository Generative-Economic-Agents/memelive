{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/lodash-es/_baseMatchesProperty.js"],"names":["baseMatchesProperty","path","srcValue","isKey","isStrictComparable","matchesStrictComparable","toKey","object","objValue","get","undefined","hasIn","baseIsEqual","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG"],"mappings":";;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,mBAAT,CAA6BC,IAA7B,EAAmCC,QAAnC,EAA6C;AAC3C,QAAIC,KAAK,CAACF,IAAD,CAAL,IAAeG,kBAAkB,CAACF,QAAD,CAArC,EAAiD;AAC/C,aAAOG,uBAAuB,CAACC,KAAK,CAACL,IAAD,CAAN,EAAcC,QAAd,CAA9B;AACD;;AACD,WAAO,UAASK,MAAT,EAAiB;AACtB,UAAIC,QAAQ,GAAGC,GAAG,CAACF,MAAD,EAASN,IAAT,CAAlB;AACA,aAAQO,QAAQ,KAAKE,SAAb,IAA0BF,QAAQ,KAAKN,QAAxC,GACHS,KAAK,CAACJ,MAAD,EAASN,IAAT,CADF,GAEHW,WAAW,CAACV,QAAD,EAAWM,QAAX,EAAqBK,oBAAoB,GAAGC,sBAA5C,CAFf;AAGD,KALD;AAMD;;;;AA9BMF,MAAAA,W;;AACAH,MAAAA,G;;AACAE,MAAAA,K;;AACAR,MAAAA,K;;AACAC,MAAAA,kB;;AACAC,MAAAA,uB;;AACAC,MAAAA,K;;;AAEP;AACIO,MAAAA,oB,GAAuB,C;AACvBC,MAAAA,sB,GAAyB,C;;yBAsBdd,mB","sourcesContent":["import baseIsEqual from './_baseIsEqual.js';\nimport get from './get.js';\nimport hasIn from './hasIn.js';\nimport isKey from './_isKey.js';\nimport isStrictComparable from './_isStrictComparable.js';\nimport matchesStrictComparable from './_matchesStrictComparable.js';\nimport toKey from './_toKey.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nexport default baseMatchesProperty;\n"]}