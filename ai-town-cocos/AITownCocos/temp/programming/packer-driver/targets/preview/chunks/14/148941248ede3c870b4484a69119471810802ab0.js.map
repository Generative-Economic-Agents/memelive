{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/credentials/cognito_identity_credentials.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","url","define","exports","require","module","__filename","__dirname","AWS","CognitoIdentity","STS","CognitoIdentityCredentials","util","inherit","Credentials","localStorageKey","id","providers","constructor","params","clientConfig","call","expired","data","_identityId","_clientConfig","copy","loadCachedId","self","Object","defineProperty","get","IdentityId","set","identityId","refresh","callback","coalesceRefresh","fn","load","createClients","getId","err","RoleArn","getCredentialsForIdentity","getCredentialsFromSTS","clearIdOnNotAuthorized","clearCachedId","clearCache","poolId","IdentityPoolId","loginId","LoginId","storage","code","cognito","loadCredentials","credentials","accessKeyId","AccessKeyId","secretAccessKey","SecretKey","sessionToken","SessionToken","expireTime","Expiration","cacheId","getOpenIdToken","WebIdentityToken","Token","webIdentityCredentials","webErr","sts","credentialsFrom","isBrowser","getStorage","Logins","actualProviders","keys","cachedProviders","split","intersect","filter","n","indexOf","length","WebIdentityCredentials","cognitoConfig","merge","setStorage","join","key","val","_","window","localStorage","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;AACgBC,MAAAA,K,iBAAhBD,Y;;AACgBE,MAAAA,K,iBAAhBF,Y;;;8BAEHA,Y,GAAe,cAAYG,G;;AACjCL,MAAAA,UAAU,CAACM,MAAX,CAAkBJ,YAAlB,EAAgC,UAAUK,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC,YAAIC,GAAG,GAAGJ,OAAO,CAAC,SAAD,CAAjB;;AACA,YAAIK,eAAe,GAAGL,OAAO,CAAC,+BAAD,CAA7B;;AACA,YAAIM,GAAG,GAAGN,OAAO,CAAC,mBAAD,CAAjB;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCI,QAAAA,GAAG,CAACG,0BAAJ,GAAiCH,GAAG,CAACI,IAAJ,CAASC,OAAT,CAAiBL,GAAG,CAACM,WAArB,EAAkC;AACjE;AACH;AACA;AACGC,UAAAA,eAAe,EAAE;AACfC,YAAAA,EAAE,EAAE,0BADW;AAEfC,YAAAA,SAAS,EAAE;AAFI,WAJgD;;AASjE;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGC,UAAAA,WAAW,EAAE,SAASP,0BAAT,CAAoCQ,MAApC,EAA4CC,YAA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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from '../../clients/cognitoidentity';\nimport { __cjsMetaURL as _req1} from '../../clients/sts';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n var CognitoIdentity = require('../../clients/cognitoidentity');\n var STS = require('../../clients/sts');\n\n /**\n  * Represents credentials retrieved from STS Web Identity Federation using\n  * the Amazon Cognito Identity service.\n  *\n  * By default this provider gets credentials using the\n  * {AWS.CognitoIdentity.getCredentialsForIdentity} service operation, which\n  * requires either an `IdentityId` or an `IdentityPoolId` (Amazon Cognito\n  * Identity Pool ID), which is used to call {AWS.CognitoIdentity.getId} to\n  * obtain an `IdentityId`. If the identity or identity pool is not configured in\n  * the Amazon Cognito Console to use IAM roles with the appropriate permissions,\n  * then additionally a `RoleArn` is required containing the ARN of the IAM trust\n  * policy for the Amazon Cognito role that the user will log into. If a `RoleArn`\n  * is provided, then this provider gets credentials using the\n  * {AWS.STS.assumeRoleWithWebIdentity} service operation, after first getting an\n  * Open ID token from {AWS.CognitoIdentity.getOpenIdToken}.\n  *\n  * In addition, if this credential provider is used to provide authenticated\n  * login, the `Logins` map may be set to the tokens provided by the respective\n  * identity providers. See {constructor} for an example on creating a credentials\n  * object with proper property values.\n  *\n  * ## Refreshing Credentials from Identity Service\n  *\n  * In addition to AWS credentials expiring after a given amount of time, the\n  * login token from the identity provider will also expire. Once this token\n  * expires, it will not be usable to refresh AWS credentials, and another\n  * token will be needed. The SDK does not manage refreshing of the token value,\n  * but this can be done through a \"refresh token\" supported by most identity\n  * providers. Consult the documentation for the identity provider for refreshing\n  * tokens. Once the refreshed token is acquired, you should make sure to update\n  * this new token in the credentials object's {params} property. The following\n  * code will update the WebIdentityToken, assuming you have retrieved an updated\n  * token from the identity provider:\n  *\n  * ```javascript\n  * AWS.config.credentials.params.Logins['graph.facebook.com'] = updatedToken;\n  * ```\n  *\n  * Future calls to `credentials.refresh()` will now use the new token.\n  *\n  * @!attribute params\n  *   @return [map] the map of params passed to\n  *     {AWS.CognitoIdentity.getId},\n  *     {AWS.CognitoIdentity.getOpenIdToken}, and\n  *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the\n  *     `params.WebIdentityToken` property.\n  * @!attribute data\n  *   @return [map] the raw data response from the call to\n  *     {AWS.CognitoIdentity.getCredentialsForIdentity}, or\n  *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get\n  *     access to other properties from the response.\n  * @!attribute identityId\n  *   @return [String] the Cognito ID returned by the last call to\n  *     {AWS.CognitoIdentity.getOpenIdToken}. This ID represents the actual\n  *     final resolved identity ID from Amazon Cognito.\n  */\n AWS.CognitoIdentityCredentials = AWS.util.inherit(AWS.Credentials, {\n   /**\n    * @api private\n    */\n   localStorageKey: {\n     id: 'aws.cognito.identity-id.',\n     providers: 'aws.cognito.identity-providers.'\n   },\n\n   /**\n    * Creates a new credentials object.\n    * @example Creating a new credentials object\n    *   AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    *\n    *     // either IdentityPoolId or IdentityId is required\n    *     // See the IdentityPoolId param for AWS.CognitoIdentity.getID (linked below)\n    *     // See the IdentityId param for AWS.CognitoIdentity.getCredentialsForIdentity\n    *     // or AWS.CognitoIdentity.getOpenIdToken (linked below)\n    *     IdentityPoolId: 'us-east-1:1699ebc0-7900-4099-b910-2df94f52a030',\n    *     IdentityId: 'us-east-1:128d0a74-c82f-4553-916d-90053e4a8b0f'\n    *\n    *     // optional, only necessary when the identity pool is not configured\n    *     // to use IAM roles in the Amazon Cognito Console\n    *     // See the RoleArn param for AWS.STS.assumeRoleWithWebIdentity (linked below)\n    *     RoleArn: 'arn:aws:iam::1234567890:role/MYAPP-CognitoIdentity',\n    *\n    *     // optional tokens, used for authenticated login\n    *     // See the Logins param for AWS.CognitoIdentity.getID (linked below)\n    *     Logins: {\n    *       'graph.facebook.com': 'FBTOKEN',\n    *       'www.amazon.com': 'AMAZONTOKEN',\n    *       'accounts.google.com': 'GOOGLETOKEN',\n    *       'api.twitter.com': 'TWITTERTOKEN',\n    *       'www.digits.com': 'DIGITSTOKEN'\n    *     },\n    *\n    *     // optional name, defaults to web-identity\n    *     // See the RoleSessionName param for AWS.STS.assumeRoleWithWebIdentity (linked below)\n    *     RoleSessionName: 'web',\n    *\n    *     // optional, only necessary when application runs in a browser\n    *     // and multiple users are signed in at once, used for caching\n    *     LoginId: 'example@gmail.com'\n    *\n    *   }, {\n    *      // optionally provide configuration to apply to the underlying service clients\n    *      // if configuration is not provided, then configuration will be pulled from AWS.config\n    *\n    *      // region should match the region your identity pool is located in\n    *      region: 'us-east-1',\n    *\n    *      // specify timeout options\n    *      httpOptions: {\n    *        timeout: 100\n    *      }\n    *   });\n    * @see AWS.CognitoIdentity.getId\n    * @see AWS.CognitoIdentity.getCredentialsForIdentity\n    * @see AWS.STS.assumeRoleWithWebIdentity\n    * @see AWS.CognitoIdentity.getOpenIdToken\n    * @see AWS.Config\n    * @note If a region is not provided in the global AWS.config, or\n    *   specified in the `clientConfig` to the CognitoIdentityCredentials\n    *   constructor, you may encounter a 'Missing credentials in config' error\n    *   when calling making a service call.\n    */\n   constructor: function CognitoIdentityCredentials(params, clientConfig) {\n     AWS.Credentials.call(this);\n     this.expired = true;\n     this.params = params;\n     this.data = null;\n     this._identityId = null;\n     this._clientConfig = AWS.util.copy(clientConfig || {});\n     this.loadCachedId();\n     var self = this;\n     Object.defineProperty(this, 'identityId', {\n       get: function() {\n         self.loadCachedId();\n         return self._identityId || self.params.IdentityId;\n       },\n       set: function(identityId) {\n         self._identityId = identityId;\n       }\n     });\n   },\n\n   /**\n    * Refreshes credentials using {AWS.CognitoIdentity.getCredentialsForIdentity},\n    * or {AWS.STS.assumeRoleWithWebIdentity}.\n    *\n    * @callback callback function(err)\n    *   Called when the STS service responds (or fails). When\n    *   this callback is called with no error, it means that the credentials\n    *   information has been loaded into the object (as the `accessKeyId`,\n    *   `secretAccessKey`, and `sessionToken` properties).\n    *   @param err [Error] if an error occurred, this value will be filled\n    * @see AWS.Credentials.get\n    */\n   refresh: function refresh(callback) {\n     this.coalesceRefresh(callback || AWS.util.fn.callback);\n   },\n\n   /**\n    * @api private\n    * @param callback\n    */\n   load: function load(callback) {\n     var self = this;\n     self.createClients();\n     self.data = null;\n     self._identityId = null;\n     self.getId(function(err) {\n       if (!err) {\n         if (!self.params.RoleArn) {\n           self.getCredentialsForIdentity(callback);\n         } else {\n           self.getCredentialsFromSTS(callback);\n         }\n       } else {\n         self.clearIdOnNotAuthorized(err);\n         callback(err);\n       }\n     });\n   },\n\n   /**\n    * Clears the cached Cognito ID associated with the currently configured\n    * identity pool ID. Use this to manually invalidate your cache if\n    * the identity pool ID was deleted.\n    */\n   clearCachedId: function clearCache() {\n     this._identityId = null;\n     delete this.params.IdentityId;\n\n     var poolId = this.params.IdentityPoolId;\n     var loginId = this.params.LoginId || '';\n     delete this.storage[this.localStorageKey.id + poolId + loginId];\n     delete this.storage[this.localStorageKey.providers + poolId + loginId];\n   },\n\n   /**\n    * @api private\n    */\n   clearIdOnNotAuthorized: function clearIdOnNotAuthorized(err) {\n     var self = this;\n     if (err.code == 'NotAuthorizedException') {\n       self.clearCachedId();\n     }\n   },\n\n   /**\n    * Retrieves a Cognito ID, loading from cache if it was already retrieved\n    * on this device.\n    *\n    * @callback callback function(err, identityId)\n    *   @param err [Error, null] an error object if the call failed or null if\n    *     it succeeded.\n    *   @param identityId [String, null] if successful, the callback will return\n    *     the Cognito ID.\n    * @note If not loaded explicitly, the Cognito ID is loaded and stored in\n    *   localStorage in the browser environment of a device.\n    * @api private\n    */\n   getId: function getId(callback) {\n     var self = this;\n     if (typeof self.params.IdentityId === 'string') {\n       return callback(null, self.params.IdentityId);\n     }\n\n     self.cognito.getId(function(err, data) {\n       if (!err && data.IdentityId) {\n         self.params.IdentityId = data.IdentityId;\n         callback(null, data.IdentityId);\n       } else {\n         callback(err);\n       }\n     });\n   },\n\n\n   /**\n    * @api private\n    */\n   loadCredentials: function loadCredentials(data, credentials) {\n     if (!data || !credentials) return;\n     credentials.expired = false;\n     credentials.accessKeyId = data.Credentials.AccessKeyId;\n     credentials.secretAccessKey = data.Credentials.SecretKey;\n     credentials.sessionToken = data.Credentials.SessionToken;\n     credentials.expireTime = data.Credentials.Expiration;\n   },\n\n   /**\n    * @api private\n    */\n   getCredentialsForIdentity: function getCredentialsForIdentity(callback) {\n     var self = this;\n     self.cognito.getCredentialsForIdentity(function(err, data) {\n       if (!err) {\n         self.cacheId(data);\n         self.data = data;\n         self.loadCredentials(self.data, self);\n       } else {\n         self.clearIdOnNotAuthorized(err);\n       }\n       callback(err);\n     });\n   },\n\n   /**\n    * @api private\n    */\n   getCredentialsFromSTS: function getCredentialsFromSTS(callback) {\n     var self = this;\n     self.cognito.getOpenIdToken(function(err, data) {\n       if (!err) {\n         self.cacheId(data);\n         self.params.WebIdentityToken = data.Token;\n         self.webIdentityCredentials.refresh(function(webErr) {\n           if (!webErr) {\n             self.data = self.webIdentityCredentials.data;\n             self.sts.credentialsFrom(self.data, self);\n           }\n           callback(webErr);\n         });\n       } else {\n         self.clearIdOnNotAuthorized(err);\n         callback(err);\n       }\n     });\n   },\n\n   /**\n    * @api private\n    */\n   loadCachedId: function loadCachedId() {\n     var self = this;\n\n     // in the browser we source default IdentityId from localStorage\n     if (AWS.util.isBrowser() && !self.params.IdentityId) {\n       var id = self.getStorage('id');\n       if (id && self.params.Logins) {\n         var actualProviders = Object.keys(self.params.Logins);\n         var cachedProviders =\n           (self.getStorage('providers') || '').split(',');\n\n         // only load ID if at least one provider used this ID before\n         var intersect = cachedProviders.filter(function(n) {\n           return actualProviders.indexOf(n) !== -1;\n         });\n         if (intersect.length !== 0) {\n           self.params.IdentityId = id;\n         }\n       } else if (id) {\n         self.params.IdentityId = id;\n       }\n     }\n   },\n\n   /**\n    * @api private\n    */\n   createClients: function() {\n     var clientConfig = this._clientConfig;\n     this.webIdentityCredentials = this.webIdentityCredentials ||\n       new AWS.WebIdentityCredentials(this.params, clientConfig);\n     if (!this.cognito) {\n       var cognitoConfig = AWS.util.merge({}, clientConfig);\n       cognitoConfig.params = this.params;\n       this.cognito = new CognitoIdentity(cognitoConfig);\n     }\n     this.sts = this.sts || new STS(clientConfig);\n   },\n\n   /**\n    * @api private\n    */\n   cacheId: function cacheId(data) {\n     this._identityId = data.IdentityId;\n     this.params.IdentityId = this._identityId;\n\n     // cache this IdentityId in browser localStorage if possible\n     if (AWS.util.isBrowser()) {\n       this.setStorage('id', data.IdentityId);\n\n       if (this.params.Logins) {\n         this.setStorage('providers', Object.keys(this.params.Logins).join(','));\n       }\n     }\n   },\n\n   /**\n    * @api private\n    */\n   getStorage: function getStorage(key) {\n     return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')];\n   },\n\n   /**\n    * @api private\n    */\n   setStorage: function setStorage(key, val) {\n     try {\n       this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')] = val;\n     } catch (_) {}\n   },\n\n   /**\n    * @api private\n    */\n   storage: (function() {\n     try {\n       var storage = AWS.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === 'object' ?\n           window.localStorage : {};\n\n       // Test set/remove which would throw an error in Safari's private browsing\n       storage['aws.test-storage'] = 'foobar';\n       delete storage['aws.test-storage'];\n\n       return storage;\n     } catch (_) {\n       return {};\n     }\n   })()\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n  '../../clients/cognitoidentity': _req0,\n  '../../clients/sts': _req1,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}