{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/assets/src/utils/NumberCounter.ts"],"names":["NumberCounter","constructor","config","currentNumber","startNumber","endNumber","timer","isIncreasing","duration","onUpdate","onComplete","update","dt","delta","Math","abs"],"mappings":";;;iBAQaA,a;;;;;;;;;;;;;+BAAAA,a,GAAN,MAAMA,aAAN,CAAoB;AAUvBC,QAAAA,WAAW,CAACC,MAAD,EAA8B;AAAA,eATjCC,aASiC;AAAA,eARjCC,WAQiC;AAAA,eAPjCC,SAOiC;AAAA,eANjCC,KAMiC;AAAA,eALjCC,YAKiC;AAAA,eAJjCC,QAIiC;AAAA,eAHjCC,QAGiC;AAAA,eAFjCC,UAEiC;AACrC,eAAKP,aAAL,GAAqBD,MAAM,CAACE,WAA5B;AACA,eAAKA,WAAL,GAAmBF,MAAM,CAACE,WAA1B;AACA,eAAKC,SAAL,GAAiBH,MAAM,CAACG,SAAxB;AACA,eAAKC,KAAL,GAAa,CAAb;AACA,eAAKC,YAAL,GAAoBL,MAAM,CAACG,SAAP,GAAmBH,MAAM,CAACE,WAA9C;AACA,eAAKI,QAAL,GAAgBN,MAAM,CAACM,QAAvB;AACA,eAAKC,QAAL,GAAgBP,MAAM,CAACO,QAAvB;AACA,eAAKC,UAAL,GAAkBR,MAAM,CAACQ,UAAzB;AACH;;AAEDC,QAAAA,MAAM,CAACC,EAAD,EAAa;AACf,cAAI,KAAKN,KAAL,GAAa,KAAKE,QAAtB,EAAgC;AAC5B,gBAAMK,KAAK,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAKV,SAAL,GAAiB,KAAKD,WAA/B,IAA8CQ,EAA9C,GAAmD,KAAKJ,QAAtE;AACA,iBAAKL,aAAL,IAAsB,KAAKI,YAAL,GAAoBM,KAApB,GAA4B,CAACA,KAAnD;AACA,iBAAKP,KAAL,IAAcM,EAAd;;AACA,gBAAK,KAAKL,YAAL,IAAqB,KAAKJ,aAAL,GAAqB,KAAKE,SAAhD,IACC,CAAC,KAAKE,YAAN,IAAsB,KAAKJ,aAAL,GAAqB,KAAKE,SADrD,EACiE;AAC7D,mBAAKF,aAAL,GAAqB,KAAKE,SAA1B;AACH;;AACD,gBAAI,KAAKI,QAAT,EAAmB;AACf,mBAAKA,QAAL,CAAc,KAAKN,aAAnB;AACH;;AACD,gBAAK,KAAKI,YAAL,IAAqB,KAAKJ,aAAL,KAAuB,KAAKE,SAAlD,IACC,CAAC,KAAKE,YAAN,IAAsB,KAAKJ,aAAL,KAAuB,KAAKC,WADvD,EACqE;AACjE,kBAAI,KAAKM,UAAT,EAAqB;AACjB,qBAAKA,UAAL;AACH;;AACD,mBAAKH,YAAL,GAAoB,CAAC,KAAKA,YAA1B;AACA,mBAAKD,KAAL,GAAa,CAAb;AACH;AACJ;AACJ;;AA1CsB,O","sourcesContent":["interface NumberCounterConfig {\n    startNumber: number;\n    endNumber: number;\n    duration: number;\n    onUpdate?: (currentNumber: number) => void;\n    onComplete?: () => void;\n}\n\nexport class NumberCounter {\n    private currentNumber: number;\n    private startNumber: number;\n    private endNumber: number;\n    private timer: number;\n    private isIncreasing: boolean;\n    private duration: number;\n    private onUpdate?: (currentNumber: number) => void;\n    private onComplete?: () => void;\n\n    constructor(config: NumberCounterConfig) {\n        this.currentNumber = config.startNumber;\n        this.startNumber = config.startNumber;\n        this.endNumber = config.endNumber;\n        this.timer = 0;\n        this.isIncreasing = config.endNumber > config.startNumber;\n        this.duration = config.duration;\n        this.onUpdate = config.onUpdate;\n        this.onComplete = config.onComplete;\n    }\n\n    update(dt: number) {\n        if (this.timer < this.duration) {\n            const delta = Math.abs(this.endNumber - this.startNumber) * dt / this.duration;\n            this.currentNumber += this.isIncreasing ? delta : -delta;\n            this.timer += dt;\n            if ((this.isIncreasing && this.currentNumber > this.endNumber) ||\n                (!this.isIncreasing && this.currentNumber < this.endNumber)) {\n                this.currentNumber = this.endNumber;\n            }\n            if (this.onUpdate) {\n                this.onUpdate(this.currentNumber);\n            }\n            if ((this.isIncreasing && this.currentNumber === this.endNumber) ||\n                (!this.isIncreasing && this.currentNumber === this.startNumber)) {\n                if (this.onComplete) {\n                    this.onComplete();\n                }\n                this.isIncreasing = !this.isIncreasing;\n                this.timer = 0;\n            }\n        }\n    }\n}"]}