{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/credentials/process_credentials.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","AWS","proc","iniLoader","util","ProcessCredentials","inherit","Credentials","constructor","options","call","filename","profile","process","env","AWS_PROFILE","defaultProfile","get","callback","fn","noop","load","self","profiles","getProfilesFromSharedConfig","Object","keys","length","error","Error","code","loadViaCredentialProcess","err","data","expired","accessKeyId","AccessKeyId","secretAccessKey","SecretAccessKey","sessionToken","SessionToken","Expiration","expireTime","Date","exec","stdOut","stdErr","credData","JSON","parse","currentTime","date","getDate","Version","message","refresh","clearCachedFiles","coalesceRefresh","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from 'child_process';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n var proc = require('child_process');\n var iniLoader = AWS.util.iniLoader;\n\n /**\n  * Represents credentials loaded from shared credentials file\n  * (defaulting to ~/.aws/credentials or defined by the\n  * `AWS_SHARED_CREDENTIALS_FILE` environment variable).\n  *\n  * ## Using process credentials\n  *\n  * The credentials file can specify a credential provider that executes\n  * a given process and attempts to read its stdout to recieve a JSON payload\n  * containing the credentials:\n  *\n  *     [default]\n  *     credential_process = /usr/bin/credential_proc\n  *\n  * Automatically handles refreshing credentials if an Expiration time is\n  * provided in the credentials payload. Credentials supplied in the same profile\n  * will take precedence over the credential_process.\n  *\n  * Sourcing credentials from an external process can potentially be dangerous,\n  * so proceed with caution. Other credential providers should be preferred if\n  * at all possible. If using this option, you should make sure that the shared\n  * credentials file is as locked down as possible using security best practices\n  * for your operating system.\n  *\n  * ## Using custom profiles\n  *\n  * The SDK supports loading credentials for separate profiles. This can be done\n  * in two ways:\n  *\n  * 1. Set the `AWS_PROFILE` environment variable in your process prior to\n  *    loading the SDK.\n  * 2. Directly load the AWS.ProcessCredentials provider:\n  *\n  * ```javascript\n  * var creds = new AWS.ProcessCredentials({profile: 'myprofile'});\n  * AWS.config.credentials = creds;\n  * ```\n  *\n  * @!macro nobrowser\n  */\n AWS.ProcessCredentials = AWS.util.inherit(AWS.Credentials, {\n   /**\n    * Creates a new ProcessCredentials object.\n    *\n    * @param options [map] a set of options\n    * @option options profile [String] (AWS_PROFILE env var or 'default')\n    *   the name of the profile to load.\n    * @option options filename [String] ('~/.aws/credentials' or defined by\n    *   AWS_SHARED_CREDENTIALS_FILE process env var)\n    *   the filename to use when loading credentials.\n    * @option options callback [Function] (err) Credentials are eagerly loaded\n    *   by the constructor. When the callback is called with no error, the\n    *   credentials have been loaded successfully.\n    */\n   constructor: function ProcessCredentials(options) {\n     AWS.Credentials.call(this);\n\n     options = options || {};\n\n     this.filename = options.filename;\n     this.profile = options.profile || process.env.AWS_PROFILE || AWS.util.defaultProfile;\n     this.get(options.callback || AWS.util.fn.noop);\n   },\n\n   /**\n    * @api private\n    */\n   load: function load(callback) {\n     var self = this;\n     try {\n       var profiles = AWS.util.getProfilesFromSharedConfig(iniLoader, this.filename);\n       var profile = profiles[this.profile] || {};\n\n       if (Object.keys(profile).length === 0) {\n         throw AWS.util.error(\n           new Error('Profile ' + this.profile + ' not found'),\n           { code: 'ProcessCredentialsProviderFailure' }\n         );\n       }\n\n       if (profile['credential_process']) {\n         this.loadViaCredentialProcess(profile, function(err, data) {\n           if (err) {\n             callback(err, null);\n           } else {\n             self.expired = false;\n             self.accessKeyId = data.AccessKeyId;\n             self.secretAccessKey = data.SecretAccessKey;\n             self.sessionToken = data.SessionToken;\n             if (data.Expiration) {\n               self.expireTime = new Date(data.Expiration);\n             }\n             callback(null);\n           }\n         });\n       } else {\n         throw AWS.util.error(\n           new Error('Profile ' + this.profile + ' did not include credential process'),\n           { code: 'ProcessCredentialsProviderFailure' }\n         );\n       }\n     } catch (err) {\n       callback(err);\n     }\n   },\n\n   /**\n   * Executes the credential_process and retrieves\n   * credentials from the output\n   * @api private\n   * @param profile [map] credentials profile\n   * @throws ProcessCredentialsProviderFailure\n   */\n   loadViaCredentialProcess: function loadViaCredentialProcess(profile, callback) {\n     proc.exec(profile['credential_process'], { env: process.env }, function(err, stdOut, stdErr) {\n       if (err) {\n         callback(AWS.util.error(\n           new Error('credential_process returned error'),\n           { code: 'ProcessCredentialsProviderFailure'}\n         ), null);\n       } else {\n         try {\n           var credData = JSON.parse(stdOut);\n           if (credData.Expiration) {\n             var currentTime = AWS.util.date.getDate();\n             var expireTime = new Date(credData.Expiration);\n             if (expireTime < currentTime) {\n               throw Error('credential_process returned expired credentials');\n             }\n           }\n\n           if (credData.Version !== 1) {\n             throw Error('credential_process does not return Version == 1');\n           }\n           callback(null, credData);\n         } catch (err) {\n           callback(AWS.util.error(\n             new Error(err.message),\n             { code: 'ProcessCredentialsProviderFailure'}\n           ), null);\n         }\n       }\n     });\n   },\n\n   /**\n    * Loads the credentials from the credential process\n    *\n    * @callback callback function(err)\n    *   Called after the credential process has been executed. When this\n    *   callback is called with no error, it means that the credentials\n    *   information has been loaded into the object (as the `accessKeyId`,\n    *   `secretAccessKey`, and `sessionToken` properties).\n    *   @param err [Error] if an error occurred, this value will be filled\n    * @see get\n    */\n   refresh: function refresh(callback) {\n     iniLoader.clearCachedFiles();\n     this.coalesceRefresh(callback || AWS.util.fn.callback);\n   }\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n  'child_process': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}