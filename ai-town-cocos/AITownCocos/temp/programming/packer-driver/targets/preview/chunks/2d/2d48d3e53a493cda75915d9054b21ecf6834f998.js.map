{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/_createCtor.js"],"names":["createCtor","Ctor","args","arguments","length","thisBinding","baseCreate","prototype","result","apply","isObject"],"mappings":";;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,UAAT,CAAoBC,IAApB,EAA0B;AACxB,WAAO,YAAW;AAChB;AACA;AACA;AACA,UAAIC,IAAI,GAAGC,SAAX;;AACA,cAAQD,IAAI,CAACE,MAAb;AACE,aAAK,CAAL;AAAQ,iBAAO,IAAIH,IAAJ,EAAP;;AACR,aAAK,CAAL;AAAQ,iBAAO,IAAIA,IAAJ,CAASC,IAAI,CAAC,CAAD,CAAb,CAAP;;AACR,aAAK,CAAL;AAAQ,iBAAO,IAAID,IAAJ,CAASC,IAAI,CAAC,CAAD,CAAb,EAAkBA,IAAI,CAAC,CAAD,CAAtB,CAAP;;AACR,aAAK,CAAL;AAAQ,iBAAO,IAAID,IAAJ,CAASC,IAAI,CAAC,CAAD,CAAb,EAAkBA,IAAI,CAAC,CAAD,CAAtB,EAA2BA,IAAI,CAAC,CAAD,CAA/B,CAAP;;AACR,aAAK,CAAL;AAAQ,iBAAO,IAAID,IAAJ,CAASC,IAAI,CAAC,CAAD,CAAb,EAAkBA,IAAI,CAAC,CAAD,CAAtB,EAA2BA,IAAI,CAAC,CAAD,CAA/B,EAAoCA,IAAI,CAAC,CAAD,CAAxC,CAAP;;AACR,aAAK,CAAL;AAAQ,iBAAO,IAAID,IAAJ,CAASC,IAAI,CAAC,CAAD,CAAb,EAAkBA,IAAI,CAAC,CAAD,CAAtB,EAA2BA,IAAI,CAAC,CAAD,CAA/B,EAAoCA,IAAI,CAAC,CAAD,CAAxC,EAA6CA,IAAI,CAAC,CAAD,CAAjD,CAAP;;AACR,aAAK,CAAL;AAAQ,iBAAO,IAAID,IAAJ,CAASC,IAAI,CAAC,CAAD,CAAb,EAAkBA,IAAI,CAAC,CAAD,CAAtB,EAA2BA,IAAI,CAAC,CAAD,CAA/B,EAAoCA,IAAI,CAAC,CAAD,CAAxC,EAA6CA,IAAI,CAAC,CAAD,CAAjD,EAAsDA,IAAI,CAAC,CAAD,CAA1D,CAAP;;AACR,aAAK,CAAL;AAAQ,iBAAO,IAAID,IAAJ,CAASC,IAAI,CAAC,CAAD,CAAb,EAAkBA,IAAI,CAAC,CAAD,CAAtB,EAA2BA,IAAI,CAAC,CAAD,CAA/B,EAAoCA,IAAI,CAAC,CAAD,CAAxC,EAA6CA,IAAI,CAAC,CAAD,CAAjD,EAAsDA,IAAI,CAAC,CAAD,CAA1D,EAA+DA,IAAI,CAAC,CAAD,CAAnE,CAAP;AARV;;AAUA,UAAIG,WAAW,GAAGC,UAAU,CAACL,IAAI,CAACM,SAAN,CAA5B;AAAA,UACIC,MAAM,GAAGP,IAAI,CAACQ,KAAL,CAAWJ,WAAX,EAAwBH,IAAxB,CADb,CAfgB,CAkBhB;AACA;;AACA,aAAOQ,QAAQ,CAACF,MAAD,CAAR,GAAmBA,MAAnB,GAA4BH,WAAnC;AACD,KArBD;AAsBD;;;;AAlCMC,MAAAA,U;;AACAI,MAAAA,Q;;;yBAmCQV,U","sourcesContent":["import baseCreate from './_baseCreate.js';\nimport isObject from './isObject.js';\n\n/**\n * Creates a function that produces an instance of `Ctor` regardless of\n * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n *\n * @private\n * @param {Function} Ctor The constructor to wrap.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createCtor(Ctor) {\n  return function() {\n    // Use a `switch` statement to work with class constructors. See\n    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n    // for more details.\n    var args = arguments;\n    switch (args.length) {\n      case 0: return new Ctor;\n      case 1: return new Ctor(args[0]);\n      case 2: return new Ctor(args[0], args[1]);\n      case 3: return new Ctor(args[0], args[1], args[2]);\n      case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n    }\n    var thisBinding = baseCreate(Ctor.prototype),\n        result = Ctor.apply(thisBinding, args);\n\n    // Mimic the constructor's `return` behavior.\n    // See https://es5.github.io/#x13.2.2 for more details.\n    return isObject(result) ? result : thisBinding;\n  };\n}\n\nexport default createCtor;\n"]}