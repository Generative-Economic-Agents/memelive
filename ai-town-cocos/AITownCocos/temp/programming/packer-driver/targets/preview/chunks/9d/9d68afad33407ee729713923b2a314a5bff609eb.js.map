{"version":3,"sources":["file:///Users/feiwang/workSpace/AITown/cutepet/node_modules/lodash-es/_updateWrapDetails.js"],"names":["updateWrapDetails","details","bitmask","arrayEach","wrapFlags","pair","value","arrayIncludes","push","sort","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_FLAG","WRAP_CURRY_RIGHT_FLAG","WRAP_PARTIAL_FLAG","WRAP_PARTIAL_RIGHT_FLAG","WRAP_ARY_FLAG","WRAP_REARG_FLAG","WRAP_FLIP_FLAG"],"mappings":";;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,iBAAT,CAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AAC3CC,IAAAA,SAAS,CAACC,SAAD,EAAY,UAASC,IAAT,EAAe;AAClC,UAAIC,KAAK,GAAG,OAAOD,IAAI,CAAC,CAAD,CAAvB;;AACA,UAAKH,OAAO,GAAGG,IAAI,CAAC,CAAD,CAAf,IAAuB,CAACE,aAAa,CAACN,OAAD,EAAUK,KAAV,CAAzC,EAA2D;AACzDL,QAAAA,OAAO,CAACO,IAAR,CAAaF,KAAb;AACD;AACF,KALQ,CAAT;AAMA,WAAOL,OAAO,CAACQ,IAAR,EAAP;AACD;;;;AA3CMN,MAAAA,S;;AACAI,MAAAA,a;;;AAEP;AACIG,MAAAA,c,GAAiB,C;AACjBC,MAAAA,kB,GAAqB,C;AACrBC,MAAAA,e,GAAkB,C;AAClBC,MAAAA,qB,GAAwB,E;AACxBC,MAAAA,iB,GAAoB,E;AACpBC,MAAAA,uB,GAA0B,E;AAC1BC,MAAAA,a,GAAgB,G;AAChBC,MAAAA,e,GAAkB,G;AAClBC,MAAAA,c,GAAiB,G;AAErB;;AACId,MAAAA,S,GAAY,CACd,CAAC,KAAD,EAAQY,aAAR,CADc,EAEd,CAAC,MAAD,EAASN,cAAT,CAFc,EAGd,CAAC,SAAD,EAAYC,kBAAZ,CAHc,EAId,CAAC,OAAD,EAAUC,eAAV,CAJc,EAKd,CAAC,YAAD,EAAeC,qBAAf,CALc,EAMd,CAAC,MAAD,EAASK,cAAT,CANc,EAOd,CAAC,SAAD,EAAYJ,iBAAZ,CAPc,EAQd,CAAC,cAAD,EAAiBC,uBAAjB,CARc,EASd,CAAC,OAAD,EAAUE,eAAV,CATc,C;;yBA8BDjB,iB","sourcesContent":["import arrayEach from './_arrayEach.js';\nimport arrayIncludes from './_arrayIncludes.js';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256,\n    WRAP_FLIP_FLAG = 512;\n\n/** Used to associate wrap methods with their bit flags. */\nvar wrapFlags = [\n  ['ary', WRAP_ARY_FLAG],\n  ['bind', WRAP_BIND_FLAG],\n  ['bindKey', WRAP_BIND_KEY_FLAG],\n  ['curry', WRAP_CURRY_FLAG],\n  ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n  ['flip', WRAP_FLIP_FLAG],\n  ['partial', WRAP_PARTIAL_FLAG],\n  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n  ['rearg', WRAP_REARG_FLAG]\n];\n\n/**\n * Updates wrapper `details` based on `bitmask` flags.\n *\n * @private\n * @returns {Array} details The details to modify.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @returns {Array} Returns `details`.\n */\nfunction updateWrapDetails(details, bitmask) {\n  arrayEach(wrapFlags, function(pair) {\n    var value = '_.' + pair[0];\n    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n      details.push(value);\n    }\n  });\n  return details.sort();\n}\n\nexport default updateWrapDetails;\n"]}