{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/_createPadding.js"],"names":["createPadding","length","chars","undefined","baseToString","charsLength","baseRepeat","result","nativeCeil","stringSize","hasUnicode","castSlice","stringToArray","join","slice","Math","ceil"],"mappings":";;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,aAAT,CAAuBC,MAAvB,EAA+BC,KAA/B,EAAsC;AACpCA,IAAAA,KAAK,GAAGA,KAAK,KAAKC,SAAV,GAAsB,GAAtB,GAA4BC,YAAY,CAACF,KAAD,CAAhD;AAEA,QAAIG,WAAW,GAAGH,KAAK,CAACD,MAAxB;;AACA,QAAII,WAAW,GAAG,CAAlB,EAAqB;AACnB,aAAOA,WAAW,GAAGC,UAAU,CAACJ,KAAD,EAAQD,MAAR,CAAb,GAA+BC,KAAjD;AACD;;AACD,QAAIK,MAAM,GAAGD,UAAU,CAACJ,KAAD,EAAQM,UAAU,CAACP,MAAM,GAAGQ,UAAU,CAACP,KAAD,CAApB,CAAlB,CAAvB;AACA,WAAOQ,UAAU,CAACR,KAAD,CAAV,GACHS,SAAS,CAACC,aAAa,CAACL,MAAD,CAAd,EAAwB,CAAxB,EAA2BN,MAA3B,CAAT,CAA4CY,IAA5C,CAAiD,EAAjD,CADG,GAEHN,MAAM,CAACO,KAAP,CAAa,CAAb,EAAgBb,MAAhB,CAFJ;AAGD;;;;AA9BMK,MAAAA,U;;AACAF,MAAAA,Y;;AACAO,MAAAA,S;;AACAD,MAAAA,U;;AACAD,MAAAA,U;;AACAG,MAAAA,a;;;AAEP;AACIJ,MAAAA,U,GAAaO,IAAI,CAACC,I;;yBAwBPhB,a","sourcesContent":["import baseRepeat from './_baseRepeat.js';\nimport baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport hasUnicode from './_hasUnicode.js';\nimport stringSize from './_stringSize.js';\nimport stringToArray from './_stringToArray.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil;\n\n/**\n * Creates the padding for `string` based on `length`. The `chars` string\n * is truncated if the number of characters exceeds `length`.\n *\n * @private\n * @param {number} length The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padding for `string`.\n */\nfunction createPadding(length, chars) {\n  chars = chars === undefined ? ' ' : baseToString(chars);\n\n  var charsLength = chars.length;\n  if (charsLength < 2) {\n    return charsLength ? baseRepeat(chars, length) : chars;\n  }\n  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n  return hasUnicode(chars)\n    ? castSlice(stringToArray(result), 0, length).join('')\n    : result.slice(0, length);\n}\n\nexport default createPadding;\n"]}