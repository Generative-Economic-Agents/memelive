{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/config_regional_endpoint.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","AWS","validateRegionalEndpointsFlagValue","configValue","errorOptions","undefined","indexOf","toLowerCase","util","error","Error","resolveRegionalEndpointsFlag","originalConfig","options","resolved","clientConfig","code","message","isNode","Object","prototype","hasOwnProperty","call","process","env","envFlag","profile","profiles","getProfilesFromSharedConfig","iniLoader","AWS_PROFILE","defaultProfile","e","sharedConfig","fileFlag","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './core';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('./core');\n /**\n  * @api private\n  */\n function validateRegionalEndpointsFlagValue(configValue, errorOptions) {\n   if (typeof configValue !== 'string') return undefined;\n   else if (['legacy', 'regional'].indexOf(configValue.toLowerCase()) >= 0) {\n     return configValue.toLowerCase();\n   } else {\n     throw AWS.util.error(new Error(), errorOptions);\n   }\n }\n\n /**\n  * Resolve the configuration value for regional endpoint from difference sources: client\n  * config, environmental variable, shared config file. Value can be case-insensitive\n  * 'legacy' or 'reginal'.\n  * @param originalConfig user-supplied config object to resolve\n  * @param options a map of config property names from individual configuration source\n  *  - env: name of environmental variable that refers to the config\n  *  - sharedConfig: name of shared configuration file property that refers to the config\n  *  - clientConfig: name of client configuration property that refers to the config\n  *\n  * @api private\n  */\n function resolveRegionalEndpointsFlag(originalConfig, options) {\n   originalConfig = originalConfig || {};\n   //validate config value\n   var resolved;\n   if (originalConfig[options.clientConfig]) {\n     resolved = validateRegionalEndpointsFlagValue(originalConfig[options.clientConfig], {\n       code: 'InvalidConfiguration',\n       message: 'invalid \"' + options.clientConfig + '\" configuration. Expect \"legacy\" ' +\n       ' or \"regional\". Got \"' + originalConfig[options.clientConfig] + '\".'\n     });\n     if (resolved) return resolved;\n   }\n   if (!AWS.util.isNode()) return resolved;\n   //validate environmental variable\n   if (Object.prototype.hasOwnProperty.call(process.env, options.env)) {\n     var envFlag = process.env[options.env];\n     resolved = validateRegionalEndpointsFlagValue(envFlag, {\n       code: 'InvalidEnvironmentalVariable',\n       message: 'invalid ' + options.env + ' environmental variable. Expect \"legacy\" ' +\n       ' or \"regional\". Got \"' + process.env[options.env] + '\".'\n     });\n     if (resolved) return resolved;\n   }\n   //validate shared config file\n   var profile = {};\n   try {\n     var profiles = AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader);\n     profile = profiles[process.env.AWS_PROFILE || AWS.util.defaultProfile];\n   } catch (e) {};\n   if (profile && Object.prototype.hasOwnProperty.call(profile, options.sharedConfig)) {\n     var fileFlag = profile[options.sharedConfig];\n     resolved = validateRegionalEndpointsFlagValue(fileFlag, {\n       code: 'InvalidConfiguration',\n       message: 'invalid ' + options.sharedConfig + ' profile config. Expect \"legacy\" ' +\n       ' or \"regional\". Got \"' + profile[options.sharedConfig] + '\".'\n     });\n     if (resolved) return resolved;\n   }\n   return resolved;\n }\n\n module.exports = resolveRegionalEndpointsFlag;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './core': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}