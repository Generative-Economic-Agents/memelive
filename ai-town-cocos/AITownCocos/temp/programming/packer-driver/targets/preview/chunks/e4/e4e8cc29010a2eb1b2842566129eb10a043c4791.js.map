{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/credentials/file_system_credentials.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","AWS","FileSystemCredentials","util","inherit","Credentials","constructor","filename","call","get","refresh","callback","fn","creds","JSON","parse","readFileSync","accessKeyId","secretAccessKey","error","Error","code","expired","err","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;;8BAEHA,Y,GAAe,cAAYC,G;;AACjCH,MAAAA,UAAU,CAACI,MAAX,CAAkBF,YAAlB,EAAgC,UAAUG,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC,YAAIC,GAAG,GAAGJ,OAAO,CAAC,SAAD,CAAjB;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCI,QAAAA,GAAG,CAACC,qBAAJ,GAA4BD,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBH,GAAG,CAACI,WAArB,EAAkC;AAE5D;AACH;AACA;AACA;AACA;AACA;AACGC,UAAAA,WAAW,EAAE,SAASJ,qBAAT,CAA+BK,QAA/B,EAAyC;AACpDN,YAAAA,GAAG,CAACI,WAAJ,CAAgBG,IAAhB,CAAqB,IAArB;AACA,iBAAKD,QAAL,GAAgBA,QAAhB;AACA,iBAAKE,GAAL,CAAS,YAAW,CAAE,CAAtB;AACD,WAZ2D;;AAc5D;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGC,UAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClC,gBAAI,CAACA,QAAL,EAAeA,QAAQ,GAAGV,GAAG,CAACE,IAAJ,CAASS,EAAT,CAAYD,QAAvB;;AACf,gBAAI;AACF,kBAAIE,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWd,GAAG,CAACE,IAAJ,CAASa,YAAT,CAAsB,KAAKT,QAA3B,CAAX,CAAZ;AACAN,cAAAA,GAAG,CAACI,WAAJ,CAAgBG,IAAhB,CAAqB,IAArB,EAA2BK,KAA3B;;AACA,kBAAI,CAAC,KAAKI,WAAN,IAAqB,CAAC,KAAKC,eAA/B,EAAgD;AAC9C,sBAAMjB,GAAG,CAACE,IAAJ,CAASgB,KAAT,CACJ,IAAIC,KAAJ,CAAU,4BAA4B,KAAKb,QAA3C,CADI,EAEN;AAAEc,kBAAAA,IAAI,EAAE;AAAR,iBAFM,CAAN;AAID;;AACD,mBAAKC,OAAL,GAAe,KAAf;AACAX,cAAAA,QAAQ;AACT,aAXD,CAWE,OAAOY,GAAP,EAAY;AACZZ,cAAAA,QAAQ,CAACY,GAAD,CAAR;AACD;AACF;AAzC2D,SAAlC,CAA5B,CA5B0F,CA0E3F;;AAEA,2BAAAC,WAAW,GAAG1B,MAAM,CAACF,OAArB;AAGC,OA/ED,EA+EG,OAAO;AACR,mBAAWJ;AADH,OAAP,CA/EH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n\n /**\n  * Represents credentials from a JSON file on disk.\n  * If the credentials expire, the SDK can {refresh} the credentials\n  * from the file.\n  *\n  * The format of the file should be similar to the options passed to\n  * {AWS.Config}:\n  *\n  * ```javascript\n  * {accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'optional'}\n  * ```\n  *\n  * @example Loading credentials from disk\n  *   var creds = new AWS.FileSystemCredentials('./configuration.json');\n  *   creds.accessKeyId == 'AKID'\n  *\n  * @!attribute filename\n  *   @readonly\n  *   @return [String] the path to the JSON file on disk containing the\n  *     credentials.\n  * @!macro nobrowser\n  */\n AWS.FileSystemCredentials = AWS.util.inherit(AWS.Credentials, {\n\n   /**\n    * @overload AWS.FileSystemCredentials(filename)\n    *   Creates a new FileSystemCredentials object from a filename\n    *\n    *   @param filename [String] the path on disk to the JSON file to load.\n    */\n   constructor: function FileSystemCredentials(filename) {\n     AWS.Credentials.call(this);\n     this.filename = filename;\n     this.get(function() {});\n   },\n\n   /**\n    * Loads the credentials from the {filename} on disk.\n    *\n    * @callback callback function(err)\n    *   Called after the JSON file on disk is read and parsed. When this callback\n    *   is called with no error, it means that the credentials information\n    *   has been loaded into the object (as the `accessKeyId`, `secretAccessKey`,\n    *   and `sessionToken` properties).\n    *   @param err [Error] if an error occurred, this value will be filled\n    * @see get\n    */\n   refresh: function refresh(callback) {\n     if (!callback) callback = AWS.util.fn.callback;\n     try {\n       var creds = JSON.parse(AWS.util.readFileSync(this.filename));\n       AWS.Credentials.call(this, creds);\n       if (!this.accessKeyId || !this.secretAccessKey) {\n         throw AWS.util.error(\n           new Error('Credentials not set in ' + this.filename),\n         { code: 'FileSystemCredentialsProviderFailure' }\n         );\n       }\n       this.expired = false;\n       callback();\n     } catch (err) {\n       callback(err);\n     }\n   }\n\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}