{"version":3,"sources":["file:///Users/feiwang/workSpace/AITown/cutepet/node_modules/lodash-es/_baseIntersection.js"],"names":["baseIntersection","arrays","iteratee","comparator","includes","arrayIncludesWith","arrayIncludes","length","othLength","othIndex","caches","Array","maxLength","Infinity","result","array","arrayMap","baseUnary","nativeMin","SetCache","undefined","index","seen","outer","value","computed","cacheHas","cache","push","Math","min"],"mappings":";;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,gBAAT,CAA0BC,MAA1B,EAAkCC,QAAlC,EAA4CC,UAA5C,EAAwD;AACtD,QAAIC,QAAQ,GAAGD,UAAU,GAAGE,iBAAH,GAAuBC,aAAhD;AAAA,QACIC,MAAM,GAAGN,MAAM,CAAC,CAAD,CAAN,CAAUM,MADvB;AAAA,QAEIC,SAAS,GAAGP,MAAM,CAACM,MAFvB;AAAA,QAGIE,QAAQ,GAAGD,SAHf;AAAA,QAIIE,MAAM,GAAGC,KAAK,CAACH,SAAD,CAJlB;AAAA,QAKII,SAAS,GAAGC,QALhB;AAAA,QAMIC,MAAM,GAAG,EANb;;AAQA,WAAOL,QAAQ,EAAf,EAAmB;AACjB,UAAIM,KAAK,GAAGd,MAAM,CAACQ,QAAD,CAAlB;;AACA,UAAIA,QAAQ,IAAIP,QAAhB,EAA0B;AACxBa,QAAAA,KAAK,GAAGC,QAAQ,CAACD,KAAD,EAAQE,SAAS,CAACf,QAAD,CAAjB,CAAhB;AACD;;AACDU,MAAAA,SAAS,GAAGM,SAAS,CAACH,KAAK,CAACR,MAAP,EAAeK,SAAf,CAArB;AACAF,MAAAA,MAAM,CAACD,QAAD,CAAN,GAAmB,CAACN,UAAD,KAAgBD,QAAQ,IAAKK,MAAM,IAAI,GAAV,IAAiBQ,KAAK,CAACR,MAAN,IAAgB,GAA9D,IACf,IAAIY,QAAJ,CAAaV,QAAQ,IAAIM,KAAzB,CADe,GAEfK,SAFJ;AAGD;;AACDL,IAAAA,KAAK,GAAGd,MAAM,CAAC,CAAD,CAAd;AAEA,QAAIoB,KAAK,GAAG,CAAC,CAAb;AAAA,QACIC,IAAI,GAAGZ,MAAM,CAAC,CAAD,CADjB;;AAGAa,IAAAA,KAAK,EACL,OAAO,EAAEF,KAAF,GAAUd,MAAV,IAAoBO,MAAM,CAACP,MAAP,GAAgBK,SAA3C,EAAsD;AACpD,UAAIY,KAAK,GAAGT,KAAK,CAACM,KAAD,CAAjB;AAAA,UACII,QAAQ,GAAGvB,QAAQ,GAAGA,QAAQ,CAACsB,KAAD,CAAX,GAAqBA,KAD5C;AAGAA,MAAAA,KAAK,GAAIrB,UAAU,IAAIqB,KAAK,KAAK,CAAzB,GAA8BA,KAA9B,GAAsC,CAA9C;;AACA,UAAI,EAAEF,IAAI,GACFI,QAAQ,CAACJ,IAAD,EAAOG,QAAP,CADN,GAEFrB,QAAQ,CAACU,MAAD,EAASW,QAAT,EAAmBtB,UAAnB,CAFZ,CAAJ,EAGO;AACLM,QAAAA,QAAQ,GAAGD,SAAX;;AACA,eAAO,EAAEC,QAAT,EAAmB;AACjB,cAAIkB,KAAK,GAAGjB,MAAM,CAACD,QAAD,CAAlB;;AACA,cAAI,EAAEkB,KAAK,GACHD,QAAQ,CAACC,KAAD,EAAQF,QAAR,CADL,GAEHrB,QAAQ,CAACH,MAAM,CAACQ,QAAD,CAAP,EAAmBgB,QAAnB,EAA6BtB,UAA7B,CAFZ,CAAJ,EAGM;AACJ,qBAASoB,KAAT;AACD;AACF;;AACD,YAAID,IAAJ,EAAU;AACRA,UAAAA,IAAI,CAACM,IAAL,CAAUH,QAAV;AACD;;AACDX,QAAAA,MAAM,CAACc,IAAP,CAAYJ,KAAZ;AACD;AACF;;AACD,WAAOV,MAAP;AACD;;;;AAvEMK,MAAAA,Q;;AACAb,MAAAA,a;;AACAD,MAAAA,iB;;AACAW,MAAAA,Q;;AACAC,MAAAA,S;;AACAS,MAAAA,Q;;;AAEP;AACIR,MAAAA,S,GAAYW,IAAI,CAACC,G;;yBAiEN9B,gB","sourcesContent":["import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * The base implementation of methods like `_.intersection`, without support\n * for iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of shared values.\n */\nfunction baseIntersection(arrays, iteratee, comparator) {\n  var includes = comparator ? arrayIncludesWith : arrayIncludes,\n      length = arrays[0].length,\n      othLength = arrays.length,\n      othIndex = othLength,\n      caches = Array(othLength),\n      maxLength = Infinity,\n      result = [];\n\n  while (othIndex--) {\n    var array = arrays[othIndex];\n    if (othIndex && iteratee) {\n      array = arrayMap(array, baseUnary(iteratee));\n    }\n    maxLength = nativeMin(array.length, maxLength);\n    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n      ? new SetCache(othIndex && array)\n      : undefined;\n  }\n  array = arrays[0];\n\n  var index = -1,\n      seen = caches[0];\n\n  outer:\n  while (++index < length && result.length < maxLength) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (!(seen\n          ? cacheHas(seen, computed)\n          : includes(result, computed, comparator)\n        )) {\n      othIndex = othLength;\n      while (--othIndex) {\n        var cache = caches[othIndex];\n        if (!(cache\n              ? cacheHas(cache, computed)\n              : includes(arrays[othIndex], computed, comparator))\n            ) {\n          continue outer;\n        }\n      }\n      if (seen) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseIntersection;\n"]}