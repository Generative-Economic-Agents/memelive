{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/request/lib/tunnel.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","tunnel","defaultProxyHeaderWhiteList","defaultProxyHeaderExclusiveList","constructProxyHost","uriObject","port","protocol","proxyHost","hostname","constructProxyHeaderWhiteList","headers","proxyHeaderWhiteList","whiteList","reduce","set","header","toLowerCase","Object","keys","filter","constructTunnelOptions","request","proxyHeaders","proxy","tunnelOptions","host","proxyAuth","auth","ca","cert","key","passphrase","pfx","ciphers","rejectUnauthorized","secureOptions","secureProtocol","constructTunnelFnName","uri","uriProtocol","proxyProtocol","join","getTunnelFn","tunnelFnName","Tunnel","proxyHeaderExclusiveList","tunnelOverride","prototype","isEnabled","self","setup","options","parse","concat","forEach","removeHeader","tunnelFn","agent","_cjsExports","_Tunnel"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'url';\nimport { __cjsMetaURL as _req0} from 'tunnel-agent';\nlet _cjsExports;\nlet _Tunnel;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n 'use strict'\n\n var url = require('url')\n var tunnel = require('tunnel-agent')\n\n var defaultProxyHeaderWhiteList = [\n   'accept',\n   'accept-charset',\n   'accept-encoding',\n   'accept-language',\n   'accept-ranges',\n   'cache-control',\n   'content-encoding',\n   'content-language',\n   'content-location',\n   'content-md5',\n   'content-range',\n   'content-type',\n   'connection',\n   'date',\n   'expect',\n   'max-forwards',\n   'pragma',\n   'referer',\n   'te',\n   'user-agent',\n   'via'\n ]\n\n var defaultProxyHeaderExclusiveList = [\n   'proxy-authorization'\n ]\n\n function constructProxyHost (uriObject) {\n   var port = uriObject.port\n   var protocol = uriObject.protocol\n   var proxyHost = uriObject.hostname + ':'\n\n   if (port) {\n     proxyHost += port\n   } else if (protocol === 'https:') {\n     proxyHost += '443'\n   } else {\n     proxyHost += '80'\n   }\n\n   return proxyHost\n }\n\n function constructProxyHeaderWhiteList (headers, proxyHeaderWhiteList) {\n   var whiteList = proxyHeaderWhiteList\n     .reduce(function (set, header) {\n       set[header.toLowerCase()] = true\n       return set\n     }, {})\n\n   return Object.keys(headers)\n     .filter(function (header) {\n       return whiteList[header.toLowerCase()]\n     })\n     .reduce(function (set, header) {\n       set[header] = headers[header]\n       return set\n     }, {})\n }\n\n function constructTunnelOptions (request, proxyHeaders) {\n   var proxy = request.proxy\n\n   var tunnelOptions = {\n     proxy: {\n       host: proxy.hostname,\n       port: +proxy.port,\n       proxyAuth: proxy.auth,\n       headers: proxyHeaders\n     },\n     headers: request.headers,\n     ca: request.ca,\n     cert: request.cert,\n     key: request.key,\n     passphrase: request.passphrase,\n     pfx: request.pfx,\n     ciphers: request.ciphers,\n     rejectUnauthorized: request.rejectUnauthorized,\n     secureOptions: request.secureOptions,\n     secureProtocol: request.secureProtocol\n   }\n\n   return tunnelOptions\n }\n\n function constructTunnelFnName (uri, proxy) {\n   var uriProtocol = (uri.protocol === 'https:' ? 'https' : 'http')\n   var proxyProtocol = (proxy.protocol === 'https:' ? 'Https' : 'Http')\n   return [uriProtocol, proxyProtocol].join('Over')\n }\n\n function getTunnelFn (request) {\n   var uri = request.uri\n   var proxy = request.proxy\n   var tunnelFnName = constructTunnelFnName(uri, proxy)\n   return tunnel[tunnelFnName]\n }\n\n function Tunnel (request) {\n   this.request = request\n   this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n   this.proxyHeaderExclusiveList = []\n   if (typeof request.tunnel !== 'undefined') {\n     this.tunnelOverride = request.tunnel\n   }\n }\n\n Tunnel.prototype.isEnabled = function () {\n   var self = this\n   var request = self.request\n     // Tunnel HTTPS by default. Allow the user to override this setting.\n\n   // If self.tunnelOverride is set (the user specified a value), use it.\n   if (typeof self.tunnelOverride !== 'undefined') {\n     return self.tunnelOverride\n   }\n\n   // If the destination is HTTPS, tunnel.\n   if (request.uri.protocol === 'https:') {\n     return true\n   }\n\n   // Otherwise, do not use tunnel.\n   return false\n }\n\n Tunnel.prototype.setup = function (options) {\n   var self = this\n   var request = self.request\n\n   options = options || {}\n\n   if (typeof request.proxy === 'string') {\n     request.proxy = url.parse(request.proxy)\n   }\n\n   if (!request.proxy || !request.tunnel) {\n     return false\n   }\n\n   // Setup Proxy Header Exclusive List and White List\n   if (options.proxyHeaderWhiteList) {\n     self.proxyHeaderWhiteList = options.proxyHeaderWhiteList\n   }\n   if (options.proxyHeaderExclusiveList) {\n     self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList\n   }\n\n   var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList)\n   var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList)\n\n   // Setup Proxy Headers and Proxy Headers Host\n   // Only send the Proxy White Listed Header names\n   var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList)\n   proxyHeaders.host = constructProxyHost(request.uri)\n\n   proxyHeaderExclusiveList.forEach(request.removeHeader, request)\n\n   // Set Agent from Tunnel Data\n   var tunnelFn = getTunnelFn(request)\n   var tunnelOptions = constructTunnelOptions(request, proxyHeaders)\n   request.agent = tunnelFn(tunnelOptions)\n\n   return true\n }\n\n Tunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList\n Tunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\n exports.Tunnel = Tunnel\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_Tunnel = module.exports.Tunnel;\n\n}, () => ({\n  'url': _req,\n  'tunnel-agent': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}