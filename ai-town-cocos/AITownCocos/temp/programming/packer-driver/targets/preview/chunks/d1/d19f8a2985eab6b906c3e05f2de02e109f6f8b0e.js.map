{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/lodash-es/_mergeData.js"],"names":["mergeData","data","source","bitmask","srcBitmask","newBitmask","isCommon","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_ARY_FLAG","isCombo","WRAP_CURRY_FLAG","WRAP_REARG_FLAG","length","WRAP_CURRY_BOUND_FLAG","value","partials","composeArgs","replaceHolders","PLACEHOLDER","composeArgsRight","nativeMin","Math","min"],"mappings":";;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,SAAT,CAAmBC,IAAnB,EAAyBC,MAAzB,EAAiC;AAC/B,QAAIC,OAAO,GAAGF,IAAI,CAAC,CAAD,CAAlB;AAAA,QACIG,UAAU,GAAGF,MAAM,CAAC,CAAD,CADvB;AAAA,QAEIG,UAAU,GAAGF,OAAO,GAAGC,UAF3B;AAAA,QAGIE,QAAQ,GAAGD,UAAU,IAAIE,cAAc,GAAGC,kBAAjB,GAAsCC,aAA1C,CAHzB;AAKA,QAAIC,OAAO,GACPN,UAAU,IAAIK,aAAf,IAAkCN,OAAO,IAAIQ,eAA9C,IACEP,UAAU,IAAIK,aAAf,IAAkCN,OAAO,IAAIS,eAA7C,IAAkEX,IAAI,CAAC,CAAD,CAAJ,CAAQY,MAAR,IAAkBX,MAAM,CAAC,CAAD,CAD3F,IAEEE,UAAU,KAAKK,aAAa,GAAGG,eAArB,CAAX,IAAsDV,MAAM,CAAC,CAAD,CAAN,CAAUW,MAAV,IAAoBX,MAAM,CAAC,CAAD,CAAhF,IAAyFC,OAAO,IAAIQ,eAHvG,CAN+B,CAW/B;;AACA,QAAI,EAAEL,QAAQ,IAAII,OAAd,CAAJ,EAA4B;AAC1B,aAAOT,IAAP;AACD,KAd8B,CAe/B;;;AACA,QAAIG,UAAU,GAAGG,cAAjB,EAAiC;AAC/BN,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUC,MAAM,CAAC,CAAD,CAAhB,CAD+B,CAE/B;;AACAG,MAAAA,UAAU,IAAIF,OAAO,GAAGI,cAAV,GAA2B,CAA3B,GAA+BO,qBAA7C;AACD,KApB8B,CAqB/B;;;AACA,QAAIC,KAAK,GAAGb,MAAM,CAAC,CAAD,CAAlB;;AACA,QAAIa,KAAJ,EAAW;AACT,UAAIC,QAAQ,GAAGf,IAAI,CAAC,CAAD,CAAnB;AACAA,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUe,QAAQ,GAAGC,WAAW,CAACD,QAAD,EAAWD,KAAX,EAAkBb,MAAM,CAAC,CAAD,CAAxB,CAAd,GAA6Ca,KAA/D;AACAd,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUe,QAAQ,GAAGE,cAAc,CAACjB,IAAI,CAAC,CAAD,CAAL,EAAUkB,WAAV,CAAjB,GAA0CjB,MAAM,CAAC,CAAD,CAAlE;AACD,KA3B8B,CA4B/B;;;AACAa,IAAAA,KAAK,GAAGb,MAAM,CAAC,CAAD,CAAd;;AACA,QAAIa,KAAJ,EAAW;AACTC,MAAAA,QAAQ,GAAGf,IAAI,CAAC,CAAD,CAAf;AACAA,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUe,QAAQ,GAAGI,gBAAgB,CAACJ,QAAD,EAAWD,KAAX,EAAkBb,MAAM,CAAC,CAAD,CAAxB,CAAnB,GAAkDa,KAApE;AACAd,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUe,QAAQ,GAAGE,cAAc,CAACjB,IAAI,CAAC,CAAD,CAAL,EAAUkB,WAAV,CAAjB,GAA0CjB,MAAM,CAAC,CAAD,CAAlE;AACD,KAlC8B,CAmC/B;;;AACAa,IAAAA,KAAK,GAAGb,MAAM,CAAC,CAAD,CAAd;;AACA,QAAIa,KAAJ,EAAW;AACTd,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUc,KAAV;AACD,KAvC8B,CAwC/B;;;AACA,QAAIX,UAAU,GAAGK,aAAjB,EAAgC;AAC9BR,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAX,GAAkBC,MAAM,CAAC,CAAD,CAAxB,GAA8BmB,SAAS,CAACpB,IAAI,CAAC,CAAD,CAAL,EAAUC,MAAM,CAAC,CAAD,CAAhB,CAAjD;AACD,KA3C8B,CA4C/B;;;AACA,QAAID,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAf,EAAqB;AACnBA,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUC,MAAM,CAAC,CAAD,CAAhB;AACD,KA/C8B,CAgD/B;;;AACAD,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUC,MAAM,CAAC,CAAD,CAAhB;AACAD,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUI,UAAV;AAEA,WAAOJ,IAAP;AACD;;;;AAvFMgB,MAAAA,W;;AACAG,MAAAA,gB;;AACAF,MAAAA,c;;;AAEP;AACIC,MAAAA,W,GAAc,wB;AAElB;;AACIZ,MAAAA,c,GAAiB,C;AACjBC,MAAAA,kB,GAAqB,C;AACrBM,MAAAA,qB,GAAwB,C;AACxBH,MAAAA,e,GAAkB,C;AAClBF,MAAAA,a,GAAgB,G;AAChBG,MAAAA,e,GAAkB,G;AAEtB;;AACIS,MAAAA,S,GAAYC,IAAI,CAACC,G;;yBAyENvB,S","sourcesContent":["import composeArgs from './_composeArgs.js';\nimport composeArgsRight from './_composeArgsRight.js';\nimport replaceHolders from './_replaceHolders.js';\n\n/** Used as the internal argument placeholder. */\nvar PLACEHOLDER = '__lodash_placeholder__';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Merges the function metadata of `source` into `data`.\n *\n * Merging metadata reduces the number of wrappers used to invoke a function.\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n * may be applied regardless of execution order. Methods like `_.ary` and\n * `_.rearg` modify function arguments, making the order in which they are\n * executed important, preventing the merging of metadata. However, we make\n * an exception for a safe combined case where curried functions have `_.ary`\n * and or `_.rearg` applied.\n *\n * @private\n * @param {Array} data The destination metadata.\n * @param {Array} source The source metadata.\n * @returns {Array} Returns `data`.\n */\nfunction mergeData(data, source) {\n  var bitmask = data[1],\n      srcBitmask = source[1],\n      newBitmask = bitmask | srcBitmask,\n      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n  var isCombo =\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n  // Exit early if metadata can't be merged.\n  if (!(isCommon || isCombo)) {\n    return data;\n  }\n  // Use source `thisArg` if available.\n  if (srcBitmask & WRAP_BIND_FLAG) {\n    data[2] = source[2];\n    // Set when currying a bound function.\n    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n  }\n  // Compose partial arguments.\n  var value = source[3];\n  if (value) {\n    var partials = data[3];\n    data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n  }\n  // Compose partial right arguments.\n  value = source[5];\n  if (value) {\n    partials = data[5];\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n  }\n  // Use source `argPos` if available.\n  value = source[7];\n  if (value) {\n    data[7] = value;\n  }\n  // Use source `ary` if it's smaller.\n  if (srcBitmask & WRAP_ARY_FLAG) {\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n  }\n  // Use source `arity` if one is not provided.\n  if (data[9] == null) {\n    data[9] = source[9];\n  }\n  // Use source `func` and merge bitmasks.\n  data[0] = source[0];\n  data[1] = newBitmask;\n\n  return data;\n}\n\nexport default mergeData;\n"]}