{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/assets/src/town/TownCreateRole.ts"],"names":["_decorator","Component","EditBox","Node","randomRangeInt","network","socket","loginModel","ccclass","property","randomPool","name","occupation","password","treePos","cloudPos","cloudAdapt","adapt_x","adapt_cow_x","cow_x","treeAdapt","rabbit_x","TownCreateRole","type","flower_cow_index","rabbit_index","addFrame","addFrame1","addFrame2","edits","edit_name","edit_occupation","edit_password","addFrameRabbit","start","getRandomOccupation","event","key","string","length","infoNextPart","roleView","active","infoView","roleNextPart","json","CreateRoleRequest","command","data","career","keyword","model","hair","id","top","shirt","bottoms","pants","sendWebSocketBinary","roleCreate","tileMap","update","deltaTime","flower","setPosition","flower1","cow","cloud","forEach","currentCloud","index","getPosition","x","y"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,O,OAAAA,O;AAASC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,c,OAAAA,c;;AACtCC,MAAAA,O,iBAAAA,O;;AACAC,MAAAA,M,iBAAAA,M;;AACFC,MAAAA,U;;;;;;;;;OACD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBT,U;AAExBU,MAAAA,U,GAAa;AACfC,QAAAA,IAAI,EAAC,CACD,MADC,EAED,MAFC,EAGD,SAHC,EAID,OAJC,EAKD,OALC,EAMD,OANC,EAOD,OAPC,EAQD,SARC,EASD,QATC,EAUD,WAVC,EAWD,SAXC,EAYD,UAZC,EAaD,SAbC,EAcD,OAdC,EAeD,QAfC,EAgBD,OAhBC,EAiBD,SAjBC,EAkBD,QAlBC,EAmBD,aAnBC,EAoBD,QApBC,CADU;AAuBfC,QAAAA,UAAU,EAAE,CACR,QADQ,EAER,OAFQ,EAGR,SAHQ,EAIR,UAJQ,EAKR,QALQ,EAMR,YANQ,EAOR,YAPQ,EAQR,QARQ,EASR,aATQ,EAUR,SAVQ,EAWR,aAXQ,EAYR,MAZQ,EAaR,SAbQ,EAcR,QAdQ,EAeR,aAfQ,EAgBR,UAhBQ,EAiBR,YAjBQ,EAkBR,QAlBQ,EAmBR,WAnBQ,EAoBR,UApBQ,CAvBG;AA6CfC,QAAAA,QAAQ,EAAE,CACN,MADM,EAEN,UAFM,EAGN,cAHM,EAIN,eAJM,EAKN,YALM,EAMN,YANM,EAON,YAPM,EAQN,cARM,EASN,YATM,EAUN,YAVM,EAWN,YAXM,EAYN,aAZM,EAaN,QAbM,EAcN,aAdM,EAeN,UAfM,EAgBN,eAhBM,EAiBN,cAjBM,EAkBN,WAlBM,EAmBN,UAnBM,EAoBN,QApBM,EAqBN,QArBM,EAsBN,WAtBM,EAuBN,UAvBM;AA7CK,O;AAwEbC,MAAAA,O,GAAU,CAAC,G;AACXC,MAAAA,Q,GAAW,CAAC,G;AACZC,MAAAA,U,GAAa,CACjB,GADiB,EAEjB,CAFiB,EAGjB,IAHiB,EAIjB,GAJiB,C;AAObC,MAAAA,O,GAAU,CAAC,E;AACXC,MAAAA,W,GAAc,CAAC,E;AACfC,MAAAA,K,GAAO,CACT,CADS,EAET,CAAC,EAFQ,EAGT,CAAC,GAHQ,EAIT,CAAC,GAJQ,C;AAOPC,MAAAA,S,GAAY,CACd,IADc,EAEd,IAFc,EAGd,GAHc,EAId,GAJc,EAKd,CALc,EAMd,CANc,C;AASZC,MAAAA,Q,GAAU,CACZ,CADY,EAEZ,CAAC,EAFW,EAGZ,CAAC,GAHW,EAIZ,CAAC,GAJW,C;;gCAOHC,c,WADZd,OAAO,CAAC,gBAAD,C,UAGHC,QAAQ,CAACP,OAAD,C,UAGRO,QAAQ,CAACP,OAAD,C,UAGRO,QAAQ,CAACP,OAAD,C,UAGRO,QAAQ,CAACN,IAAD,C,UAGRM,QAAQ,CAACN,IAAD,C,UAGRM,QAAQ,CAACN,IAAD,C,UAGRM,QAAQ,CAACN,IAAD,C,UAGRM,QAAQ,CAACN,IAAD,C,WAGRM,QAAQ,CAACN,IAAD,C,WAGRM,QAAQ,CAACN,IAAD,C,WAERM,QAAQ,CAACN,IAAD,C,WAERM,QAAQ,CAACN,IAAD,C,WAGRM,QAAQ,CAAC;AAACc,QAAAA,IAAI,EAAC,CAACpB,IAAD;AAAN,OAAD,C,WAGRM,QAAQ,CAACN,IAAD,C,2BAxCb,MACamB,cADb,SACoCrB,SADpC,CAC8C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eA0C1CuB,gBA1C0C,GA0CvB,CA1CuB;AAAA,eA4C1CC,YA5C0C,GA4C3B,CA5C2B;AAAA,eA8C1CC,QA9C0C,GA8C/B,CA9C+B;AAAA,eA+C1CC,SA/C0C,GA+C9B,CA/C8B;AAAA,eAgD1CC,SAhD0C,GAgD9B,CAhD8B;AAAA,eAkD1CC,KAlD0C,GAkDlC;AACJlB,YAAAA,IAAI,EAAE,KAAKmB,SADP;AAEJlB,YAAAA,UAAU,EAAE,KAAKmB,eAFb;AAGJlB,YAAAA,QAAQ,EAAE,KAAKmB;AAHX,WAlDkC;AAAA,eAwD1CC,cAxD0C,GAwDzB,CAxDyB;AAAA;;AAyD1CC,QAAAA,KAAK,GAAG,CACJ;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDC,QAAAA,mBAAmB,CAACC,KAAD,EAAYC,GAAZ,EAAwB;AACvC,eAAKR,KAAL,CAAWQ,GAAX,EAAgBC,MAAhB,GAAyB5B,UAAU,CAAC2B,GAAD,CAAV,CAAgBjC,cAAc,CAAC,CAAD,EAAIM,UAAU,CAAC2B,GAAD,CAAV,CAAgBE,MAApB,CAA9B,CAAzB;AACH;;AAGDC,QAAAA,YAAY,GAAE;AACV,cAAG,KAAKV,SAAL,CAAeQ,MAAf,CAAsBC,MAAtB,IAAgC,KAAKP,aAAL,CAAmBM,MAAnB,CAA0BC,MAA1D,IAAoE,KAAKR,eAA5E,EAA4F;AACxF,iBAAKU,QAAL,CAAcC,MAAd,GAAuB,IAAvB;AACA,iBAAKC,QAAL,CAAcD,MAAd,GAAuB,KAAvB;AACH;AACJ;;AAEDE,QAAAA,YAAY,GAAE;AACV,cAAIC,IAAI,GAAG,IAAI;AAAA;AAAA,kCAAQC,iBAAZ,EAAX;AACAD,UAAAA,IAAI,CAACE,OAAL,GAAe,KAAf;AACAF,UAAAA,IAAI,CAACtB,IAAL,GAAY,CAAZ;AACAsB,UAAAA,IAAI,CAACG,IAAL,CAAUrC,IAAV,GAAiB,KAAKmB,SAAL,CAAeQ,MAAhC;AACAO,UAAAA,IAAI,CAACG,IAAL,CAAUC,MAAV,GAAmB,KAAKlB,eAAL,CAAqBO,MAAxC;AACAO,UAAAA,IAAI,CAACG,IAAL,CAAUE,OAAV,GAAoB,KAAKlB,aAAL,CAAmBM,MAAvC;AACAO,UAAAA,IAAI,CAACG,IAAL,CAAUG,KAAV,GAAkB,GAAlB;AACAN,UAAAA,IAAI,CAACG,IAAL,CAAUI,IAAV,GAAiB;AAAA;AAAA,wCAAWA,IAAX,CAAgBC,EAAjC;AACAR,UAAAA,IAAI,CAACG,IAAL,CAAUM,GAAV,GAAgB;AAAA;AAAA,wCAAWC,KAAX,CAAiBF,EAAjC;AACAR,UAAAA,IAAI,CAACG,IAAL,CAAUQ,OAAV,GAAoB;AAAA;AAAA,wCAAWC,KAAX,CAAiBJ,EAArC;AACA;AAAA;AAAA,gCAAOK,mBAAP,CAA2Bb,IAA3B;AACA,eAAKc,UAAL,CAAgBjB,MAAhB,GAAyB,KAAzB;AACA,eAAKkB,OAAL,CAAalB,MAAb,GAAsB,IAAtB;AACH;;AAEDmB,QAAAA,MAAM,CAACC,SAAD,EAAoB;AACtB,eAAKpC,QAAL,GAAgB,KAAKA,QAAL,GAAgBoC,SAAhC;AACA,eAAKnC,SAAL,GAAiB,KAAKA,SAAL,GAAiBmC,SAAlC;AACA,eAAKlC,SAAL,GAAiB,KAAKA,SAAL,GAAiBkC,SAAlC;AACA,eAAK7B,cAAL,GAAsB,KAAKA,cAAL,GAAsB6B,SAA5C;;AACA,cAAG,KAAKpC,QAAL,IAAiB,IAApB,EAAyB;AACrB,iBAAKqC,MAAL,CAAYC,WAAZ,CAAwB,KAAKxC,gBAAL,GAAwBP,OAAhD,EAAyD,CAAzD;AACA,iBAAKgD,OAAL,CAAaD,WAAb,CAAyB,KAAKxC,gBAAL,GAAwBP,OAAjD,EAA0D,CAA1D,EAFqB,CAGrB;;AACA,iBAAKO,gBAAL,GAAwB,KAAKA,gBAAL,IAAyB,CAAzB,GAA6B,CAA7B,GAAiC,KAAKA,gBAAL,GAAwB,CAAjF;AAEA,iBAAKE,QAAL,GAAgB,CAAhB;AACH;;AACD,cAAG,KAAKE,SAAL,GAAiB,IAApB,EAAyB;AACrB;AACA;AACA,iBAAKsC,GAAL,CAASF,WAAT,CAAqB7C,KAAK,CAAC,KAAKK,gBAAN,CAA1B,EAAmD,CAAnD,EAHqB,CAIrB;;AACA,iBAAKI,SAAL,GAAiB,CAAjB;AACH,WAnBqB,CAqBtB;AAEA;AACA;AACA;AAEA;AACA;;;AAEA,eAAKuC,KAAL,CAAWC,OAAX,CAAmB,CAACC,YAAD,EAAeC,KAAf,KAAuB;AACtC,gBAAGD,YAAY,CAACE,WAAb,GAA2BC,CAA3B,GAA+BzD,QAAlC,EAA2C;AACzCsD,cAAAA,YAAY,CAACL,WAAb,CAAyB,CAACjD,QAA1B,EAAoCsD,YAAY,CAACE,WAAb,GAA2BE,CAA/D;AACD;;AACDJ,YAAAA,YAAY,CAACL,WAAb,CAAyBK,YAAY,CAACE,WAAb,GAA2BC,CAA3B,GAA+BxD,UAAU,CAACsD,KAAD,CAAlE,EAA2ED,YAAY,CAACE,WAAb,GAA2BE,CAAtG;AACD,WALH,EA9BsB,CAqCtB;AACA;AACA;AACA;AACA;AACA;AAEH;;AAtJyC,O;;;;;iBAGd,I;;;;;;;iBAGI,I;;;;;;;iBAGE,I;;;;;;;iBAGR,I;;;;;;;iBAGI,I;;;;;;;iBAGE,I;;;;;;;iBAGR,I;;;;;;;iBAGA,I;;;;;;;iBAGE,I;;;;;;;iBAGJ,I;;;;;;;iBAEC,I;;;;;;;iBAEJ,I;;;;;;;iBAGG,E;;;;;;;iBAGC,I","sourcesContent":["import { _decorator, Component, EditBox, Node, randomRangeInt } from 'cc';\nimport { network } from '../model/RequestData';\nimport { socket } from '../game/App';\nimport loginModel from '../model/loginModel';\nconst { ccclass, property } = _decorator;\n\nconst randomPool = {\n    name:[\n        'John',\n        'Mary',\n        'Michael',\n        'Sarah',\n        'David',\n        'Emily',\n        'James',\n        'Jessica',\n        'Robert',\n        'Elizabeth',\n        'William',\n        'Jennifer',\n        'Richard',\n        'Laura',\n        'Thomas',\n        'Megan',\n        'Charles',\n        'Amanda',\n        'Christopher',\n        'Ashley',\n    ],\n    occupation: [\n        'Doctor',\n        'Nurse',\n        'Teacher',\n        'Engineer',\n        'Lawyer',\n        'Accountant',\n        'Programmer',\n        'Police',\n        'Firefighter',\n        'Builder',\n        'Salesperson',\n        'Chef',\n        'Plumber',\n        'Driver',\n        'Electrician',\n        'Mechanic',\n        'Journalist',\n        'Writer',\n        'Scientist',\n        'Designer',\n    ],\n    password: [\n        'Kind',\n        'Generous',\n        'Enthusiastic',\n        'Compassionate',\n        'Empathetic',\n        'Altruistic',\n        'Charitable',\n        'Warm-hearted',\n        'Benevolent',\n        'Thoughtful',\n        'Supportive',\n        'Considerate',\n        'Loving',\n        'Sympathetic',\n        'Gracious',\n        'Philanthropic',\n        'Affectionate',\n        'Nurturing',\n        'Friendly',\n        'Tender',\n        'Caring',\n        'Forgiving',\n        'Selfless',\n    ]\n}\n\nconst treePos = -480\nconst cloudPos = -620\nconst cloudAdapt = [\n  1.5,\n  1,\n  1.75,\n  0.5\n]\n\nconst adapt_x = -60\nconst adapt_cow_x = -80\nconst cow_x =[\n    0,\n    -94,\n    -191,\n    -285\n]\n\nconst treeAdapt = [\n    2.75,\n    2.75,\n    2.5,\n    2.5,\n    2,\n    2,\n  ]\n\nconst rabbit_x =[\n    0,\n    -66,\n    -133,\n    -200,\n]\n@ccclass('TownCreateRole')\nexport class TownCreateRole extends Component {\n\n    @property(EditBox)\n    public edit_name: EditBox = null;\n\n    @property(EditBox)\n    public edit_password: EditBox = null;\n\n    @property(EditBox)\n    public edit_occupation: EditBox = null;\n\n    @property(Node)\n    public randomName: Node = null;\n\n    @property(Node)\n    public randomPassword: Node = null;\n\n    @property(Node)\n    public randomOccupation: Node = null;\n\n    @property(Node)\n    public roleView: Node = null;\n\n    @property(Node)\n    public infoView: Node = null;\n\n    @property(Node)\n    public roleCreate: Node = null;\n\n    @property(Node)\n    public flower: Node = null;\n    @property(Node)\n    public flower1: Node = null;\n    @property(Node)\n    public cow: Node = null;\n\n    @property({type:[Node]})\n    public cloud:Node[] = [];\n\n    @property(Node)\n    public tileMap: Node = null;\n\n    flower_cow_index = 0\n\n    rabbit_index = 0\n\n    addFrame = 0\n    addFrame1 = 0\n    addFrame2 = 0\n\n    edits = {\n        name: this.edit_name,\n        occupation: this.edit_occupation,\n        password: this.edit_password\n    }\n\n    addFrameRabbit = 0\n    start() {\n        // this.edits = {\n        //     name: this.edit_name,\n        //     occupation: this.edit_occupation,\n        //     password: this.edit_password\n        // }\n    \n        // if(loginModel.character){\n        //     this.roleCreate.active = false\n        //     // let json = new network.GetAllNPCRequest();\n        //     // json.command = 10002;\n        //     // json.type = 1;\n        //     // socket.sendWebSocketBinary(json);\n        //     this.tileMap.active = true\n        // }else{\n        //     this.roleCreate.active = true\n        //     this.tileMap.active = false\n        //     //this.bgs.active = true\n        // }\n    }\n\n    getRandomOccupation(event: any,key: string){\n        this.edits[key].string = randomPool[key][randomRangeInt(0, randomPool[key].length)]\n    }\n\n\n    infoNextPart(){\n        if(this.edit_name.string.length && this.edit_password.string.length && this.edit_occupation){\n            this.roleView.active = true\n            this.infoView.active = false\n        }\n    }\n\n    roleNextPart(){\n        let json = new network.CreateRoleRequest();\n        json.command = 10001;\n        json.type = 1;\n        json.data.name = this.edit_name.string;\n        json.data.career = this.edit_occupation.string;\n        json.data.keyword = this.edit_password.string;\n        json.data.model = 900\n        json.data.hair = loginModel.hair.id\n        json.data.top = loginModel.shirt.id\n        json.data.bottoms = loginModel.pants.id\n        socket.sendWebSocketBinary(json);\n        this.roleCreate.active = false\n        this.tileMap.active = true\n    }\n\n    update(deltaTime: number) {\n        this.addFrame = this.addFrame + deltaTime\n        this.addFrame1 = this.addFrame1 + deltaTime\n        this.addFrame2 = this.addFrame2 + deltaTime\n        this.addFrameRabbit = this.addFrameRabbit + deltaTime\n        if(this.addFrame >= 0.15){\n            this.flower.setPosition(this.flower_cow_index * adapt_x, 0)\n            this.flower1.setPosition(this.flower_cow_index * adapt_x, 0)\n            //this.cow.setPosition(cow_x[this.flower_cow_index], 0)\n            this.flower_cow_index = this.flower_cow_index >= 3 ? 0 : this.flower_cow_index + 1\n\n            this.addFrame = 0\n        }\n        if(this.addFrame2 > 0.16){\n            // this.flower.setPosition(this.flower_cow_index * adapt_x, 0)\n            // this.flower1.setPosition(this.flower_cow_index * adapt_x, 0)\n            this.cow.setPosition(cow_x[this.flower_cow_index], 0)\n            //this.flower_cow_index = this.flower_cow_index >= 3 ? 0 : this.flower_cow_index + 1\n            this.addFrame2 = 0\n        }\n\n        // if(this.addFrameRabbit >= 0.10){\n\n        //     this.rabbit.setPosition(rabbit_x[this.rabbit_index], 0)\n        //     //this.cow.setPosition(cow_x[this.flower_cow_index], 0)\n        //     this.rabbit_index = this.rabbit_index >= 3 ? 0 : this.rabbit_index + 1\n\n        //     this.addFrameRabbit = 0\n        // }\n\n        this.cloud.forEach((currentCloud, index)=>{\n            if(currentCloud.getPosition().x < cloudPos){\n              currentCloud.setPosition(-cloudPos, currentCloud.getPosition().y)\n            }\n            currentCloud.setPosition(currentCloud.getPosition().x - cloudAdapt[index], currentCloud.getPosition().y)\n          })\n\n        //   this.treesBg.forEach((tree, index)=>{\n        //     if(tree.getPosition().x > -treePos){\n        //         tree.setPosition(treePos, tree.getPosition().y)\n        //     }\n        //     tree.setPosition(tree.getPosition().x + treeAdapt[index], tree.getPosition().y)\n        //   })\n\n    }\n}\n\n"]}