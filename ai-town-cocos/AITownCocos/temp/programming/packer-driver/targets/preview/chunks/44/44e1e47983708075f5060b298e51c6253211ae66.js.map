{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/sshpk/lib/utils.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","_req4","_req5","_req6","_req7","_req8","url","define","exports","require","module","__filename","__dirname","bufferSplit","addRSAMissing","calculateDSAPublic","calculateED25519Public","calculateX25519Public","mpNormalize","mpDenormalize","ecNormalize","countZeros","assertCompatible","isCompatible","opensslKeyDeriv","opensshCipherInfo","publicFromPrivateECDSA","zeroPadToLength","writeBitString","readBitString","pbkdf2","assert","Buffer","PrivateKey","Key","crypto","algs","asn1","ec","jsbn","BigInteger","nacl","MAX_CLASS_DEPTH","obj","klass","needVer","undefined","prototype","_sshpkApiVersion","proto","Object","getPrototypeOf","depth","constructor","name","ver","_oldVersionDetect","ok","object","strictEqual","CIPHER_LEN","key","iv","PKCS5_SALT_LEN","cipher","salt","passphrase","count","buffer","number","clen","slice","D","D_prev","bufs","material","alloc","length","push","concat","j","createHash","update","digest","hashAlg","iterations","size","hkey","copy","gen","ts","i","t","T","I","writeUInt32BE","hmac","createHmac","Ti","Uc","c","x","buf","o","obit","mask","chr","string","parts","lastPart","matches","charCodeAt","newPart","addZero","Error","b","der","tag","Ber","BitString","readString","toString","writeBuffer","len","equal","bigintToMpBuf","bigint","from","toByteArray","g","p","y","modPow","ybuf","k","kp","sign","keyPair","fromSeed","Uint8Array","publicKey","box","d","part","data","dmodp","mod","subtract","dmodq","q","curveName","priv","params","curves","a","curve","ECCurveFp","G","decodePointHex","pub","multiply","encodePointHex","type","inf","keySize","blockSize","opensslName","_cjsExports","_bufferSplit","_addRSAMissing","_calculateDSAPublic","_calculateED25519Public","_calculateX25519Public","_mpNormalize","_mpDenormalize","_ecNormalize","_countZeros","_assertCompatible","_isCompatible","_opensslKeyDeriv","_opensshCipherInfo","_publicFromPrivateECDSA","_zeroPadToLength","_writeBitString","_readBitString","_pbkdf2"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'assert-plus';\nimport { __cjsMetaURL as _req0} from 'safer-buffer';\nimport { __cjsMetaURL as _req1} from './private-key';\nimport { __cjsMetaURL as _req2} from './key';\nimport { __cjsMetaURL as _req3} from 'crypto';\nimport { __cjsMetaURL as _req4} from './algs';\nimport { __cjsMetaURL as _req5} from 'asn1';\nimport { __cjsMetaURL as _req6} from 'ecc-jsbn/lib/ec';\nimport { __cjsMetaURL as _req7} from 'jsbn';\nimport { __cjsMetaURL as _req8} from 'tweetnacl';\nlet _cjsExports;\nlet _bufferSplit;\nlet _addRSAMissing;\nlet _calculateDSAPublic;\nlet _calculateED25519Public;\nlet _calculateX25519Public;\nlet _mpNormalize;\nlet _mpDenormalize;\nlet _ecNormalize;\nlet _countZeros;\nlet _assertCompatible;\nlet _isCompatible;\nlet _opensslKeyDeriv;\nlet _opensshCipherInfo;\nlet _publicFromPrivateECDSA;\nlet _zeroPadToLength;\nlet _writeBitString;\nlet _readBitString;\nlet _pbkdf2;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n // Copyright 2015 Joyent, Inc.\n\n module.exports = {\n \tbufferSplit: bufferSplit,\n \taddRSAMissing: addRSAMissing,\n \tcalculateDSAPublic: calculateDSAPublic,\n \tcalculateED25519Public: calculateED25519Public,\n \tcalculateX25519Public: calculateX25519Public,\n \tmpNormalize: mpNormalize,\n \tmpDenormalize: mpDenormalize,\n \tecNormalize: ecNormalize,\n \tcountZeros: countZeros,\n \tassertCompatible: assertCompatible,\n \tisCompatible: isCompatible,\n \topensslKeyDeriv: opensslKeyDeriv,\n \topensshCipherInfo: opensshCipherInfo,\n \tpublicFromPrivateECDSA: publicFromPrivateECDSA,\n \tzeroPadToLength: zeroPadToLength,\n \twriteBitString: writeBitString,\n \treadBitString: readBitString,\n \tpbkdf2: pbkdf2\n };\n\n var assert = require('assert-plus');\n var Buffer = require('safer-buffer').Buffer;\n var PrivateKey = require('./private-key');\n var Key = require('./key');\n var crypto = require('crypto');\n var algs = require('./algs');\n var asn1 = require('asn1');\n\n var ec = require('ecc-jsbn/lib/ec');\n var jsbn = require('jsbn').BigInteger;\n var nacl = require('tweetnacl');\n\n var MAX_CLASS_DEPTH = 3;\n\n function isCompatible(obj, klass, needVer) {\n \tif (obj === null || typeof (obj) !== 'object')\n \t\treturn (false);\n \tif (needVer === undefined)\n \t\tneedVer = klass.prototype._sshpkApiVersion;\n \tif (obj instanceof klass &&\n \t    klass.prototype._sshpkApiVersion[0] == needVer[0])\n \t\treturn (true);\n \tvar proto = Object.getPrototypeOf(obj);\n \tvar depth = 0;\n \twhile (proto.constructor.name !== klass.name) {\n \t\tproto = Object.getPrototypeOf(proto);\n \t\tif (!proto || ++depth > MAX_CLASS_DEPTH)\n \t\t\treturn (false);\n \t}\n \tif (proto.constructor.name !== klass.name)\n \t\treturn (false);\n \tvar ver = proto._sshpkApiVersion;\n \tif (ver === undefined)\n \t\tver = klass._oldVersionDetect(obj);\n \tif (ver[0] != needVer[0] || ver[1] < needVer[1])\n \t\treturn (false);\n \treturn (true);\n }\n\n function assertCompatible(obj, klass, needVer, name) {\n \tif (name === undefined)\n \t\tname = 'object';\n \tassert.ok(obj, name + ' must not be null');\n \tassert.object(obj, name + ' must be an object');\n \tif (needVer === undefined)\n \t\tneedVer = klass.prototype._sshpkApiVersion;\n \tif (obj instanceof klass &&\n \t    klass.prototype._sshpkApiVersion[0] == needVer[0])\n \t\treturn;\n \tvar proto = Object.getPrototypeOf(obj);\n \tvar depth = 0;\n \twhile (proto.constructor.name !== klass.name) {\n \t\tproto = Object.getPrototypeOf(proto);\n \t\tassert.ok(proto && ++depth <= MAX_CLASS_DEPTH,\n \t\t    name + ' must be a ' + klass.name + ' instance');\n \t}\n \tassert.strictEqual(proto.constructor.name, klass.name,\n \t    name + ' must be a ' + klass.name + ' instance');\n \tvar ver = proto._sshpkApiVersion;\n \tif (ver === undefined)\n \t\tver = klass._oldVersionDetect(obj);\n \tassert.ok(ver[0] == needVer[0] && ver[1] >= needVer[1],\n \t    name + ' must be compatible with ' + klass.name + ' klass ' +\n \t    'version ' + needVer[0] + '.' + needVer[1]);\n }\n\n var CIPHER_LEN = {\n \t'des-ede3-cbc': { key: 24, iv: 8 },\n \t'aes-128-cbc': { key: 16, iv: 16 },\n \t'aes-256-cbc': { key: 32, iv: 16 }\n };\n var PKCS5_SALT_LEN = 8;\n\n function opensslKeyDeriv(cipher, salt, passphrase, count) {\n \tassert.buffer(salt, 'salt');\n \tassert.buffer(passphrase, 'passphrase');\n \tassert.number(count, 'iteration count');\n\n \tvar clen = CIPHER_LEN[cipher];\n \tassert.object(clen, 'supported cipher');\n\n \tsalt = salt.slice(0, PKCS5_SALT_LEN);\n\n \tvar D, D_prev, bufs;\n \tvar material = Buffer.alloc(0);\n \twhile (material.length < clen.key + clen.iv) {\n \t\tbufs = [];\n \t\tif (D_prev)\n \t\t\tbufs.push(D_prev);\n \t\tbufs.push(passphrase);\n \t\tbufs.push(salt);\n \t\tD = Buffer.concat(bufs);\n \t\tfor (var j = 0; j < count; ++j)\n \t\t\tD = crypto.createHash('md5').update(D).digest();\n \t\tmaterial = Buffer.concat([material, D]);\n \t\tD_prev = D;\n \t}\n\n \treturn ({\n \t    key: material.slice(0, clen.key),\n \t    iv: material.slice(clen.key, clen.key + clen.iv)\n \t});\n }\n\n /* See: RFC2898 */\n function pbkdf2(hashAlg, salt, iterations, size, passphrase) {\n \tvar hkey = Buffer.alloc(salt.length + 4);\n \tsalt.copy(hkey);\n\n \tvar gen = 0, ts = [];\n \tvar i = 1;\n \twhile (gen < size) {\n \t\tvar t = T(i++);\n \t\tgen += t.length;\n \t\tts.push(t);\n \t}\n \treturn (Buffer.concat(ts).slice(0, size));\n\n \tfunction T(I) {\n \t\thkey.writeUInt32BE(I, hkey.length - 4);\n\n \t\tvar hmac = crypto.createHmac(hashAlg, passphrase);\n \t\thmac.update(hkey);\n\n \t\tvar Ti = hmac.digest();\n \t\tvar Uc = Ti;\n \t\tvar c = 1;\n \t\twhile (c++ < iterations) {\n \t\t\thmac = crypto.createHmac(hashAlg, passphrase);\n \t\t\thmac.update(Uc);\n \t\t\tUc = hmac.digest();\n \t\t\tfor (var x = 0; x < Ti.length; ++x)\n \t\t\t\tTi[x] ^= Uc[x];\n \t\t}\n \t\treturn (Ti);\n \t}\n }\n\n /* Count leading zero bits on a buffer */\n function countZeros(buf) {\n \tvar o = 0, obit = 8;\n \twhile (o < buf.length) {\n \t\tvar mask = (1 << obit);\n \t\tif ((buf[o] & mask) === mask)\n \t\t\tbreak;\n \t\tobit--;\n \t\tif (obit < 0) {\n \t\t\to++;\n \t\t\tobit = 8;\n \t\t}\n \t}\n \treturn (o*8 + (8 - obit) - 1);\n }\n\n function bufferSplit(buf, chr) {\n \tassert.buffer(buf);\n \tassert.string(chr);\n\n \tvar parts = [];\n \tvar lastPart = 0;\n \tvar matches = 0;\n \tfor (var i = 0; i < buf.length; ++i) {\n \t\tif (buf[i] === chr.charCodeAt(matches))\n \t\t\t++matches;\n \t\telse if (buf[i] === chr.charCodeAt(0))\n \t\t\tmatches = 1;\n \t\telse\n \t\t\tmatches = 0;\n\n \t\tif (matches >= chr.length) {\n \t\t\tvar newPart = i + 1;\n \t\t\tparts.push(buf.slice(lastPart, newPart - matches));\n \t\t\tlastPart = newPart;\n \t\t\tmatches = 0;\n \t\t}\n \t}\n \tif (lastPart <= buf.length)\n \t\tparts.push(buf.slice(lastPart, buf.length));\n\n \treturn (parts);\n }\n\n function ecNormalize(buf, addZero) {\n \tassert.buffer(buf);\n \tif (buf[0] === 0x00 && buf[1] === 0x04) {\n \t\tif (addZero)\n \t\t\treturn (buf);\n \t\treturn (buf.slice(1));\n \t} else if (buf[0] === 0x04) {\n \t\tif (!addZero)\n \t\t\treturn (buf);\n \t} else {\n \t\twhile (buf[0] === 0x00)\n \t\t\tbuf = buf.slice(1);\n \t\tif (buf[0] === 0x02 || buf[0] === 0x03)\n \t\t\tthrow (new Error('Compressed elliptic curve points ' +\n \t\t\t    'are not supported'));\n \t\tif (buf[0] !== 0x04)\n \t\t\tthrow (new Error('Not a valid elliptic curve point'));\n \t\tif (!addZero)\n \t\t\treturn (buf);\n \t}\n \tvar b = Buffer.alloc(buf.length + 1);\n \tb[0] = 0x0;\n \tbuf.copy(b, 1);\n \treturn (b);\n }\n\n function readBitString(der, tag) {\n \tif (tag === undefined)\n \t\ttag = asn1.Ber.BitString;\n \tvar buf = der.readString(tag, true);\n \tassert.strictEqual(buf[0], 0x00, 'bit strings with unused bits are ' +\n \t    'not supported (0x' + buf[0].toString(16) + ')');\n \treturn (buf.slice(1));\n }\n\n function writeBitString(der, buf, tag) {\n \tif (tag === undefined)\n \t\ttag = asn1.Ber.BitString;\n \tvar b = Buffer.alloc(buf.length + 1);\n \tb[0] = 0x00;\n \tbuf.copy(b, 1);\n \tder.writeBuffer(b, tag);\n }\n\n function mpNormalize(buf) {\n \tassert.buffer(buf);\n \twhile (buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00)\n \t\tbuf = buf.slice(1);\n \tif ((buf[0] & 0x80) === 0x80) {\n \t\tvar b = Buffer.alloc(buf.length + 1);\n \t\tb[0] = 0x00;\n \t\tbuf.copy(b, 1);\n \t\tbuf = b;\n \t}\n \treturn (buf);\n }\n\n function mpDenormalize(buf) {\n \tassert.buffer(buf);\n \twhile (buf.length > 1 && buf[0] === 0x00)\n \t\tbuf = buf.slice(1);\n \treturn (buf);\n }\n\n function zeroPadToLength(buf, len) {\n \tassert.buffer(buf);\n \tassert.number(len);\n \twhile (buf.length > len) {\n \t\tassert.equal(buf[0], 0x00);\n \t\tbuf = buf.slice(1);\n \t}\n \twhile (buf.length < len) {\n \t\tvar b = Buffer.alloc(buf.length + 1);\n \t\tb[0] = 0x00;\n \t\tbuf.copy(b, 1);\n \t\tbuf = b;\n \t}\n \treturn (buf);\n }\n\n function bigintToMpBuf(bigint) {\n \tvar buf = Buffer.from(bigint.toByteArray());\n \tbuf = mpNormalize(buf);\n \treturn (buf);\n }\n\n function calculateDSAPublic(g, p, x) {\n \tassert.buffer(g);\n \tassert.buffer(p);\n \tassert.buffer(x);\n \tg = new jsbn(g);\n \tp = new jsbn(p);\n \tx = new jsbn(x);\n \tvar y = g.modPow(x, p);\n \tvar ybuf = bigintToMpBuf(y);\n \treturn (ybuf);\n }\n\n function calculateED25519Public(k) {\n \tassert.buffer(k);\n\n \tvar kp = nacl.sign.keyPair.fromSeed(new Uint8Array(k));\n \treturn (Buffer.from(kp.publicKey));\n }\n\n function calculateX25519Public(k) {\n \tassert.buffer(k);\n\n \tvar kp = nacl.box.keyPair.fromSeed(new Uint8Array(k));\n \treturn (Buffer.from(kp.publicKey));\n }\n\n function addRSAMissing(key) {\n \tassert.object(key);\n \tassertCompatible(key, PrivateKey, [1, 1]);\n\n \tvar d = new jsbn(key.part.d.data);\n \tvar buf;\n\n \tif (!key.part.dmodp) {\n \t\tvar p = new jsbn(key.part.p.data);\n \t\tvar dmodp = d.mod(p.subtract(1));\n\n \t\tbuf = bigintToMpBuf(dmodp);\n \t\tkey.part.dmodp = {name: 'dmodp', data: buf};\n \t\tkey.parts.push(key.part.dmodp);\n \t}\n \tif (!key.part.dmodq) {\n \t\tvar q = new jsbn(key.part.q.data);\n \t\tvar dmodq = d.mod(q.subtract(1));\n\n \t\tbuf = bigintToMpBuf(dmodq);\n \t\tkey.part.dmodq = {name: 'dmodq', data: buf};\n \t\tkey.parts.push(key.part.dmodq);\n \t}\n }\n\n function publicFromPrivateECDSA(curveName, priv) {\n \tassert.string(curveName, 'curveName');\n \tassert.buffer(priv);\n \tvar params = algs.curves[curveName];\n \tvar p = new jsbn(params.p);\n \tvar a = new jsbn(params.a);\n \tvar b = new jsbn(params.b);\n \tvar curve = new ec.ECCurveFp(p, a, b);\n \tvar G = curve.decodePointHex(params.G.toString('hex'));\n\n \tvar d = new jsbn(mpNormalize(priv));\n \tvar pub = G.multiply(d);\n \tpub = Buffer.from(curve.encodePointHex(pub), 'hex');\n\n \tvar parts = [];\n \tparts.push({name: 'curve', data: Buffer.from(curveName)});\n \tparts.push({name: 'Q', data: pub});\n\n \tvar key = new Key({type: 'ecdsa', curve: curve, parts: parts});\n \treturn (key);\n }\n\n function opensshCipherInfo(cipher) {\n \tvar inf = {};\n \tswitch (cipher) {\n \tcase '3des-cbc':\n \t\tinf.keySize = 24;\n \t\tinf.blockSize = 8;\n \t\tinf.opensslName = 'des-ede3-cbc';\n \t\tbreak;\n \tcase 'blowfish-cbc':\n \t\tinf.keySize = 16;\n \t\tinf.blockSize = 8;\n \t\tinf.opensslName = 'bf-cbc';\n \t\tbreak;\n \tcase 'aes128-cbc':\n \tcase 'aes128-ctr':\n \tcase 'aes128-gcm@openssh.com':\n \t\tinf.keySize = 16;\n \t\tinf.blockSize = 16;\n \t\tinf.opensslName = 'aes-128-' + cipher.slice(7, 10);\n \t\tbreak;\n \tcase 'aes192-cbc':\n \tcase 'aes192-ctr':\n \tcase 'aes192-gcm@openssh.com':\n \t\tinf.keySize = 24;\n \t\tinf.blockSize = 16;\n \t\tinf.opensslName = 'aes-192-' + cipher.slice(7, 10);\n \t\tbreak;\n \tcase 'aes256-cbc':\n \tcase 'aes256-ctr':\n \tcase 'aes256-gcm@openssh.com':\n \t\tinf.keySize = 32;\n \t\tinf.blockSize = 16;\n \t\tinf.opensslName = 'aes-256-' + cipher.slice(7, 10);\n \t\tbreak;\n \tdefault:\n \t\tthrow (new Error(\n \t\t    'Unsupported openssl cipher \"' + cipher + '\"'));\n \t}\n \treturn (inf);\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_bufferSplit = module.exports.bufferSplit;\n_addRSAMissing = module.exports.addRSAMissing;\n_calculateDSAPublic = module.exports.calculateDSAPublic;\n_calculateED25519Public = module.exports.calculateED25519Public;\n_calculateX25519Public = module.exports.calculateX25519Public;\n_mpNormalize = module.exports.mpNormalize;\n_mpDenormalize = module.exports.mpDenormalize;\n_ecNormalize = module.exports.ecNormalize;\n_countZeros = module.exports.countZeros;\n_assertCompatible = module.exports.assertCompatible;\n_isCompatible = module.exports.isCompatible;\n_opensslKeyDeriv = module.exports.opensslKeyDeriv;\n_opensshCipherInfo = module.exports.opensshCipherInfo;\n_publicFromPrivateECDSA = module.exports.publicFromPrivateECDSA;\n_zeroPadToLength = module.exports.zeroPadToLength;\n_writeBitString = module.exports.writeBitString;\n_readBitString = module.exports.readBitString;\n_pbkdf2 = module.exports.pbkdf2;\n\n}, () => ({\n  'assert-plus': _req,\n  'safer-buffer': _req0,\n  './private-key': _req1,\n  './key': _req2,\n  'crypto': _req3,\n  './algs': _req4,\n  'asn1': _req5,\n  'ecc-jsbn/lib/ec': _req6,\n  'jsbn': _req7,\n  'tweetnacl': _req8,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}