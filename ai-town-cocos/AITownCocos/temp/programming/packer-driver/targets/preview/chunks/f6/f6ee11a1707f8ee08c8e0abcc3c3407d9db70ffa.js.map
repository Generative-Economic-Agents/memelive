{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/signers/v4_credentials.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","AWS","cachedSecret","cacheQueue","maxCacheEntries","v4Identifier","createScope","date","region","serviceName","substr","join","getSigningKey","credentials","service","shouldCache","credsIdentifier","util","crypto","hmac","secretAccessKey","accessKeyId","cacheKey","kDate","kRegion","kService","signingKey","push","length","shift","emptyCache","_cjsExports","_createScope"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nlet _cjsExports;\nlet _createScope;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n\n /**\n  * @api private\n  */\n var cachedSecret = {};\n\n /**\n  * @api private\n  */\n var cacheQueue = [];\n\n /**\n  * @api private\n  */\n var maxCacheEntries = 50;\n\n /**\n  * @api private\n  */\n var v4Identifier = 'aws4_request';\n\n /**\n  * @api private\n  */\n module.exports = {\n   /**\n    * @api private\n    *\n    * @param date [String]\n    * @param region [String]\n    * @param serviceName [String]\n    * @return [String]\n    */\n   createScope: function createScope(date, region, serviceName) {\n     return [\n       date.substr(0, 8),\n       region,\n       serviceName,\n       v4Identifier\n     ].join('/');\n   },\n\n   /**\n    * @api private\n    *\n    * @param credentials [Credentials]\n    * @param date [String]\n    * @param region [String]\n    * @param service [String]\n    * @param shouldCache [Boolean]\n    * @return [String]\n    */\n   getSigningKey: function getSigningKey(\n     credentials,\n     date,\n     region,\n     service,\n     shouldCache\n   ) {\n     var credsIdentifier = AWS.util.crypto\n       .hmac(credentials.secretAccessKey, credentials.accessKeyId, 'base64');\n     var cacheKey = [credsIdentifier, date, region, service].join('_');\n     shouldCache = shouldCache !== false;\n     if (shouldCache && (cacheKey in cachedSecret)) {\n       return cachedSecret[cacheKey];\n     }\n\n     var kDate = AWS.util.crypto.hmac(\n       'AWS4' + credentials.secretAccessKey,\n       date,\n       'buffer'\n     );\n     var kRegion = AWS.util.crypto.hmac(kDate, region, 'buffer');\n     var kService = AWS.util.crypto.hmac(kRegion, service, 'buffer');\n\n     var signingKey = AWS.util.crypto.hmac(kService, v4Identifier, 'buffer');\n     if (shouldCache) {\n       cachedSecret[cacheKey] = signingKey;\n       cacheQueue.push(cacheKey);\n       if (cacheQueue.length > maxCacheEntries) {\n         // remove the oldest entry (not the least recently used)\n         delete cachedSecret[cacheQueue.shift()];\n       }\n     }\n\n     return signingKey;\n   },\n\n   /**\n    * @api private\n    *\n    * Empties the derived signing key cache. Made available for testing purposes\n    * only.\n    */\n   emptyCache: function emptyCache() {\n     cachedSecret = {};\n     cacheQueue = [];\n   }\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_createScope = module.exports.createScope;\n\n}, () => ({\n  '../core': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}