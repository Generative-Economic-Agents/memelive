System.register(["__unresolved_0", "__unresolved_1", "__unresolved_2"], function (_export, _context) {
  "use strict";

  var _cjsLoader, _req, _req0, _cjsExports, __cjsMetaURL;

  _export("default", void 0);

  return {
    setters: [function (_unresolved_) {
      _cjsLoader = _unresolved_.default;
    }, function (_unresolved_2) {
      _req = _unresolved_2.__cjsMetaURL;
    }, function (_unresolved_3) {
      _req0 = _unresolved_3.__cjsMetaURL;
    }],
    execute: function () {
      _export("__cjsMetaURL", __cjsMetaURL = _context.meta.url);

      _cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        // Generated by CoffeeScript 1.12.7
        (function () {
          var NodeType,
              XMLCData,
              XMLCharacterData,
              extend = function extend(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
              this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          },
              hasProp = {}.hasOwnProperty;

          NodeType = require('./NodeType');
          XMLCharacterData = require('./XMLCharacterData');

          module.exports = XMLCData = function (superClass) {
            extend(XMLCData, superClass);

            function XMLCData(parent, text) {
              XMLCData.__super__.constructor.call(this, parent);

              if (text == null) {
                throw new Error("Missing CDATA text. " + this.debugInfo());
              }

              this.name = "#cdata-section";
              this.type = NodeType.CData;
              this.value = this.stringify.cdata(text);
            }

            XMLCData.prototype.clone = function () {
              return Object.create(this);
            };

            XMLCData.prototype.toString = function (options) {
              return this.options.writer.cdata(this, this.options.writer.filterOptions(options));
            };

            return XMLCData;
          }(XMLCharacterData);
        }).call(this); // #endregion ORIGINAL CODE

        _export("default", _cjsExports = module.exports);
      }, () => ({
        './NodeType': _req,
        './XMLCharacterData': _req0
      }));
    }
  };
});
//# sourceMappingURL=733efebc162a2a93c2552ed08ed3c096c7215db0.js.map