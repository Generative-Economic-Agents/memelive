System.register(["__unresolved_0", "__unresolved_1", "__unresolved_2"], function (_export, _context) {
  "use strict";

  var _cjsLoader, _req, _req0, _cjsExports, __cjsMetaURL;

  _export("default", void 0);

  return {
    setters: [function (_unresolved_) {
      _cjsLoader = _unresolved_.default;
    }, function (_unresolved_2) {
      _req = _unresolved_2.__cjsMetaURL;
    }, function (_unresolved_3) {
      _req0 = _unresolved_3.__cjsMetaURL;
    }],
    execute: function () {
      _export("__cjsMetaURL", __cjsMetaURL = _context.meta.url);

      _cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        // Generated by CoffeeScript 1.12.7
        (function () {
          var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;
          XMLDOMErrorHandler = require('./XMLDOMErrorHandler');
          XMLDOMStringList = require('./XMLDOMStringList');

          module.exports = XMLDOMConfiguration = function () {
            function XMLDOMConfiguration() {
              var clonedSelf;
              this.defaultParams = {
                "canonical-form": false,
                "cdata-sections": false,
                "comments": false,
                "datatype-normalization": false,
                "element-content-whitespace": true,
                "entities": true,
                "error-handler": new XMLDOMErrorHandler(),
                "infoset": true,
                "validate-if-schema": false,
                "namespaces": true,
                "namespace-declarations": true,
                "normalize-characters": false,
                "schema-location": '',
                "schema-type": '',
                "split-cdata-sections": true,
                "validate": false,
                "well-formed": true
              };
              this.params = clonedSelf = Object.create(this.defaultParams);
            }

            Object.defineProperty(XMLDOMConfiguration.prototype, 'parameterNames', {
              get: function get() {
                return new XMLDOMStringList(Object.keys(this.defaultParams));
              }
            });

            XMLDOMConfiguration.prototype.getParameter = function (name) {
              if (this.params.hasOwnProperty(name)) {
                return this.params[name];
              } else {
                return null;
              }
            };

            XMLDOMConfiguration.prototype.canSetParameter = function (name, value) {
              return true;
            };

            XMLDOMConfiguration.prototype.setParameter = function (name, value) {
              if (value != null) {
                return this.params[name] = value;
              } else {
                return delete this.params[name];
              }
            };

            return XMLDOMConfiguration;
          }();
        }).call(this); // #endregion ORIGINAL CODE

        _export("default", _cjsExports = module.exports);
      }, () => ({
        './XMLDOMErrorHandler': _req,
        './XMLDOMStringList': _req0
      }));
    }
  };
});
//# sourceMappingURL=cf249bb6eaddc8675eae890bd9a55fce1385da24.js.map