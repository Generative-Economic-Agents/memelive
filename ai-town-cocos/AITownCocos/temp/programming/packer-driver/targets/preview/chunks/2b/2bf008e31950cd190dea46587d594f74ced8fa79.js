System.register(["__unresolved_0", "__unresolved_1", "__unresolved_2"], function (_export, _context) {
  "use strict";

  var _cjsLoader, _req, _req0, _cjsExports, __cjsMetaURL;

  _export("default", void 0);

  return {
    setters: [function (_unresolved_) {
      _cjsLoader = _unresolved_.default;
    }, function (_unresolved_2) {
      _req = _unresolved_2.__cjsMetaURL;
    }, function (_unresolved_3) {
      _req0 = _unresolved_3.__cjsMetaURL;
    }],
    execute: function () {
      _export("__cjsMetaURL", __cjsMetaURL = _context.meta.url);

      _cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        // Generated by CoffeeScript 1.12.7
        (function () {
          var NodeType,
              XMLDTDAttList,
              XMLNode,
              extend = function extend(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
              this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          },
              hasProp = {}.hasOwnProperty;

          XMLNode = require('./XMLNode');
          NodeType = require('./NodeType');

          module.exports = XMLDTDAttList = function (superClass) {
            extend(XMLDTDAttList, superClass);

            function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
              XMLDTDAttList.__super__.constructor.call(this, parent);

              if (elementName == null) {
                throw new Error("Missing DTD element name. " + this.debugInfo());
              }

              if (attributeName == null) {
                throw new Error("Missing DTD attribute name. " + this.debugInfo(elementName));
              }

              if (!attributeType) {
                throw new Error("Missing DTD attribute type. " + this.debugInfo(elementName));
              }

              if (!defaultValueType) {
                throw new Error("Missing DTD attribute default. " + this.debugInfo(elementName));
              }

              if (defaultValueType.indexOf('#') !== 0) {
                defaultValueType = '#' + defaultValueType;
              }

              if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
                throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. " + this.debugInfo(elementName));
              }

              if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
                throw new Error("Default value only applies to #FIXED or #DEFAULT. " + this.debugInfo(elementName));
              }

              this.elementName = this.stringify.name(elementName);
              this.type = NodeType.AttributeDeclaration;
              this.attributeName = this.stringify.name(attributeName);
              this.attributeType = this.stringify.dtdAttType(attributeType);

              if (defaultValue) {
                this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
              }

              this.defaultValueType = defaultValueType;
            }

            XMLDTDAttList.prototype.toString = function (options) {
              return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));
            };

            return XMLDTDAttList;
          }(XMLNode);
        }).call(this); // #endregion ORIGINAL CODE

        _export("default", _cjsExports = module.exports);
      }, () => ({
        './XMLNode': _req,
        './NodeType': _req0
      }));
    }
  };
});
//# sourceMappingURL=2bf008e31950cd190dea46587d594f74ced8fa79.js.map