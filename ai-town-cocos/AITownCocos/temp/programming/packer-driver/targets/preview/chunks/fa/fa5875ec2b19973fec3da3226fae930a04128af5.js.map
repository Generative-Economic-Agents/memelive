{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/sshpk/lib/formats/dnssec.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","_req4","_req5","url","define","exports","require","module","__filename","__dirname","read","write","assert","Buffer","Key","PrivateKey","utils","SSHBuffer","Dhe","supportedAlgos","supportedAlgosById","Object","keys","forEach","k","toUpperCase","buf","options","buffer","toString","lines","split","match","algElems","algoNum","parseInt","algoName","Error","readDNSSECPrivateKey","slice","line","length","readRFC3110","keyString","elems","algorithm","base64key","join","keyBuffer","from","publicExponentLen","readUInt8","publicExponent","mpNormalize","modulus","rsaKey","type","parts","push","name","data","curve","size","ecdsaKey","ecNormalize","elementToBuf","e","readDNSSECRSAPrivateKey","elements","rsaParams","element","key","alg","d","publicKey","publicFromPrivateECDSA","Q","part","dnssecTimestamp","date","year","getFullYear","month","getMonth","timestampStr","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","rsaAlgFromOptions","opts","hashAlgo","writeRSA","dmodp","dmodq","addRSAMissing","out","n","mpDenormalize","p","q","iqmp","timestamp","Date","writeECDSA","base64Key","isPrivateKey","isKey","_cjsExports","_read","_write"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'assert-plus';\nimport { __cjsMetaURL as _req0} from 'safer-buffer';\nimport { __cjsMetaURL as _req1} from '../key';\nimport { __cjsMetaURL as _req2} from '../private-key';\nimport { __cjsMetaURL as _req3} from '../utils';\nimport { __cjsMetaURL as _req4} from '../ssh-buffer';\nimport { __cjsMetaURL as _req5} from '../dhe';\nlet _cjsExports;\nlet _read;\nlet _write;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n // Copyright 2017 Joyent, Inc.\n\n module.exports = {\n \tread: read,\n \twrite: write\n };\n\n var assert = require('assert-plus');\n var Buffer = require('safer-buffer').Buffer;\n var Key = require('../key');\n var PrivateKey = require('../private-key');\n var utils = require('../utils');\n var SSHBuffer = require('../ssh-buffer');\n var Dhe = require('../dhe');\n\n var supportedAlgos = {\n \t'rsa-sha1' : 5,\n \t'rsa-sha256' : 8,\n \t'rsa-sha512' : 10,\n \t'ecdsa-p256-sha256' : 13,\n \t'ecdsa-p384-sha384' : 14\n \t/*\n \t * ed25519 is hypothetically supported with id 15\n \t * but the common tools available don't appear to be\n \t * capable of generating/using ed25519 keys\n \t */\n };\n\n var supportedAlgosById = {};\n Object.keys(supportedAlgos).forEach(function (k) {\n \tsupportedAlgosById[supportedAlgos[k]] = k.toUpperCase();\n });\n\n function read(buf, options) {\n \tif (typeof (buf) !== 'string') {\n \t\tassert.buffer(buf, 'buf');\n \t\tbuf = buf.toString('ascii');\n \t}\n \tvar lines = buf.split('\\n');\n \tif (lines[0].match(/^Private-key-format\\: v1/)) {\n \t\tvar algElems = lines[1].split(' ');\n \t\tvar algoNum = parseInt(algElems[1], 10);\n \t\tvar algoName = algElems[2];\n \t\tif (!supportedAlgosById[algoNum])\n \t\t\tthrow (new Error('Unsupported algorithm: ' + algoName));\n \t\treturn (readDNSSECPrivateKey(algoNum, lines.slice(2)));\n \t}\n\n \t// skip any comment-lines\n \tvar line = 0;\n \t/* JSSTYLED */\n \twhile (lines[line].match(/^\\;/))\n \t\tline++;\n \t// we should now have *one single* line left with our KEY on it.\n \tif ((lines[line].match(/\\. IN KEY /) ||\n \t    lines[line].match(/\\. IN DNSKEY /)) && lines[line+1].length === 0) {\n \t\treturn (readRFC3110(lines[line]));\n \t}\n \tthrow (new Error('Cannot parse dnssec key'));\n }\n\n function readRFC3110(keyString) {\n \tvar elems = keyString.split(' ');\n \t//unused var flags = parseInt(elems[3], 10);\n \t//unused var protocol = parseInt(elems[4], 10);\n \tvar algorithm = parseInt(elems[5], 10);\n \tif (!supportedAlgosById[algorithm])\n \t\tthrow (new Error('Unsupported algorithm: ' + algorithm));\n \tvar base64key = elems.slice(6, elems.length).join();\n \tvar keyBuffer = Buffer.from(base64key, 'base64');\n \tif (supportedAlgosById[algorithm].match(/^RSA-/)) {\n \t\t// join the rest of the body into a single base64-blob\n \t\tvar publicExponentLen = keyBuffer.readUInt8(0);\n \t\tif (publicExponentLen != 3 && publicExponentLen != 1)\n \t\t\tthrow (new Error('Cannot parse dnssec key: ' +\n \t\t\t    'unsupported exponent length'));\n\n \t\tvar publicExponent = keyBuffer.slice(1, publicExponentLen+1);\n \t\tpublicExponent = utils.mpNormalize(publicExponent);\n \t\tvar modulus = keyBuffer.slice(1+publicExponentLen);\n \t\tmodulus = utils.mpNormalize(modulus);\n \t\t// now, make the key\n \t\tvar rsaKey = {\n \t\t\ttype: 'rsa',\n \t\t\tparts: []\n \t\t};\n \t\trsaKey.parts.push({ name: 'e', data: publicExponent});\n \t\trsaKey.parts.push({ name: 'n', data: modulus});\n \t\treturn (new Key(rsaKey));\n \t}\n \tif (supportedAlgosById[algorithm] === 'ECDSA-P384-SHA384' ||\n \t    supportedAlgosById[algorithm] === 'ECDSA-P256-SHA256') {\n \t\tvar curve = 'nistp384';\n \t\tvar size = 384;\n \t\tif (supportedAlgosById[algorithm].match(/^ECDSA-P256-SHA256/)) {\n \t\t\tcurve = 'nistp256';\n \t\t\tsize = 256;\n \t\t}\n\n \t\tvar ecdsaKey = {\n \t\t\ttype: 'ecdsa',\n \t\t\tcurve: curve,\n \t\t\tsize: size,\n \t\t\tparts: [\n \t\t\t\t{name: 'curve', data: Buffer.from(curve) },\n \t\t\t\t{name: 'Q', data: utils.ecNormalize(keyBuffer) }\n \t\t\t]\n \t\t};\n \t\treturn (new Key(ecdsaKey));\n \t}\n \tthrow (new Error('Unsupported algorithm: ' +\n \t    supportedAlgosById[algorithm]));\n }\n\n function elementToBuf(e) {\n \treturn (Buffer.from(e.split(' ')[1], 'base64'));\n }\n\n function readDNSSECRSAPrivateKey(elements) {\n \tvar rsaParams = {};\n \telements.forEach(function (element) {\n \t\tif (element.split(' ')[0] === 'Modulus:')\n \t\t\trsaParams['n'] = elementToBuf(element);\n \t\telse if (element.split(' ')[0] === 'PublicExponent:')\n \t\t\trsaParams['e'] = elementToBuf(element);\n \t\telse if (element.split(' ')[0] === 'PrivateExponent:')\n \t\t\trsaParams['d'] = elementToBuf(element);\n \t\telse if (element.split(' ')[0] === 'Prime1:')\n \t\t\trsaParams['p'] = elementToBuf(element);\n \t\telse if (element.split(' ')[0] === 'Prime2:')\n \t\t\trsaParams['q'] = elementToBuf(element);\n \t\telse if (element.split(' ')[0] === 'Exponent1:')\n \t\t\trsaParams['dmodp'] = elementToBuf(element);\n \t\telse if (element.split(' ')[0] === 'Exponent2:')\n \t\t\trsaParams['dmodq'] = elementToBuf(element);\n \t\telse if (element.split(' ')[0] === 'Coefficient:')\n \t\t\trsaParams['iqmp'] = elementToBuf(element);\n \t});\n \t// now, make the key\n \tvar key = {\n \t\ttype: 'rsa',\n \t\tparts: [\n \t\t\t{ name: 'e', data: utils.mpNormalize(rsaParams['e'])},\n \t\t\t{ name: 'n', data: utils.mpNormalize(rsaParams['n'])},\n \t\t\t{ name: 'd', data: utils.mpNormalize(rsaParams['d'])},\n \t\t\t{ name: 'p', data: utils.mpNormalize(rsaParams['p'])},\n \t\t\t{ name: 'q', data: utils.mpNormalize(rsaParams['q'])},\n \t\t\t{ name: 'dmodp',\n \t\t\t    data: utils.mpNormalize(rsaParams['dmodp'])},\n \t\t\t{ name: 'dmodq',\n \t\t\t    data: utils.mpNormalize(rsaParams['dmodq'])},\n \t\t\t{ name: 'iqmp',\n \t\t\t    data: utils.mpNormalize(rsaParams['iqmp'])}\n \t\t]\n \t};\n \treturn (new PrivateKey(key));\n }\n\n function readDNSSECPrivateKey(alg, elements) {\n \tif (supportedAlgosById[alg].match(/^RSA-/)) {\n \t\treturn (readDNSSECRSAPrivateKey(elements));\n \t}\n \tif (supportedAlgosById[alg] === 'ECDSA-P384-SHA384' ||\n \t    supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {\n \t\tvar d = Buffer.from(elements[0].split(' ')[1], 'base64');\n \t\tvar curve = 'nistp384';\n \t\tvar size = 384;\n \t\tif (supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {\n \t\t\tcurve = 'nistp256';\n \t\t\tsize = 256;\n \t\t}\n \t\t// DNSSEC generates the public-key on the fly (go calculate it)\n \t\tvar publicKey = utils.publicFromPrivateECDSA(curve, d);\n \t\tvar Q = publicKey.part['Q'].data;\n \t\tvar ecdsaKey = {\n \t\t\ttype: 'ecdsa',\n \t\t\tcurve: curve,\n \t\t\tsize: size,\n \t\t\tparts: [\n \t\t\t\t{name: 'curve', data: Buffer.from(curve) },\n \t\t\t\t{name: 'd', data: d },\n \t\t\t\t{name: 'Q', data: Q }\n \t\t\t]\n \t\t};\n \t\treturn (new PrivateKey(ecdsaKey));\n \t}\n \tthrow (new Error('Unsupported algorithm: ' + supportedAlgosById[alg]));\n }\n\n function dnssecTimestamp(date) {\n \tvar year = date.getFullYear() + ''; //stringify\n \tvar month = (date.getMonth() + 1);\n \tvar timestampStr = year + month + date.getUTCDate();\n \ttimestampStr += '' + date.getUTCHours() + date.getUTCMinutes();\n \ttimestampStr += date.getUTCSeconds();\n \treturn (timestampStr);\n }\n\n function rsaAlgFromOptions(opts) {\n \tif (!opts || !opts.hashAlgo || opts.hashAlgo === 'sha1')\n \t\treturn ('5 (RSASHA1)');\n \telse if (opts.hashAlgo === 'sha256')\n \t\treturn ('8 (RSASHA256)');\n \telse if (opts.hashAlgo === 'sha512')\n \t\treturn ('10 (RSASHA512)');\n \telse\n \t\tthrow (new Error('Unknown or unsupported hash: ' +\n \t\t    opts.hashAlgo));\n }\n\n function writeRSA(key, options) {\n \t// if we're missing parts, add them.\n \tif (!key.part.dmodp || !key.part.dmodq) {\n \t\tutils.addRSAMissing(key);\n \t}\n\n \tvar out = '';\n \tout += 'Private-key-format: v1.3\\n';\n \tout += 'Algorithm: ' + rsaAlgFromOptions(options) + '\\n';\n \tvar n = utils.mpDenormalize(key.part['n'].data);\n \tout += 'Modulus: ' + n.toString('base64') + '\\n';\n \tvar e = utils.mpDenormalize(key.part['e'].data);\n \tout += 'PublicExponent: ' + e.toString('base64') + '\\n';\n \tvar d = utils.mpDenormalize(key.part['d'].data);\n \tout += 'PrivateExponent: ' + d.toString('base64') + '\\n';\n \tvar p = utils.mpDenormalize(key.part['p'].data);\n \tout += 'Prime1: ' + p.toString('base64') + '\\n';\n \tvar q = utils.mpDenormalize(key.part['q'].data);\n \tout += 'Prime2: ' + q.toString('base64') + '\\n';\n \tvar dmodp = utils.mpDenormalize(key.part['dmodp'].data);\n \tout += 'Exponent1: ' + dmodp.toString('base64') + '\\n';\n \tvar dmodq = utils.mpDenormalize(key.part['dmodq'].data);\n \tout += 'Exponent2: ' + dmodq.toString('base64') + '\\n';\n \tvar iqmp = utils.mpDenormalize(key.part['iqmp'].data);\n \tout += 'Coefficient: ' + iqmp.toString('base64') + '\\n';\n \t// Assume that we're valid as-of now\n \tvar timestamp = new Date();\n \tout += 'Created: ' + dnssecTimestamp(timestamp) + '\\n';\n \tout += 'Publish: ' + dnssecTimestamp(timestamp) + '\\n';\n \tout += 'Activate: ' + dnssecTimestamp(timestamp) + '\\n';\n \treturn (Buffer.from(out, 'ascii'));\n }\n\n function writeECDSA(key, options) {\n \tvar out = '';\n \tout += 'Private-key-format: v1.3\\n';\n\n \tif (key.curve === 'nistp256') {\n \t\tout += 'Algorithm: 13 (ECDSAP256SHA256)\\n';\n \t} else if (key.curve === 'nistp384') {\n \t\tout += 'Algorithm: 14 (ECDSAP384SHA384)\\n';\n \t} else {\n \t\tthrow (new Error('Unsupported curve'));\n \t}\n \tvar base64Key = key.part['d'].data.toString('base64');\n \tout += 'PrivateKey: ' + base64Key + '\\n';\n\n \t// Assume that we're valid as-of now\n \tvar timestamp = new Date();\n \tout += 'Created: ' + dnssecTimestamp(timestamp) + '\\n';\n \tout += 'Publish: ' + dnssecTimestamp(timestamp) + '\\n';\n \tout += 'Activate: ' + dnssecTimestamp(timestamp) + '\\n';\n\n \treturn (Buffer.from(out, 'ascii'));\n }\n\n function write(key, options) {\n \tif (PrivateKey.isPrivateKey(key)) {\n \t\tif (key.type === 'rsa') {\n \t\t\treturn (writeRSA(key, options));\n \t\t} else if (key.type === 'ecdsa') {\n \t\t\treturn (writeECDSA(key, options));\n \t\t} else {\n \t\t\tthrow (new Error('Unsupported algorithm: ' + key.type));\n \t\t}\n \t} else if (Key.isKey(key)) {\n \t\t/*\n \t\t * RFC3110 requires a keyname, and a keytype, which we\n \t\t * don't really have a mechanism for specifying such\n \t\t * additional metadata.\n \t\t */\n \t\tthrow (new Error('Format \"dnssec\" only supports ' +\n \t\t    'writing private keys'));\n \t} else {\n \t\tthrow (new Error('key is not a Key or PrivateKey'));\n \t}\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_read = module.exports.read;\n_write = module.exports.write;\n\n}, () => ({\n  'assert-plus': _req,\n  'safer-buffer': _req0,\n  '../key': _req1,\n  '../private-key': _req2,\n  '../utils': _req3,\n  '../ssh-buffer': _req4,\n  '../dhe': _req5,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}