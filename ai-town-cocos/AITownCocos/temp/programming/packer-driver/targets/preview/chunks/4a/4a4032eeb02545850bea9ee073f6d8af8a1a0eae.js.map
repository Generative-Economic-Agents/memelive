{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/event-stream/int64.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","util","toBuffer","buffer","Int64","bytes","length","Error","Buffer","isBuffer","fromNumber","number","Uint8Array","i","remaining","Math","abs","round","negate","prototype","valueOf","slice","negative","parseInt","toString","String","_cjsExports","_Int64"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nlet _cjsExports;\nlet _Int64;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var util = require('../core').util;\n var toBuffer = util.buffer.toBuffer;\n\n /**\n  * A lossless representation of a signed, 64-bit integer. Instances of this\n  * class may be used in arithmetic expressions as if they were numeric\n  * primitives, but the binary representation will be preserved unchanged as the\n  * `bytes` property of the object. The bytes should be encoded as big-endian,\n  * two's complement integers.\n  * @param {Buffer} bytes\n  *\n  * @api private\n  */\n function Int64(bytes) {\n     if (bytes.length !== 8) {\n         throw new Error('Int64 buffers must be exactly 8 bytes');\n     }\n     if (!util.Buffer.isBuffer(bytes)) bytes = toBuffer(bytes);\n\n     this.bytes = bytes;\n }\n\n /**\n  * @param {number} number\n  * @returns {Int64}\n  *\n  * @api private\n  */\n Int64.fromNumber = function(number) {\n     if (number > 9223372036854775807 || number < -9223372036854775808) {\n         throw new Error(\n             number + ' is too large (or, if negative, too small) to represent as an Int64'\n         );\n     }\n\n     var bytes = new Uint8Array(8);\n     for (\n         var i = 7, remaining = Math.abs(Math.round(number));\n         i > -1 && remaining > 0;\n         i--, remaining /= 256\n     ) {\n         bytes[i] = remaining;\n     }\n\n     if (number < 0) {\n         negate(bytes);\n     }\n\n     return new Int64(bytes);\n };\n\n /**\n  * @returns {number}\n  *\n  * @api private\n  */\n Int64.prototype.valueOf = function() {\n     var bytes = this.bytes.slice(0);\n     var negative = bytes[0] & 128;\n     if (negative) {\n         negate(bytes);\n     }\n\n     return parseInt(bytes.toString('hex'), 16) * (negative ? -1 : 1);\n };\n\n Int64.prototype.toString = function() {\n     return String(this.valueOf());\n };\n\n /**\n  * @param {Buffer} bytes\n  *\n  * @api private\n  */\n function negate(bytes) {\n     for (var i = 0; i < 8; i++) {\n         bytes[i] ^= 0xFF;\n     }\n     for (var i = 7; i > -1; i--) {\n         bytes[i]++;\n         if (bytes[i] !== 0) {\n             break;\n         }\n     }\n }\n\n /**\n  * @api private\n  */\n module.exports = {\n     Int64: Int64\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_Int64 = module.exports.Int64;\n\n}, () => ({\n  '../core': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}