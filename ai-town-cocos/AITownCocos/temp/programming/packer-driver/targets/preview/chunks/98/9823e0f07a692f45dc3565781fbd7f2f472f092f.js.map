{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/_isFlattenable.js"],"names":["isFlattenable","value","isArray","isArguments","spreadableSymbol","Symbol","isConcatSpreadable","undefined"],"mappings":";;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,WAAOC,OAAO,CAACD,KAAD,CAAP,IAAkBE,WAAW,CAACF,KAAD,CAA7B,IACL,CAAC,EAAEG,gBAAgB,IAAIH,KAApB,IAA6BA,KAAK,CAACG,gBAAD,CAApC,CADH;AAED;;;;AAjBMC,MAAAA,M;;AACAF,MAAAA,W;;AACAD,MAAAA,O;;;AAEP;AACIE,MAAAA,gB,GAAmBC,MAAM,GAAGA,MAAM,CAACC,kBAAV,GAA+BC,S;;yBAc7CP,a","sourcesContent":["import Symbol from './_Symbol.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nexport default isFlattenable;\n"]}