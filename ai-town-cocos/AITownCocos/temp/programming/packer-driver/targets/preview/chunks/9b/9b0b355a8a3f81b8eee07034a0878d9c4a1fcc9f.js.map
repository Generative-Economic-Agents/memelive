{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/metadata_service.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","url","define","exports","require","module","__filename","__dirname","AWS","inherit","util","getMetadataServiceEndpoint","URL","MetadataService","endpoint","httpOptions","timeout","disableFetchToken","constructor","options","host","profile","process","env","AWS_PROFILE","defaultProfile","ec2MetadataV1Disabled","filename","update","request","path","callback","arguments","length","imdsDisabledEnv","Error","httpRequest","HttpRequest","method","headers","handleRequestWithRetries","loadCredentialsCallbacks","fetchMetadataToken","self","tokenFetchPath","fetchCredentials","cb","basePath","isImdsV1Fallback","AWS_EC2_METADATA_DISABLED","profiles","getProfilesFromSharedConfig","iniLoader","profileSettings","e","ec2_metadata_v1_disabled","error","AWS_EC2_METADATA_V1_DISABLED","err","roleName","statusCode","message","split","credErr","credData","credentials","JSON","parse","parseError","loadCredentials","push","callbacks","creds","shift","undefined","tokenError","token","code","retryable","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './core';\nimport { __cjsMetaURL as _req0} from './http';\nimport { __cjsMetaURL as _req1} from './metadata_service/get_metadata_service_endpoint';\nimport { __cjsMetaURL as _req2} from 'url';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('./core');\n require('./http');\n var inherit = AWS.util.inherit;\n var getMetadataServiceEndpoint = require('./metadata_service/get_metadata_service_endpoint');\n var URL = require('url').URL;\n\n /**\n  * Represents a metadata service available on EC2 instances. Using the\n  * {request} method, you can receieve metadata about any available resource\n  * on the metadata service.\n  *\n  * You can disable the use of the IMDS by setting the AWS_EC2_METADATA_DISABLED\n  * environment variable to a truthy value.\n  *\n  * @!attribute [r] httpOptions\n  *   @return [map] a map of options to pass to the underlying HTTP request:\n  *\n  *     * **timeout** (Number) &mdash; a timeout value in milliseconds to wait\n  *       before aborting the connection. Set to 0 for no timeout.\n  *\n  * @!macro nobrowser\n  */\n AWS.MetadataService = inherit({\n   /**\n    * @return [String] the endpoint of the instance metadata service\n    */\n   endpoint: getMetadataServiceEndpoint(),\n\n   /**\n    * @!ignore\n    */\n\n   /**\n    * Default HTTP options. By default, the metadata service is set to not\n    * timeout on long requests. This means that on non-EC2 machines, this\n    * request will never return. If you are calling this operation from an\n    * environment that may not always run on EC2, set a `timeout` value so\n    * the SDK will abort the request after a given number of milliseconds.\n    */\n   httpOptions: { timeout: 0 },\n\n   /**\n    * when enabled, metadata service will not fetch token\n    */\n   disableFetchToken: false,\n\n   /**\n    * Creates a new MetadataService object with a given set of options.\n    *\n    * @option options host [String] the hostname of the instance metadata\n    *   service\n    * @option options httpOptions [map] a map of options to pass to the\n    *   underlying HTTP request:\n    *\n    *   * **timeout** (Number) &mdash; a timeout value in milliseconds to wait\n    *     before aborting the connection. Set to 0 for no timeout.\n    * @option options maxRetries [Integer] the maximum number of retries to\n    *   perform for timeout errors\n    * @option options retryDelayOptions [map] A set of options to configure the\n    *   retry delay on retryable errors. See AWS.Config for details.\n    * @option options ec2MetadataV1Disabled [boolean] Whether to block IMDS v1 fallback.\n    * @option options profile [string] A profile to check for IMDSv1 fallback settings.\n    * @option options filename [string] Optional filename for the config file.\n    */\n   constructor: function MetadataService(options) {\n     if (options && options.host) {\n       options.endpoint = 'http://' + options.host;\n       delete options.host;\n     }\n     this.profile = options && options.profile || process.env.AWS_PROFILE || AWS.util.defaultProfile;\n     this.ec2MetadataV1Disabled = !!(options && options.ec2MetadataV1Disabled);\n     this.filename = options && options.filename;\n     AWS.util.update(this, options);\n   },\n\n   /**\n    * Sends a request to the instance metadata service for a given resource.\n    *\n    * @param path [String] the path of the resource to get\n    *\n    * @param options [map] an optional map used to make request\n    *\n    *   * **method** (String) &mdash; HTTP request method\n    *\n    *   * **headers** (map<String,String>) &mdash; a map of response header keys and their respective values\n    *\n    * @callback callback function(err, data)\n    *   Called when a response is available from the service.\n    *   @param err [Error, null] if an error occurred, this value will be set\n    *   @param data [String, null] if the request was successful, the body of\n    *     the response\n    */\n   request: function request(path, options, callback) {\n     if (arguments.length === 2) {\n       callback = options;\n       options = {};\n     }\n\n     if (process.env[AWS.util.imdsDisabledEnv]) {\n       callback(new Error('EC2 Instance Metadata Service access disabled'));\n       return;\n     }\n\n     path = path || '/';\n\n     // Verify that host is a valid URL\n     if (URL) { new URL(this.endpoint); }\n\n     var httpRequest = new AWS.HttpRequest(this.endpoint + path);\n     httpRequest.method = options.method || 'GET';\n     if (options.headers) {\n       httpRequest.headers = options.headers;\n     }\n     AWS.util.handleRequestWithRetries(httpRequest, this, callback);\n   },\n\n   /**\n   * @api private\n   */\n   loadCredentialsCallbacks: [],\n\n   /**\n    * Fetches metadata token used for authenticating against the instance metadata service.\n    *\n    * @callback callback function(err, token)\n    *   Called when token is loaded from the resource\n    */\n   fetchMetadataToken: function fetchMetadataToken(callback) {\n     var self = this;\n     var tokenFetchPath = '/latest/api/token';\n     self.request(\n       tokenFetchPath,\n       {\n         'method': 'PUT',\n         'headers': {\n           'x-aws-ec2-metadata-token-ttl-seconds': '21600'\n         }\n       },\n       callback\n     );\n   },\n\n   /**\n    * Fetches credentials\n    *\n    * @api private\n    * @callback cb function(err, creds)\n    *   Called when credentials are loaded from the resource\n    */\n   fetchCredentials: function fetchCredentials(options, cb) {\n     var self = this;\n     var basePath = '/latest/meta-data/iam/security-credentials/';\n\n     var isImdsV1Fallback = self.disableFetchToken\n       || !(options && options.headers && options.headers['x-aws-ec2-metadata-token']);\n\n     if (isImdsV1Fallback && !(process.env.AWS_EC2_METADATA_DISABLED)) {\n       try {\n         var profiles = AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader, this.filename);\n         var profileSettings = profiles[this.profile] || {};\n       } catch (e) {\n         profileSettings = {};\n       }\n\n       if (profileSettings.ec2_metadata_v1_disabled && profileSettings.ec2_metadata_v1_disabled !== 'false') {\n         return cb(AWS.util.error(\n           new Error('AWS EC2 Metadata v1 fallback has been blocked by AWS config file profile.')\n         ));\n       }\n\n       if (self.ec2MetadataV1Disabled) {\n         return cb(AWS.util.error(\n           new Error('AWS EC2 Metadata v1 fallback has been blocked by AWS.MetadataService::options.ec2MetadataV1Disabled=true.')\n         ));\n       }\n\n       if (process.env.AWS_EC2_METADATA_V1_DISABLED && process.env.AWS_EC2_METADATA_V1_DISABLED !== 'false') {\n         return cb(AWS.util.error(\n           new Error('AWS EC2 Metadata v1 fallback has been blocked by process.env.AWS_EC2_METADATA_V1_DISABLED.')\n         ));\n       }\n     }\n\n     self.request(basePath, options, function (err, roleName) {\n       if (err) {\n         self.disableFetchToken = !(err.statusCode === 401);\n         cb(AWS.util.error(\n           err,\n           {\n             message: 'EC2 Metadata roleName request returned error'\n           }\n         ));\n         return;\n       }\n       roleName = roleName.split('\\n')[0]; // grab first (and only) role\n       self.request(basePath + roleName, options, function (credErr, credData) {\n         if (credErr) {\n           self.disableFetchToken = !(credErr.statusCode === 401);\n           cb(AWS.util.error(\n             credErr,\n             {\n               message: 'EC2 Metadata creds request returned error'\n             }\n           ));\n           return;\n         }\n         try {\n           var credentials = JSON.parse(credData);\n           cb(null, credentials);\n         } catch (parseError) {\n           cb(parseError);\n         }\n       });\n     });\n   },\n\n   /**\n    * Loads a set of credentials stored in the instance metadata service\n    *\n    * @api private\n    * @callback callback function(err, credentials)\n    *   Called when credentials are loaded from the resource\n    *   @param err [Error] if an error occurred, this value will be set\n    *   @param credentials [Object] the raw JSON object containing all\n    *     metadata from the credentials resource\n    */\n   loadCredentials: function loadCredentials(callback) {\n     var self = this;\n     self.loadCredentialsCallbacks.push(callback);\n     if (self.loadCredentialsCallbacks.length > 1) { return; }\n\n     function callbacks(err, creds) {\n       var cb;\n       while ((cb = self.loadCredentialsCallbacks.shift()) !== undefined) {\n         cb(err, creds);\n       }\n     }\n\n     if (self.disableFetchToken) {\n       self.fetchCredentials({}, callbacks);\n     } else {\n       self.fetchMetadataToken(function(tokenError, token) {\n         if (tokenError) {\n           if (tokenError.code === 'TimeoutError') {\n             self.disableFetchToken = true;\n           } else if (tokenError.retryable === true) {\n             callbacks(AWS.util.error(\n               tokenError,\n               {\n                 message: 'EC2 Metadata token request returned error'\n               }\n             ));\n             return;\n           } else if (tokenError.statusCode === 400) {\n             callbacks(AWS.util.error(\n               tokenError,\n               {\n                 message: 'EC2 Metadata token request returned 400'\n               }\n             ));\n             return;\n           }\n         }\n         var options = {};\n         if (token) {\n           options.headers = {\n             'x-aws-ec2-metadata-token': token\n           };\n         }\n         self.fetchCredentials(options, callbacks);\n       });\n\n     }\n   }\n });\n\n /**\n  * @api private\n  */\n module.exports = AWS.MetadataService;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './core': _req,\n  './http': _req0,\n  './metadata_service/get_metadata_service_endpoint': _req1,\n  'url': _req2,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}