{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/intersectionBy.js"],"names":["arrayMap","baseIntersection","baseIteratee","baseRest","castArrayLikeObject","last","intersectionBy","arrays","iteratee","mapped","undefined","pop","length"],"mappings":";;;;;;AAAOA,MAAAA,Q;;AACAC,MAAAA,gB;;AACAC,MAAAA,Y;;AACAC,MAAAA,Q;;AACAC,MAAAA,mB;;AACAC,MAAAA,I;;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,c,GAAiBH,QAAQ,CAAC,UAASI,MAAT,EAAiB;AAC7C,YAAIC,QAAQ,GAAGH,IAAI,CAACE,MAAD,CAAnB;AAAA,YACIE,MAAM,GAAGT,QAAQ,CAACO,MAAD,EAASH,mBAAT,CADrB;;AAGA,YAAII,QAAQ,KAAKH,IAAI,CAACI,MAAD,CAArB,EAA+B;AAC7BD,UAAAA,QAAQ,GAAGE,SAAX;AACD,SAFD,MAEO;AACLD,UAAAA,MAAM,CAACE,GAAP;AACD;;AACD,eAAQF,MAAM,CAACG,MAAP,IAAiBH,MAAM,CAAC,CAAD,CAAN,KAAcF,MAAM,CAAC,CAAD,CAAtC,GACHN,gBAAgB,CAACQ,MAAD,EAASP,YAAY,CAACM,QAAD,EAAW,CAAX,CAArB,CADb,GAEH,EAFJ;AAGD,OAZ4B,C;;yBAcdF,c","sourcesContent":["import arrayMap from './_arrayMap.js';\nimport baseIntersection from './_baseIntersection.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseRest from './_baseRest.js';\nimport castArrayLikeObject from './_castArrayLikeObject.js';\nimport last from './last.js';\n\n/**\n * This method is like `_.intersection` except that it accepts `iteratee`\n * which is invoked for each element of each `arrays` to generate the criterion\n * by which they're compared. The order and references of result values are\n * determined by the first array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n * // => [2.1]\n *\n * // The `_.property` iteratee shorthand.\n * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }]\n */\nvar intersectionBy = baseRest(function(arrays) {\n  var iteratee = last(arrays),\n      mapped = arrayMap(arrays, castArrayLikeObject);\n\n  if (iteratee === last(mapped)) {\n    iteratee = undefined;\n  } else {\n    mapped.pop();\n  }\n  return (mapped.length && mapped[0] === arrays[0])\n    ? baseIntersection(mapped, baseIteratee(iteratee, 2))\n    : [];\n});\n\nexport default intersectionBy;\n"]}