{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/assets/src/module/main/ScrollingText.ts"],"names":["_decorator","Component","Label","Vec3","tween","UITransform","ccclass","property","ScrollingText","scrollDuration","_currentLoop","_originalPosition","start","node","position","clone","startScroll","txt","setText","scheduleOnce","setPosition","startScrolling","label","getComponent","labelWidth","width","x","scrollSpeed","endPosition","y","z","to","call","loopCount","emit","content","string"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,W,OAAAA,W;;;;;;;;;OAG9C;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;+BAGjBQ,a,WADZF,OAAO,CAAC,eAAD,C,UAGHC,QAAQ,CAACL,KAAD,C,2BAHb,MACaM,aADb,SACmCP,SADnC,CAC6C;AAAA;AAAA;;AAAA;;AAAA,eAKjCQ,cALiC,GAKR,CALQ;;AAKL;AALK;;AAOR;AAPQ;;AASX;AATW,eAWjCC,YAXiC,GAWV,CAXU;AAWP;AAXO,eAYjCC,iBAZiC,GAYP,IAAIR,IAAJ,EAZO;AAAA;;AAYK;AAI9CS,QAAAA,KAAK,GAAG;AACJ;AACA;AACA;AACA;AAEA,eAAKD,iBAAL,GAAyB,KAAKE,IAAL,CAAUC,QAAV,CAAmBC,KAAnB,EAAzB;AACH;;AACDC,QAAAA,WAAW,CAACC,GAAD,EAAW;AAClB,eAAKC,OAAL,CAAaD,GAAb;AACA,eAAKE,YAAL,CAAkB,MAAI;AAClB,iBAAKN,IAAL,CAAUO,WAAV,CAAsB,KAAKT,iBAA3B;AACA,iBAAKU,cAAL;AACH,WAHD,EAGE,CAHF;AAIH;;AACDA,QAAAA,cAAc,GAAG;AACb,cAAI,KAAKC,KAAL,IAAc,KAAKA,KAAL,CAAWT,IAAX,CAAgBU,YAAhB,CAA6BlB,WAA7B,CAAlB,EAA6D;AACzD;AACA,gBAAMmB,UAAU,GAAG,KAAKF,KAAL,CAAWT,IAAX,CAAgBU,YAAhB,CAA6BlB,WAA7B,EAA2CoB,KAA9D;AACA,iBAAKhB,cAAL,GAAsB,CAACe,UAAU,GAAE,KAAKb,iBAAL,CAAuBe,CAApC,IAAuC,KAAKC,WAAlE;AACA,gBAAMC,WAAW,GAAG,IAAIzB,IAAJ,CAAS,CAACqB,UAAV,EAAsB,KAAKb,iBAAL,CAAuBkB,CAA7C,EAAgD,KAAKlB,iBAAL,CAAuBmB,CAAvE,CAApB,CAJyD,CAMzD;;AACA1B,YAAAA,KAAK,CAAC,KAAKS,IAAN,CAAL,CACKkB,EADL,CACQ,KAAKtB,cADb,EAC6B;AAAEK,cAAAA,QAAQ,EAAEc;AAAZ,aAD7B,EAEKI,IAFL,CAEU,MAAM;AACR;AACA,mBAAKtB,YAAL;;AACA,kBAAI,KAAKA,YAAL,GAAoB,KAAKuB,SAA7B,EAAwC;AACpC;AACA,qBAAKpB,IAAL,CAAUC,QAAV,GAAqB,KAAKH,iBAA1B;AACA,qBAAKU,cAAL;AACH,eAJD,MAIO;AACH;AACA,qBAAKR,IAAL,CAAUqB,IAAV,CAAe,oBAAf,EAFG,CAGH;;AACA,qBAAKxB,YAAL,GAAoB,CAApB;AACH;AACJ,aAfL,EAgBKE,KAhBL;AAiBH;AACJ,SAzDwC,CA2DzC;;;AACAM,QAAAA,OAAO,CAACiB,OAAD,EAAkB;AACrB,cAAI,KAAKb,KAAT,EAAgB;AACZ,iBAAKA,KAAL,CAAWc,MAAX,GAAoBD,OAApB;AACH;AACJ;;AAhEwC,O;;;;;iBAGZ,I;;sFAG5B5B,Q;;;;;iBAC4B,G;;oFAC5BA,Q;;;;;iBAC0B,C;;kCA0D/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { _decorator, Component, Label, Vec3, tween, UITransform, SystemEvent } from 'cc';\nimport { modelMgr } from '../../game/App';\nimport StaticConfigModel from '../../model/StaticConfig/StaticConfigModel';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ScrollingText')\nexport class ScrollingText extends Component {\n\n    @property(Label)\n    public label: Label | null = null;\n\n    private scrollDuration: number = 5; // 滚动一次的持续时间\n    @property\n    public scrollSpeed: number = 100;//一秒钟滚动多少宽度\n    @property\n    public loopCount: number = 3; // 循环次数\n\n    private _currentLoop: number = 0; // 当前循环次数\n    private _originalPosition: Vec3 = new Vec3(); // 原始位置\n\n\n    \n    start() {\n        //test...\n        //    let obj=  modelMgr.configModel.getconfigByGrpAId(StaticConfigModel.TaskCfg,10005);\n        //   this.startScroll(obj.showmsg)        // 保存原始位置\n        // 保存原始位置\n\n        this._originalPosition = this.node.position.clone();\n    }\n    startScroll(txt: any) {\n        this.setText(txt);\n        this.scheduleOnce(()=>{\n            this.node.setPosition(this._originalPosition);\n            this.startScrolling();\n        },0)\n    }\n    startScrolling() {\n        if (this.label && this.label.node.getComponent(UITransform)) {\n            // 计算文本结束位置\n            const labelWidth = this.label.node.getComponent(UITransform)!.width;\n            this.scrollDuration = (labelWidth+ this._originalPosition.x)/this.scrollSpeed;\n            const endPosition = new Vec3(-labelWidth, this._originalPosition.y, this._originalPosition.z);\n\n            // 创建并运行滚动动画\n            tween(this.node)\n                .to(this.scrollDuration, { position: endPosition })\n                .call(() => {\n                    // 循环逻辑\n                    this._currentLoop++;\n                    if (this._currentLoop < this.loopCount) {\n                        // 重置位置并重新开始滚动\n                        this.node.position = this._originalPosition;\n                        this.startScrolling();\n                    } else {\n                        // 抛出完成事件\n                        this.node.emit('scrolling-finished');\n                        // 重置循环次数\n                        this._currentLoop = 0;\n                    }\n                })\n                .start();\n        }\n    }\n\n    // 设置文本内容的方法\n    setText(content: string) {\n        if (this.label) {\n            this.label.string = content;\n        }\n    }\n}\n\n// 其他对象监听 'scrolling-finished' 事件的示例\n// const scrollingTextComponent = this.node.getComponent(ScrollingText);\n// if (scrollingTextComponent) {\n//     scrollingTextComponent.node.on('scrolling-finished', () => {\n//         console.log('Scrolling finished!');\n//         // 在这里执行其他逻辑\n//     });\n// }"]}