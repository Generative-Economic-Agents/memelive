{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/_baseToString.js"],"names":["baseToString","value","isArray","arrayMap","isSymbol","symbolToString","call","result","INFINITY","Symbol","symbolProto","prototype","undefined","toString"],"mappings":";;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B;AACA,QAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC5B,aAAOA,KAAP;AACD;;AACD,QAAIC,OAAO,CAACD,KAAD,CAAX,EAAoB;AAClB;AACA,aAAOE,QAAQ,CAACF,KAAD,EAAQD,YAAR,CAAR,GAAgC,EAAvC;AACD;;AACD,QAAII,QAAQ,CAACH,KAAD,CAAZ,EAAqB;AACnB,aAAOI,cAAc,GAAGA,cAAc,CAACC,IAAf,CAAoBL,KAApB,CAAH,GAAgC,EAArD;AACD;;AACD,QAAIM,MAAM,GAAIN,KAAK,GAAG,EAAtB;AACA,WAAQM,MAAM,IAAI,GAAV,IAAkB,IAAIN,KAAL,IAAe,CAACO,QAAlC,GAA8C,IAA9C,GAAqDD,MAA5D;AACD;;;;AAlCME,MAAAA,M;;AACAN,MAAAA,Q;;AACAD,MAAAA,O;;AACAE,MAAAA,Q;;;AAEP;AACII,MAAAA,Q,GAAW,IAAI,C;AAEnB;;AACIE,MAAAA,W,GAAcD,MAAM,GAAGA,MAAM,CAACE,SAAV,GAAsBC,S;AAC1CP,MAAAA,c,GAAiBK,WAAW,GAAGA,WAAW,CAACG,QAAf,GAA0BD,S;;yBA0B3CZ,Y","sourcesContent":["import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n"]}