{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/_baseIsTypedArray.js"],"names":["baseIsTypedArray","value","isObjectLike","isLength","length","typedArrayTags","baseGetTag","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag"],"mappings":";;;;;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,WAAOC,YAAY,CAACD,KAAD,CAAZ,IACLE,QAAQ,CAACF,KAAK,CAACG,MAAP,CADH,IACqB,CAAC,CAACC,cAAc,CAACC,UAAU,CAACL,KAAD,CAAX,CAD5C;AAED;;;;AAzDMK,MAAAA,U;;AACAH,MAAAA,Q;;AACAD,MAAAA,Y;;;AAEP;AACIK,MAAAA,O,GAAU,oB;AACVC,MAAAA,Q,GAAW,gB;AACXC,MAAAA,O,GAAU,kB;AACVC,MAAAA,O,GAAU,e;AACVC,MAAAA,Q,GAAW,gB;AACXC,MAAAA,O,GAAU,mB;AACVC,MAAAA,M,GAAS,c;AACTC,MAAAA,S,GAAY,iB;AACZC,MAAAA,S,GAAY,iB;AACZC,MAAAA,S,GAAY,iB;AACZC,MAAAA,M,GAAS,c;AACTC,MAAAA,S,GAAY,iB;AACZC,MAAAA,U,GAAa,kB;AAEbC,MAAAA,c,GAAiB,sB;AACjBC,MAAAA,W,GAAc,mB;AACdC,MAAAA,U,GAAa,uB;AACbC,MAAAA,U,GAAa,uB;AACbC,MAAAA,O,GAAU,oB;AACVC,MAAAA,Q,GAAW,qB;AACXC,MAAAA,Q,GAAW,qB;AACXC,MAAAA,Q,GAAW,qB;AACXC,MAAAA,e,GAAkB,4B;AAClBC,MAAAA,S,GAAY,sB;AACZC,MAAAA,S,GAAY,sB;AAEhB;;AACIzB,MAAAA,c,GAAiB,E;AACrBA,MAAAA,cAAc,CAACiB,UAAD,CAAd,GAA6BjB,cAAc,CAACkB,UAAD,CAAd,GAC7BlB,cAAc,CAACmB,OAAD,CAAd,GAA0BnB,cAAc,CAACoB,QAAD,CAAd,GAC1BpB,cAAc,CAACqB,QAAD,CAAd,GAA2BrB,cAAc,CAACsB,QAAD,CAAd,GAC3BtB,cAAc,CAACuB,eAAD,CAAd,GAAkCvB,cAAc,CAACwB,SAAD,CAAd,GAClCxB,cAAc,CAACyB,SAAD,CAAd,GAA4B,IAJ5B;AAKAzB,MAAAA,cAAc,CAACE,OAAD,CAAd,GAA0BF,cAAc,CAACG,QAAD,CAAd,GAC1BH,cAAc,CAACe,cAAD,CAAd,GAAiCf,cAAc,CAACI,OAAD,CAAd,GACjCJ,cAAc,CAACgB,WAAD,CAAd,GAA8BhB,cAAc,CAACK,OAAD,CAAd,GAC9BL,cAAc,CAACM,QAAD,CAAd,GAA2BN,cAAc,CAACO,OAAD,CAAd,GAC3BP,cAAc,CAACQ,MAAD,CAAd,GAAyBR,cAAc,CAACS,SAAD,CAAd,GACzBT,cAAc,CAACU,SAAD,CAAd,GAA4BV,cAAc,CAACW,SAAD,CAAd,GAC5BX,cAAc,CAACY,MAAD,CAAd,GAAyBZ,cAAc,CAACa,SAAD,CAAd,GACzBb,cAAc,CAACc,UAAD,CAAd,GAA6B,KAP7B;;yBAqBenB,gB","sourcesContent":["import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n"]}