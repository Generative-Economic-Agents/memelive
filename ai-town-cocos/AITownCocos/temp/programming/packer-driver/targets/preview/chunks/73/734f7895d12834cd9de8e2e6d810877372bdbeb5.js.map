{"version":3,"sources":["file:///Users/feiwang/workSpace/AITown/cutepet/assets/src/bridge/cookies.ts"],"names":["setCookiesFrom","kies","setCookie","setCookies","options","setLockSeatsCookies","getCookies","getVisitedCookie","deleteCookie","name","setDomainCookie","setCookieWithConfig"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AA+CE;AACF;AACA;AACA;AACA;;AAUE;AACF;AACA;;AAqBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7FQ,WAASA,cAAT,CAAwBC,IAAxB,EAA8B,CAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEM,WAASC,SAAT,CAAmBD,IAAnB,EAAyB,CAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACM,WAASE,UAAT,CAAoBF,IAApB,EAA0BG,OAA1B,EAAwC,CAC7C;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAV6C,QAAdA,OAAc;AAAdA,MAAAA,OAAc,GAAJ,EAAI;AAAA;AAW9C;;AAEM,WAASC,mBAAT,CAA6BJ,IAA7B,EAAmCG,OAAnC,EAAiD,CACtD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AATsD,QAAdA,OAAc;AAAdA,MAAAA,OAAc,GAAJ,EAAI;AAAA;AAUvD;;AAOM,WAASE,UAAT,CAAoBL,IAApB,EAA0B,CAC/B;AACA;AACD;;AAEM,WAASM,gBAAT,GAA4B,CACjC;AACD;;AAKM,WAASC,YAAT,CAAsBC,IAAtB,EAA4B,CACjC;AACA;AACA;AACA;AACA;AACD;;AAEM,WAASC,eAAT,CAAyBT,IAAzB,EAA+BG,OAA/B,EAA6C,CAClD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AATkD,QAAdA,OAAc;AAAdA,MAAAA,OAAc,GAAJ,EAAI;AAAA;AAUnD;;AAaM,WAASO,mBAAT,CAA6BV,IAA7B,EAAmCG,OAAnC,EAAiD,CACtD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnBsD,QAAdA,OAAc;AAAdA,MAAAA,OAAc,GAAJ,EAAI;AAAA;AAoBvD;;;oBAlHcJ,c;eAWCE,S;gBAUAC,U;yBAaAE,mB;gBAiBAC,U;sBAKAC,gB;kBAOAC,Y;qBAQAE,e;yBAuBAC","sourcesContent":["/**\n * Set cookies\n * @param {string} kies - cookies name and value,e.g: key=value\n * @param {object} options - cookies options\n * @param {number} options.time - cookies expires time,default is one day\n * @return void\n */\n export function setCookiesFrom(kies) {\n    // if (!/.+=.+/.test(kies)) {\n    //     throw new Error('setCookies function accept a \"key=value\" string');\n    // }\n    // if (kies) {\n    //     // let expiredTime = (options.time || 1) * 24 * 60 * 60 * 1000;\n    //     // expiredTime += +new Date();\n    //     document.cookie = `${kies};path=/;domain=.baidu.com`;\n    // }\n  }\n  \n  export function setCookie(kies) {\n    // if (!/.+=.+/.test(kies)) {\n    //     throw new Error('setCookies function accept a \"key=value\" string');\n    // }\n    // if (kies) {\n    //     // let expiredTime = (options.time || 1) * 24 * 60 * 60 * 1000;\n    //     // expiredTime += +new Date();\n    //     document.cookie = `${kies}`;\n    // }\n  }\n  export function setCookies(kies, options = {}) {\n    // if (!/.+=.+/.test(kies)) {\n    //     throw new Error('setCookies function accept a \"key=value\" string');\n    // }\n  \n    // if (kies) {\n    //     let expiredTime = (options.time || 1) * 24 * 60 * 60 * 1000;\n    //     // let expiredTime = (options.time || 1) * 60 * 1000;\n    //     expiredTime += +new Date();\n    //     document.cookie = `${kies};expires=${new Date(expiredTime).toGMTString()}`;\n    // }\n  }\n  \n  export function setLockSeatsCookies(kies, options = {}) {\n    // if (!/.+=.+/.test(kies)) {\n    //     throw new Error('setCookies function accept a \"key=value\" string');\n    // }\n  \n    // if (kies) {\n    //     let expiredTime = (options.time || 1) * 60 * 1000; //n分钟失效\n    //     expiredTime += +new Date();\n    //     document.cookie = `${kies};expires=${new Date(expiredTime).toGMTString()}`;\n    // }\n  }\n  \n  /*\n  * Get cookies\n  * @param {string} kies - cookies name\n  * @return {string} cookies value\n  */\n  export function getCookies(kies) {\n    // const reg = new RegExp(`(?:(?:^|.*;\\\\s*)${kies}\\\\s*=\\\\s*([^;]*).*$)|^.*$`);\n    // return document.cookie.replace(reg, '$1');\n  }\n  \n  export function getVisitedCookie() {\n    // return +document.cookie.replace(/(?:(?:^|.*;\\s*)visited\\s*=\\s*([^;]*).*$)|^.*$/, '$1');\n  }\n  \n  /*\n  * delete cookies\n  * */\n  export function deleteCookie(name) {\n    // let exp = new Date();\n    // exp.setTime(exp.getTime() - 1);\n    // let cval = getCookies(name);\n    // if (cval != null)\n    //     document.cookie = name + '=' + cval + ';expires=' + exp.toGMTString();\n  }\n  \n  export function setDomainCookie(kies, options = {}) {\n    // if (!/.+=.+/.test(kies)) {\n    //     throw new Error('setCookies function accept a \"key=value\" string');\n    // }\n  \n    // if (kies) {\n    //     let expiredTime = (options.time || 1) * 60 * 1000; //n分钟失效\n    //     expiredTime += +new Date();\n    //     document.cookie = `${kies};expires=${new Date(expiredTime).toGMTString()};path=/;domain=baidu.com`;\n    // }\n  }\n  \n  /**\n  * 设置cookie，可以自定义config\n  *\n  * @export\n  * @param {string} kies - cookie k=v pattern, e.g: key=value\n  * @param {object} [options={}]\n  * @param {number} options.time - expire time (day)\n  * @param {string} options.path - path\n  * @param {string} options.domain - domain\n  * @return {void}\n  */\n  export function setCookieWithConfig(kies, options = {}) {\n    // if (!/.+=.+/.test(kies)) {\n    //     throw new Error('setCookies function accept a \"key=value\" string');\n    // }\n  \n    // if (kies) {\n    //     let cookieStr = `${kies};`;\n    //     if (options.time) {\n    //         let expiredTime = (options.time) * 24 * 60 * 60 * 1000;\n    //         expiredTime += Date.now();\n    //         cookieStr += `expires=${new Date(expiredTime).toGMTString()};`;\n    //     }\n    //     if (options.path) {\n    //         cookieStr += `path=${options.path};`;\n    //     }\n    //     if (options.domain) {\n    //         cookieStr += `domain=${options.domain};`;\n    //     }\n    //     document.cookie = cookieStr;\n    // }\n  }\n  "]}