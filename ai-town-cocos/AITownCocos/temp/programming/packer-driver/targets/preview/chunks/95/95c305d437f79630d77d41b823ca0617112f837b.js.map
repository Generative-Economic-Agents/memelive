{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/event-stream/event-message-chunker-stream.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","util","Transform","allocBuffer","buffer","alloc","EventMessageChunkerStream","options","call","currentMessageTotalLength","currentMessagePendingLength","currentMessage","messageLengthBuffer","prototype","Object","create","_transform","chunk","encoding","callback","chunkLength","length","currentOffset","bytesRemaining","numBytesForTotal","Math","min","copy","allocateMessage","readUInt32BE","numBytesToWrite","push","_flush","Error","size","writeUInt32BE","_cjsExports","_EventMessageChunkerStream"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from 'stream';\nlet _cjsExports;\nlet _EventMessageChunkerStream;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var util = require('../core').util;\n var Transform = require('stream').Transform;\n var allocBuffer = util.buffer.alloc;\n\n /** @type {Transform} */\n function EventMessageChunkerStream(options) {\n     Transform.call(this, options);\n\n     this.currentMessageTotalLength = 0;\n     this.currentMessagePendingLength = 0;\n     /** @type {Buffer} */\n     this.currentMessage = null;\n\n     /** @type {Buffer} */\n     this.messageLengthBuffer = null;\n }\n\n EventMessageChunkerStream.prototype = Object.create(Transform.prototype);\n\n /**\n  *\n  * @param {Buffer} chunk\n  * @param {string} encoding\n  * @param {*} callback\n  */\n EventMessageChunkerStream.prototype._transform = function(chunk, encoding, callback) {\n     var chunkLength = chunk.length;\n     var currentOffset = 0;\n\n     while (currentOffset < chunkLength) {\n         // create new message if necessary\n         if (!this.currentMessage) {\n             // working on a new message, determine total length\n             var bytesRemaining = chunkLength - currentOffset;\n             // prevent edge case where total length spans 2 chunks\n             if (!this.messageLengthBuffer) {\n                 this.messageLengthBuffer = allocBuffer(4);\n             }\n             var numBytesForTotal = Math.min(\n                 4 - this.currentMessagePendingLength, // remaining bytes to fill the messageLengthBuffer\n                 bytesRemaining // bytes left in chunk\n             );\n\n             chunk.copy(\n                 this.messageLengthBuffer,\n                 this.currentMessagePendingLength,\n                 currentOffset,\n                 currentOffset + numBytesForTotal\n             );\n\n             this.currentMessagePendingLength += numBytesForTotal;\n             currentOffset += numBytesForTotal;\n\n             if (this.currentMessagePendingLength < 4) {\n                 // not enough information to create the current message\n                 break;\n             }\n             this.allocateMessage(this.messageLengthBuffer.readUInt32BE(0));\n             this.messageLengthBuffer = null;\n         }\n\n         // write data into current message\n         var numBytesToWrite = Math.min(\n             this.currentMessageTotalLength - this.currentMessagePendingLength, // number of bytes left to complete message\n             chunkLength - currentOffset // number of bytes left in the original chunk\n         );\n         chunk.copy(\n             this.currentMessage, // target buffer\n             this.currentMessagePendingLength, // target offset\n             currentOffset, // chunk offset\n             currentOffset + numBytesToWrite // chunk end to write\n         );\n         this.currentMessagePendingLength += numBytesToWrite;\n         currentOffset += numBytesToWrite;\n\n         // check if a message is ready to be pushed\n         if (this.currentMessageTotalLength && this.currentMessageTotalLength === this.currentMessagePendingLength) {\n             // push out the message\n             this.push(this.currentMessage);\n             // cleanup\n             this.currentMessage = null;\n             this.currentMessageTotalLength = 0;\n             this.currentMessagePendingLength = 0;\n         }\n     }\n\n     callback();\n };\n\n EventMessageChunkerStream.prototype._flush = function(callback) {\n     if (this.currentMessageTotalLength) {\n         if (this.currentMessageTotalLength === this.currentMessagePendingLength) {\n             callback(null, this.currentMessage);\n         } else {\n             callback(new Error('Truncated event message received.'));\n         }\n     } else {\n         callback();\n     }\n };\n\n /**\n  * @param {number} size Size of the message to be allocated.\n  * @api private\n  */\n EventMessageChunkerStream.prototype.allocateMessage = function(size) {\n     if (typeof size !== 'number') {\n         throw new Error('Attempted to allocate an event message where size was not a number: ' + size);\n     }\n     this.currentMessageTotalLength = size;\n     this.currentMessagePendingLength = 4;\n     this.currentMessage = allocBuffer(size);\n     this.currentMessage.writeUInt32BE(size, 0);\n };\n\n /**\n  * @api private\n  */\n module.exports = {\n     EventMessageChunkerStream: EventMessageChunkerStream\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_EventMessageChunkerStream = module.exports.EventMessageChunkerStream;\n\n}, () => ({\n  '../core': _req,\n  'stream': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}