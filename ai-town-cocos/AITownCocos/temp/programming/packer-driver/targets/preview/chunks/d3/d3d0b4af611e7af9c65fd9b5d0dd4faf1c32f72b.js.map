{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/dynamodb/converter.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","url","define","exports","require","module","__filename","__dirname","AWS","util","typeOf","DynamoDBSet","NumberValue","DynamoDB","Converter","input","convertInput","data","options","type","formatMap","formatList","formatSet","length","convertEmptyValues","S","N","toString","B","BOOL","NULL","marshall","marshallItem","M","output","convertOutput","list","map","i","values","key","push","convertNumber","wrapNumbers","buffer","toBuffer","unmarshall","L","value","Number","formatted","filterEmptySetValues","set","nonEmptyValues","potentiallyEmptyTypes","String","Binary","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from './types';\nimport { __cjsMetaURL as _req1} from './set';\nimport { __cjsMetaURL as _req2} from './numberValue';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n var util = AWS.util;\n var typeOf = require('./types').typeOf;\n var DynamoDBSet = require('./set');\n var NumberValue = require('./numberValue');\n\n AWS.DynamoDB.Converter = {\n   /**\n    * Convert a JavaScript value to its equivalent DynamoDB AttributeValue type\n    *\n    * @param data [any] The data to convert to a DynamoDB AttributeValue\n    * @param options [map]\n    * @option options convertEmptyValues [Boolean] Whether to automatically\n    *                                              convert empty strings, blobs,\n    *                                              and sets to `null`\n    * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n    *                                        NumberValue object instead of\n    *                                        converting them to native JavaScript\n    *                                        numbers. This allows for the safe\n    *                                        round-trip transport of numbers of\n    *                                        arbitrary size.\n    * @return [map] An object in the Amazon DynamoDB AttributeValue format\n    *\n    * @see AWS.DynamoDB.Converter.marshall AWS.DynamoDB.Converter.marshall to\n    *    convert entire records (rather than individual attributes)\n    */\n   input: function convertInput(data, options) {\n     options = options || {};\n     var type = typeOf(data);\n     if (type === 'Object') {\n       return formatMap(data, options);\n     } else if (type === 'Array') {\n       return formatList(data, options);\n     } else if (type === 'Set') {\n       return formatSet(data, options);\n     } else if (type === 'String') {\n       if (data.length === 0 && options.convertEmptyValues) {\n         return convertInput(null);\n       }\n       return { S: data };\n     } else if (type === 'Number' || type === 'NumberValue') {\n       return { N: data.toString() };\n     } else if (type === 'Binary') {\n       if (data.length === 0 && options.convertEmptyValues) {\n         return convertInput(null);\n       }\n       return { B: data };\n     } else if (type === 'Boolean') {\n       return { BOOL: data };\n     } else if (type === 'null') {\n       return { NULL: true };\n     } else if (type !== 'undefined' && type !== 'Function') {\n       // this value has a custom constructor\n       return formatMap(data, options);\n     }\n   },\n\n   /**\n    * Convert a JavaScript object into a DynamoDB record.\n    *\n    * @param data [any] The data to convert to a DynamoDB record\n    * @param options [map]\n    * @option options convertEmptyValues [Boolean] Whether to automatically\n    *                                              convert empty strings, blobs,\n    *                                              and sets to `null`\n    * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n    *                                        NumberValue object instead of\n    *                                        converting them to native JavaScript\n    *                                        numbers. This allows for the safe\n    *                                        round-trip transport of numbers of\n    *                                        arbitrary size.\n    *\n    * @return [map] An object in the DynamoDB record format.\n    *\n    * @example Convert a JavaScript object into a DynamoDB record\n    *  var marshalled = AWS.DynamoDB.Converter.marshall({\n    *    string: 'foo',\n    *    list: ['fizz', 'buzz', 'pop'],\n    *    map: {\n    *      nestedMap: {\n    *        key: 'value',\n    *      }\n    *    },\n    *    number: 123,\n    *    nullValue: null,\n    *    boolValue: true,\n    *    stringSet: new DynamoDBSet(['foo', 'bar', 'baz'])\n    *  });\n    */\n   marshall: function marshallItem(data, options) {\n     return AWS.DynamoDB.Converter.input(data, options).M;\n   },\n\n   /**\n    * Convert a DynamoDB AttributeValue object to its equivalent JavaScript type.\n    *\n    * @param data [map] An object in the Amazon DynamoDB AttributeValue format\n    * @param options [map]\n    * @option options convertEmptyValues [Boolean] Whether to automatically\n    *                                              convert empty strings, blobs,\n    *                                              and sets to `null`\n    * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n    *                                        NumberValue object instead of\n    *                                        converting them to native JavaScript\n    *                                        numbers. This allows for the safe\n    *                                        round-trip transport of numbers of\n    *                                        arbitrary size.\n    *\n    * @return [Object|Array|String|Number|Boolean|null]\n    *\n    * @see AWS.DynamoDB.Converter.unmarshall AWS.DynamoDB.Converter.unmarshall to\n    *    convert entire records (rather than individual attributes)\n    */\n   output: function convertOutput(data, options) {\n     options = options || {};\n     var list, map, i;\n     for (var type in data) {\n       var values = data[type];\n       if (type === 'M') {\n         map = {};\n         for (var key in values) {\n           map[key] = convertOutput(values[key], options);\n         }\n         return map;\n       } else if (type === 'L') {\n         list = [];\n         for (i = 0; i < values.length; i++) {\n           list.push(convertOutput(values[i], options));\n         }\n         return list;\n       } else if (type === 'SS') {\n         list = [];\n         for (i = 0; i < values.length; i++) {\n           list.push(values[i] + '');\n         }\n         return new DynamoDBSet(list);\n       } else if (type === 'NS') {\n         list = [];\n         for (i = 0; i < values.length; i++) {\n           list.push(convertNumber(values[i], options.wrapNumbers));\n         }\n         return new DynamoDBSet(list);\n       } else if (type === 'BS') {\n         list = [];\n         for (i = 0; i < values.length; i++) {\n           list.push(AWS.util.buffer.toBuffer(values[i]));\n         }\n         return new DynamoDBSet(list);\n       } else if (type === 'S') {\n         return values + '';\n       } else if (type === 'N') {\n         return convertNumber(values, options.wrapNumbers);\n       } else if (type === 'B') {\n         return util.buffer.toBuffer(values);\n       } else if (type === 'BOOL') {\n         return (values === 'true' || values === 'TRUE' || values === true);\n       } else if (type === 'NULL') {\n         return null;\n       }\n     }\n   },\n\n   /**\n    * Convert a DynamoDB record into a JavaScript object.\n    *\n    * @param data [any] The DynamoDB record\n    * @param options [map]\n    * @option options convertEmptyValues [Boolean] Whether to automatically\n    *                                              convert empty strings, blobs,\n    *                                              and sets to `null`\n    * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n    *                                        NumberValue object instead of\n    *                                        converting them to native JavaScript\n    *                                        numbers. This allows for the safe\n    *                                        round-trip transport of numbers of\n    *                                        arbitrary size.\n    *\n    * @return [map] An object whose properties have been converted from\n    *    DynamoDB's AttributeValue format into their corresponding native\n    *    JavaScript types.\n    *\n    * @example Convert a record received from a DynamoDB stream\n    *  var unmarshalled = AWS.DynamoDB.Converter.unmarshall({\n    *    string: {S: 'foo'},\n    *    list: {L: [{S: 'fizz'}, {S: 'buzz'}, {S: 'pop'}]},\n    *    map: {\n    *      M: {\n    *        nestedMap: {\n    *          M: {\n    *            key: {S: 'value'}\n    *          }\n    *        }\n    *      }\n    *    },\n    *    number: {N: '123'},\n    *    nullValue: {NULL: true},\n    *    boolValue: {BOOL: true}\n    *  });\n    */\n   unmarshall: function unmarshall(data, options) {\n     return AWS.DynamoDB.Converter.output({M: data}, options);\n   }\n };\n\n /**\n  * @api private\n  * @param data [Array]\n  * @param options [map]\n  */\n function formatList(data, options) {\n   var list = {L: []};\n   for (var i = 0; i < data.length; i++) {\n     list['L'].push(AWS.DynamoDB.Converter.input(data[i], options));\n   }\n   return list;\n }\n\n /**\n  * @api private\n  * @param value [String]\n  * @param wrapNumbers [Boolean]\n  */\n function convertNumber(value, wrapNumbers) {\n   return wrapNumbers ? new NumberValue(value) : Number(value);\n }\n\n /**\n  * @api private\n  * @param data [map]\n  * @param options [map]\n  */\n function formatMap(data, options) {\n   var map = {M: {}};\n   for (var key in data) {\n     var formatted = AWS.DynamoDB.Converter.input(data[key], options);\n     if (formatted !== void 0) {\n       map['M'][key] = formatted;\n     }\n   }\n   return map;\n }\n\n /**\n  * @api private\n  */\n function formatSet(data, options) {\n   options = options || {};\n   var values = data.values;\n   if (options.convertEmptyValues) {\n     values = filterEmptySetValues(data);\n     if (values.length === 0) {\n       return AWS.DynamoDB.Converter.input(null);\n     }\n   }\n\n   var map = {};\n   switch (data.type) {\n     case 'String': map['SS'] = values; break;\n     case 'Binary': map['BS'] = values; break;\n     case 'Number': map['NS'] = values.map(function (value) {\n       return value.toString();\n     });\n   }\n   return map;\n }\n\n /**\n  * @api private\n  */\n function filterEmptySetValues(set) {\n     var nonEmptyValues = [];\n     var potentiallyEmptyTypes = {\n         String: true,\n         Binary: true,\n         Number: false\n     };\n     if (potentiallyEmptyTypes[set.type]) {\n         for (var i = 0; i < set.values.length; i++) {\n             if (set.values[i].length === 0) {\n                 continue;\n             }\n             nonEmptyValues.push(set.values[i]);\n         }\n\n         return nonEmptyValues;\n     }\n\n     return set.values;\n }\n\n /**\n  * @api private\n  */\n module.exports = AWS.DynamoDB.Converter;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n  './types': _req0,\n  './set': _req1,\n  './numberValue': _req2,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}