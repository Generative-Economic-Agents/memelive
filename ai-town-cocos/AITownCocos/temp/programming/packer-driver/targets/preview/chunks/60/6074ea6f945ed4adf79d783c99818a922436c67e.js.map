{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/lodash-es/_baseClone.js"],"names":["baseClone","value","bitmask","customizer","key","object","stack","result","isDeep","CLONE_DEEP_FLAG","isFlat","CLONE_FLAT_FLAG","isFull","CLONE_SYMBOLS_FLAG","undefined","isObject","isArr","isArray","initCloneArray","copyArray","tag","getTag","isFunc","funcTag","genTag","isBuffer","cloneBuffer","objectTag","argsTag","initCloneObject","copySymbolsIn","baseAssignIn","copySymbols","baseAssign","cloneableTags","initCloneByTag","Stack","stacked","get","set","isSet","forEach","subValue","add","isMap","keysFunc","getAllKeysIn","getAllKeys","keysIn","keys","props","arrayEach","assignValue","arrayTag","boolTag","dateTag","errorTag","mapTag","numberTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag"],"mappings":"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","sourcesContent":["import Stack from './_Stack.js';\nimport arrayEach from './_arrayEach.js';\nimport assignValue from './_assignValue.js';\nimport baseAssign from './_baseAssign.js';\nimport baseAssignIn from './_baseAssignIn.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport copyArray from './_copyArray.js';\nimport copySymbols from './_copySymbols.js';\nimport copySymbolsIn from './_copySymbolsIn.js';\nimport getAllKeys from './_getAllKeys.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\nimport getTag from './_getTag.js';\nimport initCloneArray from './_initCloneArray.js';\nimport initCloneByTag from './_initCloneByTag.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isMap from './isMap.js';\nimport isObject from './isObject.js';\nimport isSet from './isSet.js';\nimport keys from './keys.js';\nimport keysIn from './keysIn.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nexport default baseClone;\n"]}