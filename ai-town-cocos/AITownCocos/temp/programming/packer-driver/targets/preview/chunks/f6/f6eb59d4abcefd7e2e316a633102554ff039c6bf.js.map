{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/http-signature/lib/verify.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","url","define","exports","require","module","__filename","__dirname","assert","crypto","sshpk","utils","HASH_ALGOS","PK_ALGOS","InvalidAlgorithmError","HttpSignatureError","validateAlgorithm","verifySignature","parsedSignature","pubkey","object","Buffer","isBuffer","parseKey","ok","Key","isKey","alg","algorithm","type","v","createVerify","update","signingString","verify","params","signature","verifyHMAC","secret","string","hashAlg","toUpperCase","hmac","createHmac","h1","digest","h2","equals","toString","_cjsExports","_verifySignature"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'assert-plus';\nimport { __cjsMetaURL as _req0} from 'crypto';\nimport { __cjsMetaURL as _req1} from 'sshpk';\nimport { __cjsMetaURL as _req2} from './utils';\nlet _cjsExports;\nlet _verifySignature;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n // Copyright 2015 Joyent, Inc.\n\n var assert = require('assert-plus');\n var crypto = require('crypto');\n var sshpk = require('sshpk');\n var utils = require('./utils');\n\n var HASH_ALGOS = utils.HASH_ALGOS;\n var PK_ALGOS = utils.PK_ALGOS;\n var InvalidAlgorithmError = utils.InvalidAlgorithmError;\n var HttpSignatureError = utils.HttpSignatureError;\n var validateAlgorithm = utils.validateAlgorithm;\n\n ///--- Exported API\n\n module.exports = {\n   /**\n    * Verify RSA/DSA signature against public key.  You are expected to pass in\n    * an object that was returned from `parse()`.\n    *\n    * @param {Object} parsedSignature the object you got from `parse`.\n    * @param {String} pubkey RSA/DSA private key PEM.\n    * @return {Boolean} true if valid, false otherwise.\n    * @throws {TypeError} if you pass in bad arguments.\n    * @throws {InvalidAlgorithmError}\n    */\n   verifySignature: function verifySignature(parsedSignature, pubkey) {\n     assert.object(parsedSignature, 'parsedSignature');\n     if (typeof (pubkey) === 'string' || Buffer.isBuffer(pubkey))\n       pubkey = sshpk.parseKey(pubkey);\n     assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');\n\n     var alg = validateAlgorithm(parsedSignature.algorithm);\n     if (alg[0] === 'hmac' || alg[0] !== pubkey.type)\n       return (false);\n\n     var v = pubkey.createVerify(alg[1]);\n     v.update(parsedSignature.signingString);\n     return (v.verify(parsedSignature.params.signature, 'base64'));\n   },\n\n   /**\n    * Verify HMAC against shared secret.  You are expected to pass in an object\n    * that was returned from `parse()`.\n    *\n    * @param {Object} parsedSignature the object you got from `parse`.\n    * @param {String} secret HMAC shared secret.\n    * @return {Boolean} true if valid, false otherwise.\n    * @throws {TypeError} if you pass in bad arguments.\n    * @throws {InvalidAlgorithmError}\n    */\n   verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n     assert.object(parsedSignature, 'parsedHMAC');\n     assert.string(secret, 'secret');\n\n     var alg = validateAlgorithm(parsedSignature.algorithm);\n     if (alg[0] !== 'hmac')\n       return (false);\n\n     var hashAlg = alg[1].toUpperCase();\n\n     var hmac = crypto.createHmac(hashAlg, secret);\n     hmac.update(parsedSignature.signingString);\n\n     /*\n      * Now double-hash to avoid leaking timing information - there's\n      * no easy constant-time compare in JS, so we use this approach\n      * instead. See for more info:\n      * https://www.isecpartners.com/blog/2011/february/double-hmac-\n      * verification.aspx\n      */\n     var h1 = crypto.createHmac(hashAlg, secret);\n     h1.update(hmac.digest());\n     h1 = h1.digest();\n     var h2 = crypto.createHmac(hashAlg, secret);\n     h2.update(new Buffer(parsedSignature.params.signature, 'base64'));\n     h2 = h2.digest();\n\n     /* Node 0.8 returns strings from .digest(). */\n     if (typeof (h1) === 'string')\n       return (h1 === h2);\n     /* And node 0.10 lacks the .equals() method on Buffers. */\n     if (Buffer.isBuffer(h1) && !h1.equals)\n       return (h1.toString('binary') === h2.toString('binary'));\n\n     return (h1.equals(h2));\n   }\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_verifySignature = module.exports.verifySignature;\n\n}, () => ({\n  'assert-plus': _req,\n  'crypto': _req0,\n  'sshpk': _req1,\n  './utils': _req2,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}