{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/mapValues.js"],"names":["mapValues","object","iteratee","result","baseIteratee","baseForOwn","value","key","baseAssignValue"],"mappings":";;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,SAAT,CAAmBC,MAAnB,EAA2BC,QAA3B,EAAqC;AACnC,QAAIC,MAAM,GAAG,EAAb;AACAD,IAAAA,QAAQ,GAAGE,YAAY,CAACF,QAAD,EAAW,CAAX,CAAvB;AAEAG,IAAAA,UAAU,CAACJ,MAAD,EAAS,UAASK,KAAT,EAAgBC,GAAhB,EAAqBN,MAArB,EAA6B;AAC9CO,MAAAA,eAAe,CAACL,MAAD,EAASI,GAAT,EAAcL,QAAQ,CAACI,KAAD,EAAQC,GAAR,EAAaN,MAAb,CAAtB,CAAf;AACD,KAFS,CAAV;AAGA,WAAOE,MAAP;AACD;;;;AAxCMK,MAAAA,e;;AACAH,MAAAA,U;;AACAD,MAAAA,Y;;;yBAwCQJ,S","sourcesContent":["import baseAssignValue from './_baseAssignValue.js';\nimport baseForOwn from './_baseForOwn.js';\nimport baseIteratee from './_baseIteratee.js';\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nexport default mapValues;\n"]}