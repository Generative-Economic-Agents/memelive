{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/lodash-es/_equalByTag.js"],"names":["equalByTag","object","other","tag","bitmask","customizer","equalFunc","stack","dataViewTag","byteLength","byteOffset","buffer","arrayBufferTag","Uint8Array","boolTag","dateTag","numberTag","eq","errorTag","name","message","regexpTag","stringTag","mapTag","convert","mapToArray","setTag","isPartial","COMPARE_PARTIAL_FLAG","setToArray","size","stacked","get","COMPARE_UNORDERED_FLAG","set","result","equalArrays","symbolTag","symbolValueOf","call","Symbol","symbolProto","prototype","undefined","valueOf"],"mappings":";;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,UAAT,CAAoBC,MAApB,EAA4BC,KAA5B,EAAmCC,GAAnC,EAAwCC,OAAxC,EAAiDC,UAAjD,EAA6DC,SAA7D,EAAwEC,KAAxE,EAA+E;AAC7E,YAAQJ,GAAR;AACE,WAAKK,WAAL;AACE,YAAKP,MAAM,CAACQ,UAAP,IAAqBP,KAAK,CAACO,UAA5B,IACCR,MAAM,CAACS,UAAP,IAAqBR,KAAK,CAACQ,UADhC,EAC6C;AAC3C,iBAAO,KAAP;AACD;;AACDT,QAAAA,MAAM,GAAGA,MAAM,CAACU,MAAhB;AACAT,QAAAA,KAAK,GAAGA,KAAK,CAACS,MAAd;;AAEF,WAAKC,cAAL;AACE,YAAKX,MAAM,CAACQ,UAAP,IAAqBP,KAAK,CAACO,UAA5B,IACA,CAACH,SAAS,CAAC,IAAIO,UAAJ,CAAeZ,MAAf,CAAD,EAAyB,IAAIY,UAAJ,CAAeX,KAAf,CAAzB,CADd,EAC+D;AAC7D,iBAAO,KAAP;AACD;;AACD,eAAO,IAAP;;AAEF,WAAKY,OAAL;AACA,WAAKC,OAAL;AACA,WAAKC,SAAL;AACE;AACA;AACA,eAAOC,EAAE,CAAC,CAAChB,MAAF,EAAU,CAACC,KAAX,CAAT;;AAEF,WAAKgB,QAAL;AACE,eAAOjB,MAAM,CAACkB,IAAP,IAAejB,KAAK,CAACiB,IAArB,IAA6BlB,MAAM,CAACmB,OAAP,IAAkBlB,KAAK,CAACkB,OAA5D;;AAEF,WAAKC,SAAL;AACA,WAAKC,SAAL;AACE;AACA;AACA;AACA,eAAOrB,MAAM,IAAKC,KAAK,GAAG,EAA1B;;AAEF,WAAKqB,MAAL;AACE,YAAIC,OAAO,GAAGC,UAAd;;AAEF,WAAKC,MAAL;AACE,YAAIC,SAAS,GAAGvB,OAAO,GAAGwB,oBAA1B;AACAJ,QAAAA,OAAO,KAAKA,OAAO,GAAGK,UAAf,CAAP;;AAEA,YAAI5B,MAAM,CAAC6B,IAAP,IAAe5B,KAAK,CAAC4B,IAArB,IAA6B,CAACH,SAAlC,EAA6C;AAC3C,iBAAO,KAAP;AACD,SANH,CAOE;;;AACA,YAAII,OAAO,GAAGxB,KAAK,CAACyB,GAAN,CAAU/B,MAAV,CAAd;;AACA,YAAI8B,OAAJ,EAAa;AACX,iBAAOA,OAAO,IAAI7B,KAAlB;AACD;;AACDE,QAAAA,OAAO,IAAI6B,sBAAX,CAZF,CAcE;;AACA1B,QAAAA,KAAK,CAAC2B,GAAN,CAAUjC,MAAV,EAAkBC,KAAlB;AACA,YAAIiC,MAAM,GAAGC,WAAW,CAACZ,OAAO,CAACvB,MAAD,CAAR,EAAkBuB,OAAO,CAACtB,KAAD,CAAzB,EAAkCE,OAAlC,EAA2CC,UAA3C,EAAuDC,SAAvD,EAAkEC,KAAlE,CAAxB;AACAA,QAAAA,KAAK,CAAC,QAAD,CAAL,CAAgBN,MAAhB;AACA,eAAOkC,MAAP;;AAEF,WAAKE,SAAL;AACE,YAAIC,aAAJ,EAAmB;AACjB,iBAAOA,aAAa,CAACC,IAAd,CAAmBtC,MAAnB,KAA8BqC,aAAa,CAACC,IAAd,CAAmBrC,KAAnB,CAArC;AACD;;AA3DL;;AA6DA,WAAO,KAAP;AACD;;;;AA7GMsC,MAAAA,M;;AACA3B,MAAAA,U;;AACAI,MAAAA,E;;AACAmB,MAAAA,W;;AACAX,MAAAA,U;;AACAI,MAAAA,U;;;AAEP;AACID,MAAAA,oB,GAAuB,C;AACvBK,MAAAA,sB,GAAyB,C;AAE7B;;AACInB,MAAAA,O,GAAU,kB;AACVC,MAAAA,O,GAAU,e;AACVG,MAAAA,Q,GAAW,gB;AACXK,MAAAA,M,GAAS,c;AACTP,MAAAA,S,GAAY,iB;AACZK,MAAAA,S,GAAY,iB;AACZK,MAAAA,M,GAAS,c;AACTJ,MAAAA,S,GAAY,iB;AACZe,MAAAA,S,GAAY,iB;AAEZzB,MAAAA,c,GAAiB,sB;AACjBJ,MAAAA,W,GAAc,mB;AAElB;;AACIiC,MAAAA,W,GAAcD,MAAM,GAAGA,MAAM,CAACE,SAAV,GAAsBC,S;AAC1CL,MAAAA,a,GAAgBG,WAAW,GAAGA,WAAW,CAACG,OAAf,GAAyBD,S;;yBAoFzC3C,U","sourcesContent":["import Symbol from './_Symbol.js';\nimport Uint8Array from './_Uint8Array.js';\nimport eq from './eq.js';\nimport equalArrays from './_equalArrays.js';\nimport mapToArray from './_mapToArray.js';\nimport setToArray from './_setToArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nexport default equalByTag;\n"]}