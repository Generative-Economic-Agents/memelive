{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/ajv/lib/compile/async.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","MissingRefError","MissingRef","compileAsync","schema","meta","callback","self","_opts","loadSchema","Error","undefined","p","loadMetaSchemaOf","then","schemaObj","_addSchema","validate","_compileAsync","v","sch","$schema","getSchema","call","$ref","Promise","resolve","_compile","e","loadMissingSchema","ref","missingSchema","added","missingRef","schemaPromise","_loadingSchemas","removePromise","addSchema","_refs","_schemas","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './error_classes';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n 'use strict';\n\n var MissingRefError = require('./error_classes').MissingRef;\n\n module.exports = compileAsync;\n\n\n /**\n  * Creates validating function for passed schema with asynchronous loading of missing schemas.\n  * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.\n  * @this  Ajv\n  * @param {Object}   schema schema object\n  * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped\n  * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.\n  * @return {Promise} promise that resolves with a validating function.\n  */\n function compileAsync(schema, meta, callback) {\n   /* eslint no-shadow: 0 */\n   /* global Promise */\n   /* jshint validthis: true */\n   var self = this;\n   if (typeof this._opts.loadSchema != 'function')\n     throw new Error('options.loadSchema should be a function');\n\n   if (typeof meta == 'function') {\n     callback = meta;\n     meta = undefined;\n   }\n\n   var p = loadMetaSchemaOf(schema).then(function () {\n     var schemaObj = self._addSchema(schema, undefined, meta);\n     return schemaObj.validate || _compileAsync(schemaObj);\n   });\n\n   if (callback) {\n     p.then(\n       function(v) { callback(null, v); },\n       callback\n     );\n   }\n\n   return p;\n\n\n   function loadMetaSchemaOf(sch) {\n     var $schema = sch.$schema;\n     return $schema && !self.getSchema($schema)\n             ? compileAsync.call(self, { $ref: $schema }, true)\n             : Promise.resolve();\n   }\n\n\n   function _compileAsync(schemaObj) {\n     try { return self._compile(schemaObj); }\n     catch(e) {\n       if (e instanceof MissingRefError) return loadMissingSchema(e);\n       throw e;\n     }\n\n\n     function loadMissingSchema(e) {\n       var ref = e.missingSchema;\n       if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');\n\n       var schemaPromise = self._loadingSchemas[ref];\n       if (!schemaPromise) {\n         schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);\n         schemaPromise.then(removePromise, removePromise);\n       }\n\n       return schemaPromise.then(function (sch) {\n         if (!added(ref)) {\n           return loadMetaSchemaOf(sch).then(function () {\n             if (!added(ref)) self.addSchema(sch, ref, undefined, meta);\n           });\n         }\n       }).then(function() {\n         return _compileAsync(schemaObj);\n       });\n\n       function removePromise() {\n         delete self._loadingSchemas[ref];\n       }\n\n       function added(ref) {\n         return self._refs[ref] || self._schemas[ref];\n       }\n     }\n   }\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './error_classes': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}