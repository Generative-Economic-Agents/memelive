{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/sshpk/lib/formats/ssh.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","_req4","_req5","url","define","exports","require","module","__filename","__dirname","read","write","assert","Buffer","rfc4253","utils","Key","PrivateKey","sshpriv","SSHKEY_RE","SSHKEY_RE2","buf","options","buffer","toString","trimmed","trim","replace","m","match","ok","type","algToKeyType","kbuf","from","key","ret","e","readInternal","strictEqual","length","comment","consumed","data","realOffset","Math","ceil","slice","padding","trailer","object","isKey","Error","parts","alg","keyTypeToAlg","push","join","_cjsExports","_read","_write"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'assert-plus';\nimport { __cjsMetaURL as _req0} from 'safer-buffer';\nimport { __cjsMetaURL as _req1} from './rfc4253';\nimport { __cjsMetaURL as _req2} from '../utils';\nimport { __cjsMetaURL as _req3} from '../key';\nimport { __cjsMetaURL as _req4} from '../private-key';\nimport { __cjsMetaURL as _req5} from './ssh-private';\nlet _cjsExports;\nlet _read;\nlet _write;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n // Copyright 2015 Joyent, Inc.\n\n module.exports = {\n \tread: read,\n \twrite: write\n };\n\n var assert = require('assert-plus');\n var Buffer = require('safer-buffer').Buffer;\n var rfc4253 = require('./rfc4253');\n var utils = require('../utils');\n var Key = require('../key');\n var PrivateKey = require('../private-key');\n\n var sshpriv = require('./ssh-private');\n\n /*JSSTYLED*/\n var SSHKEY_RE = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/]+[=]*)([ \\t]+([^ \\t][^\\n]*[\\n]*)?)?$/;\n /*JSSTYLED*/\n var SSHKEY_RE2 = /^([a-z0-9-]+)[ \\t\\n]+([a-zA-Z0-9+\\/][a-zA-Z0-9+\\/ \\t\\n=]*)([^a-zA-Z0-9+\\/ \\t\\n=].*)?$/;\n\n function read(buf, options) {\n \tif (typeof (buf) !== 'string') {\n \t\tassert.buffer(buf, 'buf');\n \t\tbuf = buf.toString('ascii');\n \t}\n\n \tvar trimmed = buf.trim().replace(/[\\\\\\r]/g, '');\n \tvar m = trimmed.match(SSHKEY_RE);\n \tif (!m)\n \t\tm = trimmed.match(SSHKEY_RE2);\n \tassert.ok(m, 'key must match regex');\n\n \tvar type = rfc4253.algToKeyType(m[1]);\n \tvar kbuf = Buffer.from(m[2], 'base64');\n\n \t/*\n \t * This is a bit tricky. If we managed to parse the key and locate the\n \t * key comment with the regex, then do a non-partial read and assert\n \t * that we have consumed all bytes. If we couldn't locate the key\n \t * comment, though, there may be whitespace shenanigans going on that\n \t * have conjoined the comment to the rest of the key. We do a partial\n \t * read in this case to try to make the best out of a sorry situation.\n \t */\n \tvar key;\n \tvar ret = {};\n \tif (m[4]) {\n \t\ttry {\n \t\t\tkey = rfc4253.read(kbuf);\n\n \t\t} catch (e) {\n \t\t\tm = trimmed.match(SSHKEY_RE2);\n \t\t\tassert.ok(m, 'key must match regex');\n \t\t\tkbuf = Buffer.from(m[2], 'base64');\n \t\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\n \t\t}\n \t} else {\n \t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\n \t}\n\n \tassert.strictEqual(type, key.type);\n\n \tif (m[4] && m[4].length > 0) {\n \t\tkey.comment = m[4];\n\n \t} else if (ret.consumed) {\n \t\t/*\n \t\t * Now the magic: trying to recover the key comment when it's\n \t\t * gotten conjoined to the key or otherwise shenanigan'd.\n \t\t *\n \t\t * Work out how much base64 we used, then drop all non-base64\n \t\t * chars from the beginning up to this point in the the string.\n \t\t * Then offset in this and try to make up for missing = chars.\n \t\t */\n \t\tvar data = m[2] + (m[3] ? m[3] : '');\n \t\tvar realOffset = Math.ceil(ret.consumed / 3) * 4;\n \t\tdata = data.slice(0, realOffset - 2). /*JSSTYLED*/\n \t\t    replace(/[^a-zA-Z0-9+\\/=]/g, '') +\n \t\t    data.slice(realOffset - 2);\n\n \t\tvar padding = ret.consumed % 3;\n \t\tif (padding > 0 &&\n \t\t    data.slice(realOffset - 1, realOffset) !== '=')\n \t\t\trealOffset--;\n \t\twhile (data.slice(realOffset, realOffset + 1) === '=')\n \t\t\trealOffset++;\n\n \t\t/* Finally, grab what we think is the comment & clean it up. */\n \t\tvar trailer = data.slice(realOffset);\n \t\ttrailer = trailer.replace(/[\\r\\n]/g, ' ').\n \t\t    replace(/^\\s+/, '');\n \t\tif (trailer.match(/^[a-zA-Z0-9]/))\n \t\t\tkey.comment = trailer;\n \t}\n\n \treturn (key);\n }\n\n function write(key, options) {\n \tassert.object(key);\n \tif (!Key.isKey(key))\n \t\tthrow (new Error('Must be a public key'));\n\n \tvar parts = [];\n \tvar alg = rfc4253.keyTypeToAlg(key);\n \tparts.push(alg);\n\n \tvar buf = rfc4253.write(key);\n \tparts.push(buf.toString('base64'));\n\n \tif (key.comment)\n \t\tparts.push(key.comment);\n\n \treturn (Buffer.from(parts.join(' ')));\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_read = module.exports.read;\n_write = module.exports.write;\n\n}, () => ({\n  'assert-plus': _req,\n  'safer-buffer': _req0,\n  './rfc4253': _req1,\n  '../utils': _req2,\n  '../key': _req3,\n  '../private-key': _req4,\n  './ssh-private': _req5,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}