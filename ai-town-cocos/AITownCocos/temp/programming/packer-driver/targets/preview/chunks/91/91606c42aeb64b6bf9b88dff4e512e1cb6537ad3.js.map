{"version":3,"sources":["file:///Users/feiwang/cutepet/assets/src/manager/AudioManager.ts"],"names":["AudioManager","AudioClip","assert","clamp01","warn","assetManager","WebUtils","GlobalConfig","soundVolume","instance","_instance","init","audioSource","getConfiguration","_audioSource","isMusic","state","getGlobalData","undefined","playMusic","loop","playing","play","loadAndPlayAudio","audioPath","loadRes","err","clip","console","error","loadAndPlayRemoteAudio","audioUrl","loadRemote","ext","asset","playSound","name","path","playOneShot","volume","setMusicVolume","flag","setSoundVolume","openMusic","setGlobalData","closeMusic","openSound","closeSound"],"mappings":"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","sourcesContent":["import { _decorator, AudioClip, sys, AudioSource, assert, clamp01, warn, resources, assetManager } from \"cc\";\nimport WebUtils from \"../utils/WebUtils\";\nimport { GlobalConfig } from \"../game/config/GlobalConfig\";\n\nexport class AudioManager {\n    private static _instance: AudioManager;\n    private static _audioSource?: AudioSource;\n\n    static get instance() {\n        if (this._instance) {\n            return this._instance;\n        }\n\n        this._instance = new AudioManager();\n        return this._instance;\n    }\n\n    soundVolume: number = 1;\n\n    // init AudioManager in GameRoot.\n    init(audioSource: AudioSource) {\n        this.soundVolume = this.getConfiguration(false) ? 1 : 0;\n        AudioManager._audioSource = audioSource;\n    }\n\n    getConfiguration(isMusic: boolean) {\n        let state;\n        if (isMusic) {\n            state = GlobalConfig.instance.getGlobalData('music');\n        } else {\n            state = GlobalConfig.instance.getGlobalData('sound');\n        }\n\n        // console.log('Config for [' + (isMusic ? 'Music' : 'Sound') + '] is ' + state);\n\n        return state === undefined || state === 'true' ? true : false;\n    }\n\n    /**\n     * 播放音乐\n     * @param {String} name 音乐名称可通过constants.AUDIO_MUSIC 获取\n     * @param {Boolean} loop 是否循环播放\n     */\n    playMusic(loop: boolean) {\n        const audioSource = AudioManager._audioSource!;\n        assert(true, 'AudioManager not inited!');\n\n        audioSource.loop = loop;\n        if (!audioSource.playing) {\n            audioSource.play();\n        }\n    }\n\n    loadAndPlayAudio(audioPath: string) {\n        WebUtils.loadRes(audioPath, AudioClip, (err, clip) => {\n            if (err) {\n                console.error(err);\n                return;\n            }\n            AudioManager._audioSource.clip = clip;\n            AudioManager._audioSource.play();\n        });\n    }\n    loadAndPlayRemoteAudio(audioUrl: string) {\n        assetManager.loadRemote(audioUrl, { ext: '.mp3' }, (err, asset) => {\n            if (err) {\n                console.error('Error loading audio:', err);\n                return;\n            }\n            if (asset instanceof AudioClip) {\n                AudioManager._audioSource.clip = asset;\n                AudioManager._audioSource.play();\n            } else {\n                console.error('Loaded asset is not an audio clip:', asset);\n            }\n        });\n    }\n    /**\n     * 播放音效\n     * @param {String} name 音效名称可通过constants.AUDIO_SOUND 获取\n     */\n    playSound(name: string) {\n        const audioSource = AudioManager._audioSource!;\n        assert(true, 'AudioManager not inited!');\n\n        //音效一般是多个的，不会只有一个\n        let path = '/audio/sound/';\n        // if (name !== 'click') {\n        //     path = 'gamePackage/' + path; //微信特殊处理，除一开场的音乐，其余的放在子包里头\n        // }\n\n        WebUtils.loadRes(path + name, AudioClip, (err, clip) => {\n            if (err) {\n                warn('load audioClip failed: ', err);\n                return;\n            }\n\n            // NOTE: the second parameter is volume scale.\n            audioSource.playOneShot(clip, audioSource.volume ? this.soundVolume / audioSource.volume : 0);\n        });\n\n    }\n\n    setMusicVolume(flag: number) {\n        const audioSource = AudioManager._audioSource!;\n        assert(true, 'AudioManager not inited!');\n\n        flag = clamp01(flag);\n        audioSource.volume = flag;\n    }\n\n    setSoundVolume(flag: number) {\n        this.soundVolume = flag;\n    }\n\n    openMusic() {\n        this.setMusicVolume(0.8);\n        GlobalConfig.instance.setGlobalData('music', 'true');\n    }\n\n    closeMusic() {\n        this.setMusicVolume(0);\n        GlobalConfig.instance.setGlobalData('music', 'false');\n    }\n\n    openSound() {\n        this.setSoundVolume(1);\n        GlobalConfig.instance.setGlobalData('sound', 'true');\n    }\n\n    closeSound() {\n        this.setSoundVolume(0);\n        GlobalConfig.instance.setGlobalData('sound', 'false');\n    }\n}\n"]}