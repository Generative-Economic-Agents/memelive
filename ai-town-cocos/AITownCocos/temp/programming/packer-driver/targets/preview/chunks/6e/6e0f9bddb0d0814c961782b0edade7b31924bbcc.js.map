{"version":3,"sources":["file:///Users/feiwang/workSpace/AITown/cutepet/node_modules/lodash-es/trim.js"],"names":["trim","string","chars","guard","toString","undefined","baseTrim","baseToString","strSymbols","stringToArray","chrSymbols","start","charsStartIndex","end","charsEndIndex","castSlice","join"],"mappings":";;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,IAAT,CAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,KAA7B,EAAoC;AAClCF,IAAAA,MAAM,GAAGG,QAAQ,CAACH,MAAD,CAAjB;;AACA,QAAIA,MAAM,KAAKE,KAAK,IAAID,KAAK,KAAKG,SAAxB,CAAV,EAA8C;AAC5C,aAAOC,QAAQ,CAACL,MAAD,CAAf;AACD;;AACD,QAAI,CAACA,MAAD,IAAW,EAAEC,KAAK,GAAGK,YAAY,CAACL,KAAD,CAAtB,CAAf,EAA+C;AAC7C,aAAOD,MAAP;AACD;;AACD,QAAIO,UAAU,GAAGC,aAAa,CAACR,MAAD,CAA9B;AAAA,QACIS,UAAU,GAAGD,aAAa,CAACP,KAAD,CAD9B;AAAA,QAEIS,KAAK,GAAGC,eAAe,CAACJ,UAAD,EAAaE,UAAb,CAF3B;AAAA,QAGIG,GAAG,GAAGC,aAAa,CAACN,UAAD,EAAaE,UAAb,CAAb,GAAwC,CAHlD;AAKA,WAAOK,SAAS,CAACP,UAAD,EAAaG,KAAb,EAAoBE,GAApB,CAAT,CAAkCG,IAAlC,CAAuC,EAAvC,CAAP;AACD;;;;AA5CMT,MAAAA,Y;;AACAD,MAAAA,Q;;AACAS,MAAAA,S;;AACAD,MAAAA,a;;AACAF,MAAAA,e;;AACAH,MAAAA,a;;AACAL,MAAAA,Q;;;yBAwCQJ,I","sourcesContent":["import baseToString from './_baseToString.js';\nimport baseTrim from './_baseTrim.js';\nimport castSlice from './_castSlice.js';\nimport charsEndIndex from './_charsEndIndex.js';\nimport charsStartIndex from './_charsStartIndex.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return baseTrim(string);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nexport default trim;\n"]}