{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/ajv/lib/compile/resolve.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","url","define","exports","require","module","__filename","__dirname","URI","equal","util","SchemaObject","traverse","resolve","normalizeId","fullPath","getFullPath","resolveUrl","ids","resolveIds","inlineRef","schema","resolveSchema","compile","root","ref","refVal","_refs","call","_schemas","_opts","inlineRefs","validate","_compile","res","v","baseId","undefined","p","parse","refPath","_getFullPath","_getId","Object","keys","length","id","resolveRecursive","getJsonPointer","parsedRef","PREVENT_SCOPE_CHANGE","toHash","fragment","slice","parts","split","i","part","unescapeFragment","$ref","SIMPLE_INLINED","limit","checkNoRef","countKeys","item","Array","isArray","key","count","Infinity","normalize","serialize","TRAILING_SLASH_HASH","replace","schemaId","baseIds","fullPaths","localRefs","self","allKeys","sch","jsonPtr","rootSchema","parentJsonPtr","parentKeyword","parentSchema","keyIndex","escapeFragment","Error","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'uri-js';\nimport { __cjsMetaURL as _req0} from 'fast-deep-equal';\nimport { __cjsMetaURL as _req1} from './util';\nimport { __cjsMetaURL as _req2} from './schema_obj';\nimport { __cjsMetaURL as _req3} from 'json-schema-traverse';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n 'use strict';\n\n var URI = require('uri-js')\n   , equal = require('fast-deep-equal')\n   , util = require('./util')\n   , SchemaObject = require('./schema_obj')\n   , traverse = require('json-schema-traverse');\n\n module.exports = resolve;\n\n resolve.normalizeId = normalizeId;\n resolve.fullPath = getFullPath;\n resolve.url = resolveUrl;\n resolve.ids = resolveIds;\n resolve.inlineRef = inlineRef;\n resolve.schema = resolveSchema;\n\n /**\n  * [resolve and compile the references ($ref)]\n  * @this   Ajv\n  * @param  {Function} compile reference to schema compilation funciton (localCompile)\n  * @param  {Object} root object with information about the root schema for the current schema\n  * @param  {String} ref reference to resolve\n  * @return {Object|Function} schema object (if the schema can be inlined) or validation function\n  */\n function resolve(compile, root, ref) {\n   /* jshint validthis: true */\n   var refVal = this._refs[ref];\n   if (typeof refVal == 'string') {\n     if (this._refs[refVal]) refVal = this._refs[refVal];\n     else return resolve.call(this, compile, root, refVal);\n   }\n\n   refVal = refVal || this._schemas[ref];\n   if (refVal instanceof SchemaObject) {\n     return inlineRef(refVal.schema, this._opts.inlineRefs)\n             ? refVal.schema\n             : refVal.validate || this._compile(refVal);\n   }\n\n   var res = resolveSchema.call(this, root, ref);\n   var schema, v, baseId;\n   if (res) {\n     schema = res.schema;\n     root = res.root;\n     baseId = res.baseId;\n   }\n\n   if (schema instanceof SchemaObject) {\n     v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);\n   } else if (schema !== undefined) {\n     v = inlineRef(schema, this._opts.inlineRefs)\n         ? schema\n         : compile.call(this, schema, root, undefined, baseId);\n   }\n\n   return v;\n }\n\n\n /**\n  * Resolve schema, its root and baseId\n  * @this Ajv\n  * @param  {Object} root root object with properties schema, refVal, refs\n  * @param  {String} ref  reference to resolve\n  * @return {Object} object with properties schema, root, baseId\n  */\n function resolveSchema(root, ref) {\n   /* jshint validthis: true */\n   var p = URI.parse(ref)\n     , refPath = _getFullPath(p)\n     , baseId = getFullPath(this._getId(root.schema));\n   if (Object.keys(root.schema).length === 0 || refPath !== baseId) {\n     var id = normalizeId(refPath);\n     var refVal = this._refs[id];\n     if (typeof refVal == 'string') {\n       return resolveRecursive.call(this, root, refVal, p);\n     } else if (refVal instanceof SchemaObject) {\n       if (!refVal.validate) this._compile(refVal);\n       root = refVal;\n     } else {\n       refVal = this._schemas[id];\n       if (refVal instanceof SchemaObject) {\n         if (!refVal.validate) this._compile(refVal);\n         if (id == normalizeId(ref))\n           return { schema: refVal, root: root, baseId: baseId };\n         root = refVal;\n       } else {\n         return;\n       }\n     }\n     if (!root.schema) return;\n     baseId = getFullPath(this._getId(root.schema));\n   }\n   return getJsonPointer.call(this, p, baseId, root.schema, root);\n }\n\n\n /* @this Ajv */\n function resolveRecursive(root, ref, parsedRef) {\n   /* jshint validthis: true */\n   var res = resolveSchema.call(this, root, ref);\n   if (res) {\n     var schema = res.schema;\n     var baseId = res.baseId;\n     root = res.root;\n     var id = this._getId(schema);\n     if (id) baseId = resolveUrl(baseId, id);\n     return getJsonPointer.call(this, parsedRef, baseId, schema, root);\n   }\n }\n\n\n var PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);\n /* @this Ajv */\n function getJsonPointer(parsedRef, baseId, schema, root) {\n   /* jshint validthis: true */\n   parsedRef.fragment = parsedRef.fragment || '';\n   if (parsedRef.fragment.slice(0,1) != '/') return;\n   var parts = parsedRef.fragment.split('/');\n\n   for (var i = 1; i < parts.length; i++) {\n     var part = parts[i];\n     if (part) {\n       part = util.unescapeFragment(part);\n       schema = schema[part];\n       if (schema === undefined) break;\n       var id;\n       if (!PREVENT_SCOPE_CHANGE[part]) {\n         id = this._getId(schema);\n         if (id) baseId = resolveUrl(baseId, id);\n         if (schema.$ref) {\n           var $ref = resolveUrl(baseId, schema.$ref);\n           var res = resolveSchema.call(this, root, $ref);\n           if (res) {\n             schema = res.schema;\n             root = res.root;\n             baseId = res.baseId;\n           }\n         }\n       }\n     }\n   }\n   if (schema !== undefined && schema !== root.schema)\n     return { schema: schema, root: root, baseId: baseId };\n }\n\n\n var SIMPLE_INLINED = util.toHash([\n   'type', 'format', 'pattern',\n   'maxLength', 'minLength',\n   'maxProperties', 'minProperties',\n   'maxItems', 'minItems',\n   'maximum', 'minimum',\n   'uniqueItems', 'multipleOf',\n   'required', 'enum'\n ]);\n function inlineRef(schema, limit) {\n   if (limit === false) return false;\n   if (limit === undefined || limit === true) return checkNoRef(schema);\n   else if (limit) return countKeys(schema) <= limit;\n }\n\n\n function checkNoRef(schema) {\n   var item;\n   if (Array.isArray(schema)) {\n     for (var i=0; i<schema.length; i++) {\n       item = schema[i];\n       if (typeof item == 'object' && !checkNoRef(item)) return false;\n     }\n   } else {\n     for (var key in schema) {\n       if (key == '$ref') return false;\n       item = schema[key];\n       if (typeof item == 'object' && !checkNoRef(item)) return false;\n     }\n   }\n   return true;\n }\n\n\n function countKeys(schema) {\n   var count = 0, item;\n   if (Array.isArray(schema)) {\n     for (var i=0; i<schema.length; i++) {\n       item = schema[i];\n       if (typeof item == 'object') count += countKeys(item);\n       if (count == Infinity) return Infinity;\n     }\n   } else {\n     for (var key in schema) {\n       if (key == '$ref') return Infinity;\n       if (SIMPLE_INLINED[key]) {\n         count++;\n       } else {\n         item = schema[key];\n         if (typeof item == 'object') count += countKeys(item) + 1;\n         if (count == Infinity) return Infinity;\n       }\n     }\n   }\n   return count;\n }\n\n\n function getFullPath(id, normalize) {\n   if (normalize !== false) id = normalizeId(id);\n   var p = URI.parse(id);\n   return _getFullPath(p);\n }\n\n\n function _getFullPath(p) {\n   return URI.serialize(p).split('#')[0] + '#';\n }\n\n\n var TRAILING_SLASH_HASH = /#\\/?$/;\n function normalizeId(id) {\n   return id ? id.replace(TRAILING_SLASH_HASH, '') : '';\n }\n\n\n function resolveUrl(baseId, id) {\n   id = normalizeId(id);\n   return URI.resolve(baseId, id);\n }\n\n\n /* @this Ajv */\n function resolveIds(schema) {\n   var schemaId = normalizeId(this._getId(schema));\n   var baseIds = {'': schemaId};\n   var fullPaths = {'': getFullPath(schemaId, false)};\n   var localRefs = {};\n   var self = this;\n\n   traverse(schema, {allKeys: true}, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n     if (jsonPtr === '') return;\n     var id = self._getId(sch);\n     var baseId = baseIds[parentJsonPtr];\n     var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;\n     if (keyIndex !== undefined)\n       fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util.escapeFragment(keyIndex));\n\n     if (typeof id == 'string') {\n       id = baseId = normalizeId(baseId ? URI.resolve(baseId, id) : id);\n\n       var refVal = self._refs[id];\n       if (typeof refVal == 'string') refVal = self._refs[refVal];\n       if (refVal && refVal.schema) {\n         if (!equal(sch, refVal.schema))\n           throw new Error('id \"' + id + '\" resolves to more than one schema');\n       } else if (id != normalizeId(fullPath)) {\n         if (id[0] == '#') {\n           if (localRefs[id] && !equal(sch, localRefs[id]))\n             throw new Error('id \"' + id + '\" resolves to more than one schema');\n           localRefs[id] = sch;\n         } else {\n           self._refs[id] = fullPath;\n         }\n       }\n     }\n     baseIds[jsonPtr] = baseId;\n     fullPaths[jsonPtr] = fullPath;\n   });\n\n   return localRefs;\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  'uri-js': _req,\n  'fast-deep-equal': _req0,\n  './util': _req1,\n  './schema_obj': _req2,\n  'json-schema-traverse': _req3,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}