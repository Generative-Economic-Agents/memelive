{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/apis/polly-2016-06-10.min.json"],"names":["version","metadata","apiVersion","endpointPrefix","protocol","serviceFullName","serviceId","signatureVersion","uid","operations","DeleteLexicon","http","method","requestUri","responseCode","input","type","required","members","Name","location","locationName","output","DescribeVoices","Engine","LanguageCode","IncludeAdditionalLanguageCodes","NextToken","Voices","member","Gender","Id","LanguageName","AdditionalLanguageCodes","SupportedEngines","GetLexicon","Lexicon","Content","shape","LexiconAttributes","GetSpeechSynthesisTask","TaskId","SynthesisTask","ListLexicons","Lexicons","Attributes","ListSpeechSynthesisTasks","MaxResults","Status","SynthesisTasks","PutLexicon","StartSpeechSynthesisTask","LexiconNames","OutputFormat","OutputS3BucketName","OutputS3KeyPrefix","SampleRate","SnsTopicArn","SpeechMarkTypes","Text","TextType","VoiceId","SynthesizeSpeech","AudioStream","streaming","ContentType","RequestCharacters","payload","shapes","Sl","sensitive","Sm","Alphabet","LastModified","LexiconArn","LexemesCount","Size","Sv","TaskStatus","TaskStatusReason","OutputUri","CreationTime","S12","S15"],"mappings":"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","sourcesContent":["export default {\n  version: '2.0',\n  metadata: {\n    apiVersion: '2016-06-10',\n    endpointPrefix: 'polly',\n    protocol: 'rest-json',\n    serviceFullName: 'Amazon Polly',\n    serviceId: 'Polly',\n    signatureVersion: 'v4',\n    uid: 'polly-2016-06-10'\n  },\n  operations: {\n    DeleteLexicon: {\n      http: {\n        method: 'DELETE',\n        requestUri: '/v1/lexicons/{LexiconName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'Name'\n        ],\n        members: {\n          Name: {\n            location: 'uri',\n            locationName: 'LexiconName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      }\n    },\n    DescribeVoices: {\n      http: {\n        method: 'GET',\n        requestUri: '/v1/voices',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        members: {\n          Engine: {\n            location: 'querystring',\n            locationName: 'Engine'\n          },\n          LanguageCode: {\n            location: 'querystring',\n            locationName: 'LanguageCode'\n          },\n          IncludeAdditionalLanguageCodes: {\n            location: 'querystring',\n            locationName: 'IncludeAdditionalLanguageCodes',\n            type: 'boolean'\n          },\n          NextToken: {\n            location: 'querystring',\n            locationName: 'NextToken'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          Voices: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              members: {\n                Gender: {},\n                Id: {},\n                LanguageCode: {},\n                LanguageName: {},\n                Name: {},\n                AdditionalLanguageCodes: {\n                  type: 'list',\n                  member: {}\n                },\n                SupportedEngines: {\n                  type: 'list',\n                  member: {}\n                }\n              }\n            }\n          },\n          NextToken: {}\n        }\n      }\n    },\n    GetLexicon: {\n      http: {\n        method: 'GET',\n        requestUri: '/v1/lexicons/{LexiconName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'Name'\n        ],\n        members: {\n          Name: {\n            location: 'uri',\n            locationName: 'LexiconName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          Lexicon: {\n            type: 'structure',\n            members: {\n              Content: {\n                shape: 'Sl'\n              },\n              Name: {}\n            }\n          },\n          LexiconAttributes: {\n            shape: 'Sm'\n          }\n        }\n      }\n    },\n    GetSpeechSynthesisTask: {\n      http: {\n        method: 'GET',\n        requestUri: '/v1/synthesisTasks/{TaskId}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'TaskId'\n        ],\n        members: {\n          TaskId: {\n            location: 'uri',\n            locationName: 'TaskId'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          SynthesisTask: {\n            shape: 'Sv'\n          }\n        }\n      }\n    },\n    ListLexicons: {\n      http: {\n        method: 'GET',\n        requestUri: '/v1/lexicons',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        members: {\n          NextToken: {\n            location: 'querystring',\n            locationName: 'NextToken'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          Lexicons: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              members: {\n                Name: {},\n                Attributes: {\n                  shape: 'Sm'\n                }\n              }\n            }\n          },\n          NextToken: {}\n        }\n      }\n    },\n    ListSpeechSynthesisTasks: {\n      http: {\n        method: 'GET',\n        requestUri: '/v1/synthesisTasks',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        members: {\n          MaxResults: {\n            location: 'querystring',\n            locationName: 'MaxResults',\n            type: 'integer'\n          },\n          NextToken: {\n            location: 'querystring',\n            locationName: 'NextToken'\n          },\n          Status: {\n            location: 'querystring',\n            locationName: 'Status'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          NextToken: {},\n          SynthesisTasks: {\n            type: 'list',\n            member: {\n              shape: 'Sv'\n            }\n          }\n        }\n      }\n    },\n    PutLexicon: {\n      http: {\n        method: 'PUT',\n        requestUri: '/v1/lexicons/{LexiconName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'Name',\n          'Content'\n        ],\n        members: {\n          Name: {\n            location: 'uri',\n            locationName: 'LexiconName'\n          },\n          Content: {\n            shape: 'Sl'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      }\n    },\n    StartSpeechSynthesisTask: {\n      http: {\n        requestUri: '/v1/synthesisTasks',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'OutputFormat',\n          'OutputS3BucketName',\n          'Text',\n          'VoiceId'\n        ],\n        members: {\n          Engine: {},\n          LanguageCode: {},\n          LexiconNames: {\n            shape: 'S12'\n          },\n          OutputFormat: {},\n          OutputS3BucketName: {},\n          OutputS3KeyPrefix: {},\n          SampleRate: {},\n          SnsTopicArn: {},\n          SpeechMarkTypes: {\n            shape: 'S15'\n          },\n          Text: {},\n          TextType: {},\n          VoiceId: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          SynthesisTask: {\n            shape: 'Sv'\n          }\n        }\n      }\n    },\n    SynthesizeSpeech: {\n      http: {\n        requestUri: '/v1/speech',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'OutputFormat',\n          'Text',\n          'VoiceId'\n        ],\n        members: {\n          Engine: {},\n          LanguageCode: {},\n          LexiconNames: {\n            shape: 'S12'\n          },\n          OutputFormat: {},\n          SampleRate: {},\n          SpeechMarkTypes: {\n            shape: 'S15'\n          },\n          Text: {},\n          TextType: {},\n          VoiceId: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          AudioStream: {\n            type: 'blob',\n            streaming: true\n          },\n          ContentType: {\n            location: 'header',\n            locationName: 'Content-Type'\n          },\n          RequestCharacters: {\n            location: 'header',\n            locationName: 'x-amzn-RequestCharacters',\n            type: 'integer'\n          }\n        },\n        payload: 'AudioStream'\n      }\n    }\n  },\n  shapes: {\n    Sl: {\n      type: 'string',\n      sensitive: true\n    },\n    Sm: {\n      type: 'structure',\n      members: {\n        Alphabet: {},\n        LanguageCode: {},\n        LastModified: {\n          type: 'timestamp'\n        },\n        LexiconArn: {},\n        LexemesCount: {\n          type: 'integer'\n        },\n        Size: {\n          type: 'integer'\n        }\n      }\n    },\n    Sv: {\n      type: 'structure',\n      members: {\n        Engine: {},\n        TaskId: {},\n        TaskStatus: {},\n        TaskStatusReason: {},\n        OutputUri: {},\n        CreationTime: {\n          type: 'timestamp'\n        },\n        RequestCharacters: {\n          type: 'integer'\n        },\n        SnsTopicArn: {},\n        LexiconNames: {\n          shape: 'S12'\n        },\n        OutputFormat: {},\n        SampleRate: {},\n        SpeechMarkTypes: {\n          shape: 'S15'\n        },\n        TextType: {},\n        VoiceId: {},\n        LanguageCode: {}\n      }\n    },\n    S12: {\n      type: 'list',\n      member: {}\n    },\n    S15: {\n      type: 'list',\n      member: {}\n    }\n  }\n}"]}