{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/sshpk/lib/formats/pem.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","_req4","_req5","_req6","_req7","_req8","_req9","_req10","_req11","url","define","exports","require","module","__filename","__dirname","read","write","assert","asn1","crypto","Buffer","algs","utils","Key","PrivateKey","pkcs1","pkcs8","sshpriv","rfc4253","errors","OID_PBES2","OID_PBKDF2","OID_TO_CIPHER","CIPHER_TO_OID","Object","keys","forEach","k","OID_TO_HASH","HASH_TO_OID","buf","options","forceType","input","buffer","toString","lines","trim","split","m","si","length","match","ok","m2","ei","equal","type","toLowerCase","alg","slice","headers","join","from","cipher","key","iv","parts","passphrase","isBuffer","KeyEncryptedError","filename","opensslKeyDeriv","eder","BerReader","pbesEnd","readSequence","offset","method","readOID","Error","kdfEnd","kdfOid","salt","readString","Ber","OctetString","iterations","readInt","hashAlg","hashAlgOid","undefined","_offset","cipherOid","cinfo","opensshCipherInfo","opensslName","pbkdf2","keySize","cipherStream","createDecipheriv","chunk","chunks","once","e","indexOf","end","push","concat","readSSHPrivate","readType","der","originalInput","strictEqual","readPkcs1","readPkcs8","object","header","BerWriter","isPrivateKey","writePkcs8","writePkcs1","isKey","tmp","len","alloc","o","i","limit","_cjsExports","_read","_write"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'assert-plus';\nimport { __cjsMetaURL as _req0} from 'asn1';\nimport { __cjsMetaURL as _req1} from 'crypto';\nimport { __cjsMetaURL as _req2} from 'safer-buffer';\nimport { __cjsMetaURL as _req3} from '../algs';\nimport { __cjsMetaURL as _req4} from '../utils';\nimport { __cjsMetaURL as _req5} from '../key';\nimport { __cjsMetaURL as _req6} from '../private-key';\nimport { __cjsMetaURL as _req7} from './pkcs1';\nimport { __cjsMetaURL as _req8} from './pkcs8';\nimport { __cjsMetaURL as _req9} from './ssh-private';\nimport { __cjsMetaURL as _req10} from './rfc4253';\nimport { __cjsMetaURL as _req11} from '../errors';\nlet _cjsExports;\nlet _read;\nlet _write;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n // Copyright 2018 Joyent, Inc.\n\n module.exports = {\n \tread: read,\n \twrite: write\n };\n\n var assert = require('assert-plus');\n var asn1 = require('asn1');\n var crypto = require('crypto');\n var Buffer = require('safer-buffer').Buffer;\n var algs = require('../algs');\n var utils = require('../utils');\n var Key = require('../key');\n var PrivateKey = require('../private-key');\n\n var pkcs1 = require('./pkcs1');\n var pkcs8 = require('./pkcs8');\n var sshpriv = require('./ssh-private');\n var rfc4253 = require('./rfc4253');\n\n var errors = require('../errors');\n\n var OID_PBES2 = '1.2.840.113549.1.5.13';\n var OID_PBKDF2 = '1.2.840.113549.1.5.12';\n\n var OID_TO_CIPHER = {\n \t'1.2.840.113549.3.7': '3des-cbc',\n \t'2.16.840.1.101.3.4.1.2': 'aes128-cbc',\n \t'2.16.840.1.101.3.4.1.42': 'aes256-cbc'\n };\n var CIPHER_TO_OID = {};\n Object.keys(OID_TO_CIPHER).forEach(function (k) {\n \tCIPHER_TO_OID[OID_TO_CIPHER[k]] = k;\n });\n\n var OID_TO_HASH = {\n \t'1.2.840.113549.2.7': 'sha1',\n \t'1.2.840.113549.2.9': 'sha256',\n \t'1.2.840.113549.2.11': 'sha512'\n };\n var HASH_TO_OID = {};\n Object.keys(OID_TO_HASH).forEach(function (k) {\n \tHASH_TO_OID[OID_TO_HASH[k]] = k;\n });\n\n /*\n  * For reading we support both PKCS#1 and PKCS#8. If we find a private key,\n  * we just take the public component of it and use that.\n  */\n function read(buf, options, forceType) {\n \tvar input = buf;\n \tif (typeof (buf) !== 'string') {\n \t\tassert.buffer(buf, 'buf');\n \t\tbuf = buf.toString('ascii');\n \t}\n\n \tvar lines = buf.trim().split(/[\\r\\n]+/g);\n\n \tvar m;\n \tvar si = -1;\n \twhile (!m && si < lines.length) {\n \t\tm = lines[++si].match(/*JSSTYLED*/\n \t\t    /[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n \t}\n \tassert.ok(m, 'invalid PEM header');\n\n \tvar m2;\n \tvar ei = lines.length;\n \twhile (!m2 && ei > 0) {\n \t\tm2 = lines[--ei].match(/*JSSTYLED*/\n \t\t    /[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n \t}\n \tassert.ok(m2, 'invalid PEM footer');\n\n \t/* Begin and end banners must match key type */\n \tassert.equal(m[2], m2[2]);\n \tvar type = m[2].toLowerCase();\n\n \tvar alg;\n \tif (m[1]) {\n \t\t/* They also must match algorithms, if given */\n \t\tassert.equal(m[1], m2[1], 'PEM header and footer mismatch');\n \t\talg = m[1].trim();\n \t}\n\n \tlines = lines.slice(si, ei + 1);\n\n \tvar headers = {};\n \twhile (true) {\n \t\tlines = lines.slice(1);\n \t\tm = lines[0].match(/*JSSTYLED*/\n \t\t    /^([A-Za-z0-9-]+): (.+)$/);\n \t\tif (!m)\n \t\t\tbreak;\n \t\theaders[m[1].toLowerCase()] = m[2];\n \t}\n\n \t/* Chop off the first and last lines */\n \tlines = lines.slice(0, -1).join('');\n \tbuf = Buffer.from(lines, 'base64');\n\n \tvar cipher, key, iv;\n \tif (headers['proc-type']) {\n \t\tvar parts = headers['proc-type'].split(',');\n \t\tif (parts[0] === '4' && parts[1] === 'ENCRYPTED') {\n \t\t\tif (typeof (options.passphrase) === 'string') {\n \t\t\t\toptions.passphrase = Buffer.from(\n \t\t\t\t    options.passphrase, 'utf-8');\n \t\t\t}\n \t\t\tif (!Buffer.isBuffer(options.passphrase)) {\n \t\t\t\tthrow (new errors.KeyEncryptedError(\n \t\t\t\t    options.filename, 'PEM'));\n \t\t\t} else {\n \t\t\t\tparts = headers['dek-info'].split(',');\n \t\t\t\tassert.ok(parts.length === 2);\n \t\t\t\tcipher = parts[0].toLowerCase();\n \t\t\t\tiv = Buffer.from(parts[1], 'hex');\n \t\t\t\tkey = utils.opensslKeyDeriv(cipher, iv,\n \t\t\t\t    options.passphrase, 1).key;\n \t\t\t}\n \t\t}\n \t}\n\n \tif (alg && alg.toLowerCase() === 'encrypted') {\n \t\tvar eder = new asn1.BerReader(buf);\n \t\tvar pbesEnd;\n \t\teder.readSequence();\n\n \t\teder.readSequence();\n \t\tpbesEnd = eder.offset + eder.length;\n\n \t\tvar method = eder.readOID();\n \t\tif (method !== OID_PBES2) {\n \t\t\tthrow (new Error('Unsupported PEM/PKCS8 encryption ' +\n \t\t\t    'scheme: ' + method));\n \t\t}\n\n \t\teder.readSequence();\t/* PBES2-params */\n\n \t\teder.readSequence();\t/* keyDerivationFunc */\n \t\tvar kdfEnd = eder.offset + eder.length;\n \t\tvar kdfOid = eder.readOID();\n \t\tif (kdfOid !== OID_PBKDF2)\n \t\t\tthrow (new Error('Unsupported PBES2 KDF: ' + kdfOid));\n \t\teder.readSequence();\n \t\tvar salt = eder.readString(asn1.Ber.OctetString, true);\n \t\tvar iterations = eder.readInt();\n \t\tvar hashAlg = 'sha1';\n \t\tif (eder.offset < kdfEnd) {\n \t\t\teder.readSequence();\n \t\t\tvar hashAlgOid = eder.readOID();\n \t\t\thashAlg = OID_TO_HASH[hashAlgOid];\n \t\t\tif (hashAlg === undefined) {\n \t\t\t\tthrow (new Error('Unsupported PBKDF2 hash: ' +\n \t\t\t\t    hashAlgOid));\n \t\t\t}\n \t\t}\n \t\teder._offset = kdfEnd;\n\n \t\teder.readSequence();\t/* encryptionScheme */\n \t\tvar cipherOid = eder.readOID();\n \t\tcipher = OID_TO_CIPHER[cipherOid];\n \t\tif (cipher === undefined) {\n \t\t\tthrow (new Error('Unsupported PBES2 cipher: ' +\n \t\t\t    cipherOid));\n \t\t}\n \t\tiv = eder.readString(asn1.Ber.OctetString, true);\n\n \t\teder._offset = pbesEnd;\n \t\tbuf = eder.readString(asn1.Ber.OctetString, true);\n\n \t\tif (typeof (options.passphrase) === 'string') {\n \t\t\toptions.passphrase = Buffer.from(\n \t\t\t    options.passphrase, 'utf-8');\n \t\t}\n \t\tif (!Buffer.isBuffer(options.passphrase)) {\n \t\t\tthrow (new errors.KeyEncryptedError(\n \t\t\t    options.filename, 'PEM'));\n \t\t}\n\n \t\tvar cinfo = utils.opensshCipherInfo(cipher);\n\n \t\tcipher = cinfo.opensslName;\n \t\tkey = utils.pbkdf2(hashAlg, salt, iterations, cinfo.keySize,\n \t\t    options.passphrase);\n \t\talg = undefined;\n \t}\n\n \tif (cipher && key && iv) {\n \t\tvar cipherStream = crypto.createDecipheriv(cipher, key, iv);\n \t\tvar chunk, chunks = [];\n \t\tcipherStream.once('error', function (e) {\n \t\t\tif (e.toString().indexOf('bad decrypt') !== -1) {\n \t\t\t\tthrow (new Error('Incorrect passphrase ' +\n \t\t\t\t    'supplied, could not decrypt key'));\n \t\t\t}\n \t\t\tthrow (e);\n \t\t});\n \t\tcipherStream.write(buf);\n \t\tcipherStream.end();\n \t\twhile ((chunk = cipherStream.read()) !== null)\n \t\t\tchunks.push(chunk);\n \t\tbuf = Buffer.concat(chunks);\n \t}\n\n \t/* The new OpenSSH internal format abuses PEM headers */\n \tif (alg && alg.toLowerCase() === 'openssh')\n \t\treturn (sshpriv.readSSHPrivate(type, buf, options));\n \tif (alg && alg.toLowerCase() === 'ssh2')\n \t\treturn (rfc4253.readType(type, buf, options));\n\n \tvar der = new asn1.BerReader(buf);\n \tder.originalInput = input;\n\n \t/*\n \t * All of the PEM file types start with a sequence tag, so chop it\n \t * off here\n \t */\n \tder.readSequence();\n\n \t/* PKCS#1 type keys name an algorithm in the banner explicitly */\n \tif (alg) {\n \t\tif (forceType)\n \t\t\tassert.strictEqual(forceType, 'pkcs1');\n \t\treturn (pkcs1.readPkcs1(alg, type, der));\n \t} else {\n \t\tif (forceType)\n \t\t\tassert.strictEqual(forceType, 'pkcs8');\n \t\treturn (pkcs8.readPkcs8(alg, type, der));\n \t}\n }\n\n function write(key, options, type) {\n \tassert.object(key);\n\n \tvar alg = {\n \t    'ecdsa': 'EC',\n \t    'rsa': 'RSA',\n \t    'dsa': 'DSA',\n \t    'ed25519': 'EdDSA'\n \t}[key.type];\n \tvar header;\n\n \tvar der = new asn1.BerWriter();\n\n \tif (PrivateKey.isPrivateKey(key)) {\n \t\tif (type && type === 'pkcs8') {\n \t\t\theader = 'PRIVATE KEY';\n \t\t\tpkcs8.writePkcs8(der, key);\n \t\t} else {\n \t\t\tif (type)\n \t\t\t\tassert.strictEqual(type, 'pkcs1');\n \t\t\theader = alg + ' PRIVATE KEY';\n \t\t\tpkcs1.writePkcs1(der, key);\n \t\t}\n\n \t} else if (Key.isKey(key)) {\n \t\tif (type && type === 'pkcs1') {\n \t\t\theader = alg + ' PUBLIC KEY';\n \t\t\tpkcs1.writePkcs1(der, key);\n \t\t} else {\n \t\t\tif (type)\n \t\t\t\tassert.strictEqual(type, 'pkcs8');\n \t\t\theader = 'PUBLIC KEY';\n \t\t\tpkcs8.writePkcs8(der, key);\n \t\t}\n\n \t} else {\n \t\tthrow (new Error('key is not a Key or PrivateKey'));\n \t}\n\n \tvar tmp = der.buffer.toString('base64');\n \tvar len = tmp.length + (tmp.length / 64) +\n \t    18 + 16 + header.length*2 + 10;\n \tvar buf = Buffer.alloc(len);\n \tvar o = 0;\n \to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n \tfor (var i = 0; i < tmp.length; ) {\n \t\tvar limit = i + 64;\n \t\tif (limit > tmp.length)\n \t\t\tlimit = tmp.length;\n \t\to += buf.write(tmp.slice(i, limit), o);\n \t\tbuf[o++] = 10;\n \t\ti = limit;\n \t}\n \to += buf.write('-----END ' + header + '-----\\n', o);\n\n \treturn (buf.slice(0, o));\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_read = module.exports.read;\n_write = module.exports.write;\n\n}, () => ({\n  'assert-plus': _req,\n  'asn1': _req0,\n  'crypto': _req1,\n  'safer-buffer': _req2,\n  '../algs': _req3,\n  '../utils': _req4,\n  '../key': _req5,\n  '../private-key': _req6,\n  './pkcs1': _req7,\n  './pkcs8': _req8,\n  './ssh-private': _req9,\n  './rfc4253': _req10,\n  '../errors': _req11,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}