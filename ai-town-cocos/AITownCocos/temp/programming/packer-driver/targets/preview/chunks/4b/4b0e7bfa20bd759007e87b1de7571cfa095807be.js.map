{"version":3,"sources":["file:///Users/feiwang/workSpace/AITown/cutepet/node_modules/lodash-es/remove.js"],"names":["remove","array","predicate","result","length","index","indexes","baseIteratee","value","push","basePullAt"],"mappings":";;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,MAAT,CAAgBC,KAAhB,EAAuBC,SAAvB,EAAkC;AAChC,QAAIC,MAAM,GAAG,EAAb;;AACA,QAAI,EAAEF,KAAK,IAAIA,KAAK,CAACG,MAAjB,CAAJ,EAA8B;AAC5B,aAAOD,MAAP;AACD;;AACD,QAAIE,KAAK,GAAG,CAAC,CAAb;AAAA,QACIC,OAAO,GAAG,EADd;AAAA,QAEIF,MAAM,GAAGH,KAAK,CAACG,MAFnB;AAIAF,IAAAA,SAAS,GAAGK,YAAY,CAACL,SAAD,EAAY,CAAZ,CAAxB;;AACA,WAAO,EAAEG,KAAF,GAAUD,MAAjB,EAAyB;AACvB,UAAII,KAAK,GAAGP,KAAK,CAACI,KAAD,CAAjB;;AACA,UAAIH,SAAS,CAACM,KAAD,EAAQH,KAAR,EAAeJ,KAAf,CAAb,EAAoC;AAClCE,QAAAA,MAAM,CAACM,IAAP,CAAYD,KAAZ;AACAF,QAAAA,OAAO,CAACG,IAAR,CAAaJ,KAAb;AACD;AACF;;AACDK,IAAAA,UAAU,CAACT,KAAD,EAAQK,OAAR,CAAV;AACA,WAAOH,MAAP;AACD;;;;AAlDMI,MAAAA,Y;;AACAG,MAAAA,U;;;yBAmDQV,M","sourcesContent":["import baseIteratee from './_baseIteratee.js';\nimport basePullAt from './_basePullAt.js';\n\n/**\n * Removes all elements from `array` that `predicate` returns truthy for\n * and returns an array of the removed elements. The predicate is invoked\n * with three arguments: (value, index, array).\n *\n * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n * to pull elements from an array by value.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new array of removed elements.\n * @example\n *\n * var array = [1, 2, 3, 4];\n * var evens = _.remove(array, function(n) {\n *   return n % 2 == 0;\n * });\n *\n * console.log(array);\n * // => [1, 3]\n *\n * console.log(evens);\n * // => [2, 4]\n */\nfunction remove(array, predicate) {\n  var result = [];\n  if (!(array && array.length)) {\n    return result;\n  }\n  var index = -1,\n      indexes = [],\n      length = array.length;\n\n  predicate = baseIteratee(predicate, 3);\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result.push(value);\n      indexes.push(index);\n    }\n  }\n  basePullAt(array, indexes);\n  return result;\n}\n\nexport default remove;\n"]}