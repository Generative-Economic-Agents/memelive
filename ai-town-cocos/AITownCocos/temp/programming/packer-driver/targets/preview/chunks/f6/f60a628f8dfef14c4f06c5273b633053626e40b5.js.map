{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/lastIndexOf.js"],"names":["lastIndexOf","array","value","fromIndex","length","index","undefined","toInteger","nativeMax","nativeMin","strictLastIndexOf","baseFindIndex","baseIsNaN","Math","max","min"],"mappings":";;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,SAAnC,EAA8C;AAC5C,QAAIC,MAAM,GAAGH,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoBA,KAAK,CAACG,MAAvC;;AACA,QAAI,CAACA,MAAL,EAAa;AACX,aAAO,CAAC,CAAR;AACD;;AACD,QAAIC,KAAK,GAAGD,MAAZ;;AACA,QAAID,SAAS,KAAKG,SAAlB,EAA6B;AAC3BD,MAAAA,KAAK,GAAGE,SAAS,CAACJ,SAAD,CAAjB;AACAE,MAAAA,KAAK,GAAGA,KAAK,GAAG,CAAR,GAAYG,SAAS,CAACJ,MAAM,GAAGC,KAAV,EAAiB,CAAjB,CAArB,GAA2CI,SAAS,CAACJ,KAAD,EAAQD,MAAM,GAAG,CAAjB,CAA5D;AACD;;AACD,WAAOF,KAAK,KAAKA,KAAV,GACHQ,iBAAiB,CAACT,KAAD,EAAQC,KAAR,EAAeG,KAAf,CADd,GAEHM,aAAa,CAACV,KAAD,EAAQW,SAAR,EAAmBP,KAAnB,EAA0B,IAA1B,CAFjB;AAGD;;;;AA3CMM,MAAAA,a;;AACAC,MAAAA,S;;AACAF,MAAAA,iB;;AACAH,MAAAA,S;;;AAEP;AACIC,MAAAA,S,GAAYK,IAAI,CAACC,G;AACjBL,MAAAA,S,GAAYI,IAAI,CAACE,G;;yBAsCNf,W","sourcesContent":["import baseFindIndex from './_baseFindIndex.js';\nimport baseIsNaN from './_baseIsNaN.js';\nimport strictLastIndexOf from './_strictLastIndexOf.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * This method is like `_.indexOf` except that it iterates over elements of\n * `array` from right to left.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=array.length-1] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.lastIndexOf([1, 2, 1, 2], 2);\n * // => 3\n *\n * // Search from the `fromIndex`.\n * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n * // => 1\n */\nfunction lastIndexOf(array, value, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = length;\n  if (fromIndex !== undefined) {\n    index = toInteger(fromIndex);\n    index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n  }\n  return value === value\n    ? strictLastIndexOf(array, value, index)\n    : baseFindIndex(array, baseIsNaN, index, true);\n}\n\nexport default lastIndexOf;\n"]}