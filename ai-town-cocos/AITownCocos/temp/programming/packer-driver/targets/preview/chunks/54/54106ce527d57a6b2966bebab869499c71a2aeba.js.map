{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/assets/src/town/AnimalsControl.ts"],"names":["_decorator","Component","Node","randomRangeInt","PromiseUtils","ccclass","property","offsetX","offsetY","AnimalsControl","Number","frameTime","start","wait","frameSprite","indexY","moveOffsetX","moveOffsetY","index","setFrameMove","animalFrame","randomAction","node","indexX","judgeRange","setPosition","animal","getPosition","x","y","type","upIndex","downIndex","leftIndex","rightIndex","pos","maxX","maxY","minX","minY","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, randomRange, randomRangeInt } from \"cc\";\nimport { PromiseUtils } from \"../StaticUtils/PromiseUtils\";\nconst { ccclass, property } = _decorator;\nconst offsetX = -70.5;\nconst offsetY = 70;\n@ccclass(\"AnimalsControl\")\nexport class AnimalsControl extends Component {\n  @property(Node)\n  public animal: Node = null;\n\n  @property(Node)\n  public animalFrame: Node = null;\n\n  @property(Number)\n  public maxX: Number = 0;\n\n  @property(Number)\n  public minX: Number = 0;\n\n  @property(Number)\n  public maxY: Number = 0;\n\n  @property(Number)\n  public minY: Number = 0;\n\n  @property(Number)\n  public upIndex: Number = 0;\n\n  @property(Number)\n  public downIndex: Number = 0;\n\n  @property(Number)\n  public leftIndex: Number = 0;\n\n  @property(Number)\n  public rightIndex: Number = 0;\n\n  frameTime: number = 0;\n\n  async start() {\n    await PromiseUtils.wait(250);\n    await this.frameSprite(0, 0, -10);\n  }\n\n  async frameSprite(\n    indexY: number,\n    moveOffsetX: number = 0,\n    moveOffsetY: number = 0\n  ) {\n    for (const index of [0, 1, 2, 3]) {\n      await this.setFrameMove(\n        this.animalFrame,\n        index,\n        indexY,\n        moveOffsetX,\n        moveOffsetY\n      );\n    }\n    await this.randomAction();\n  }\n\n  async setFrameMove(\n    node: Node,\n    indexX: number,\n    indexY: number,\n    moveOffsetX: number = 0,\n    moveOffsetY: number = 0\n  ) {\n    this.judgeRange();\n    this.animalFrame.setPosition(indexX * offsetX, offsetY * indexY);\n    this.animal.setPosition(\n      this.animal.getPosition().x + moveOffsetX,\n      this.animal.getPosition().y + moveOffsetY\n    );\n    await PromiseUtils.wait(250);\n  }\n\n  async randomAction() {\n    const type = randomRangeInt(0, 5);\n    switch (type) {\n      case 0:\n        await this.frameSprite(Number(this.upIndex), 0, 10);\n        break;\n      case 1:\n        await this.frameSprite(Number(this.downIndex), 0, -10);\n        break;\n      case 2:\n        await this.frameSprite(Number(this.leftIndex), -10, 0);\n        break;\n      case 3:\n        await this.frameSprite(Number(this.rightIndex), 10, 0);\n        break;\n      case 4:\n        await this.frameSprite(4, 0, 0);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  judgeRange() {\n    const pos = this.animal.getPosition();\n    if (pos.x >= Number(this.maxX)) {\n      this.animal.setPosition(Number(this.maxX), pos.y);\n    }\n    if (pos.y >= Number(this.maxY)) {\n      this.animal.setPosition(pos.x, Number(this.maxY));\n    }\n    if (pos.x <= Number(this.minX)) {\n      this.animal.setPosition(Number(this.minX), pos.y);\n    }\n    if (pos.y <= Number(this.minY)) {\n      this.animal.setPosition(pos.x, Number(this.minY));\n    }\n  }\n\n  update(deltaTime: number) {}\n}\n"]}