{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/token/sso_token_provider.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","url","define","exports","require","module","__filename","__dirname","AWS","crypto","fs","path","iniLoader","util","lastRefreshAttemptTime","validateTokenKey","token","key","error","Error","code","refreshUnsuccessful","currentTime","tokenExpireTime","callback","SSOTokenProvider","inherit","Token","expiryWindow","constructor","options","call","expired","profile","process","env","AWS_PROFILE","defaultProfile","get","fn","noop","load","self","profiles","loadFrom","isConfig","Object","keys","length","ssoSessionName","ssoSessions","loadSsoSessionsFrom","ssoSession","hasher","createHash","fileName","update","digest","cachePath","join","getHomeDir","tokenFromCache","JSON","parse","readFileSync","date","getDate","getTime","adjustedTime","Date","accessToken","expireTime","service","config","region","sso_region","SSOOIDC","params","clientId","clientSecret","refreshToken","grantType","createToken","err","data","now","expiresIn","expiresAt","toISOString","writeFileSync","stringify","refresh","clearCachedFiles","coalesceRefresh","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from 'crypto';\nimport { __cjsMetaURL as _req1} from 'fs';\nimport { __cjsMetaURL as _req2} from 'path';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n var crypto = require('crypto');\n var fs = require('fs');\n var path = require('path');\n var iniLoader = AWS.util.iniLoader;\n\n // Tracking refresh attempt to ensure refresh is not attempted more than once every 30 seconds.\n var lastRefreshAttemptTime = 0;\n\n /**\n  * Throws error is key is not present in token object.\n  *\n  * @param token [Object] Object to be validated.\n  * @param key [String] The key to be validated on the object.\n  */\n var validateTokenKey = function validateTokenKey(token, key) {\n   if (!token[key]) {\n     throw AWS.util.error(\n       new Error('Key \"' + key + '\" not present in SSO Token'),\n       { code: 'SSOTokenProviderFailure' }\n     );\n   }\n };\n\n /**\n  * Calls callback function with or without error based on provided times in case\n  * of unsuccessful refresh.\n  *\n  * @param currentTime [number] current time in milliseconds since ECMAScript epoch.\n  * @param tokenExpireTime [number] token expire time in milliseconds since ECMAScript epoch.\n  * @param callback [Function] Callback to call in case of error.\n  */\n var refreshUnsuccessful = function refreshUnsuccessful(\n   currentTime,\n   tokenExpireTime,\n   callback\n ) {\n   if (tokenExpireTime > currentTime) {\n     // Cached token is still valid, return.\n     callback(null);\n   } else {\n     // Token invalid, throw error requesting user to sso login.\n     throw AWS.util.error(\n       new Error('SSO Token refresh failed. Please log in using \"aws sso login\"'),\n       { code: 'SSOTokenProviderFailure' }\n     );\n   }\n };\n\n /**\n  * Represents token loaded from disk derived from the AWS SSO device grant authorication flow.\n  *\n  * ## Using SSO Token Provider\n  *\n  * This provider is checked by default in the Node.js environment in TokenProviderChain.\n  * To use the SSO Token Provider, simply add your SSO Start URL and Region to the\n  * ~/.aws/config file in the following format:\n  *\n  *     [default]\n  *     sso_start_url = https://d-abc123.awsapps.com/start\n  *     sso_region = us-east-1\n  *\n  * ## Using custom profiles\n  *\n  * The SDK supports loading token for separate profiles. This can be done in two ways:\n  *\n  * 1. Set the `AWS_PROFILE` environment variable in your process prior to loading the SDK.\n  * 2. Directly load the AWS.SSOTokenProvider:\n  *\n  * ```javascript\n  * var ssoTokenProvider = new AWS.SSOTokenProvider({profile: 'myprofile'});\n  * ```\n  *\n  * @!macro nobrowser\n  */\n AWS.SSOTokenProvider = AWS.util.inherit(AWS.Token, {\n   /**\n    * Expiry window of five minutes.\n    */\n   expiryWindow: 5 * 60,\n\n   /**\n    * Creates a new token object from cached access token.\n    *\n    * @param options [map] a set of options\n    * @option options profile [String] (AWS_PROFILE env var or 'default')\n    *   the name of the profile to load.\n    * @option options callback [Function] (err) Token is eagerly loaded\n    *   by the constructor. When the callback is called with no error, the\n    *   token has been loaded successfully.\n    */\n   constructor: function SSOTokenProvider(options) {\n     AWS.Token.call(this);\n\n     options = options || {};\n\n     this.expired = true;\n     this.profile = options.profile || process.env.AWS_PROFILE || AWS.util.defaultProfile;\n     this.get(options.callback || AWS.util.fn.noop);\n   },\n\n   /**\n    * Reads sso_start_url from provided profile, and reads token from\n    * ~/.aws/sso/cache/<sha1-of-utf8-encoded-value-from-sso_start_url>.json\n    *\n    * Throws an error if required fields token and expiresAt are missing.\n    * Throws an error if token has expired and metadata to perform refresh is\n    * not available.\n    * Attempts to refresh the token if it's within 5 minutes before expiry time.\n    *\n    * @api private\n    */\n   load: function load(callback) {\n     var self = this;\n     var profiles = iniLoader.loadFrom({ isConfig: true });\n     var profile = profiles[this.profile] || {};\n\n     if (Object.keys(profile).length === 0) {\n       throw AWS.util.error(\n         new Error('Profile \"' + this.profile + '\" not found'),\n         { code: 'SSOTokenProviderFailure' }\n       );\n     } else if (!profile['sso_session']) {\n       throw AWS.util.error(\n         new Error('Profile \"' + this.profile + '\" is missing required property \"sso_session\".'),\n         { code: 'SSOTokenProviderFailure' }\n       );\n     }\n\n     var ssoSessionName = profile['sso_session'];\n     var ssoSessions = iniLoader.loadSsoSessionsFrom();\n     var ssoSession = ssoSessions[ssoSessionName];\n\n     if (!ssoSession) {\n       throw AWS.util.error(\n         new Error('Sso session \"' + ssoSessionName + '\" not found'),\n         { code: 'SSOTokenProviderFailure' }\n       );\n     } else if (!ssoSession['sso_start_url']) {\n       throw AWS.util.error(\n         new Error('Sso session \"' + this.profile + '\" is missing required property \"sso_start_url\".'),\n         { code: 'SSOTokenProviderFailure' }\n       );\n     } else if (!ssoSession['sso_region']) {\n       throw AWS.util.error(\n         new Error('Sso session \"' + this.profile + '\" is missing required property \"sso_region\".'),\n         { code: 'SSOTokenProviderFailure' }\n       );\n     }\n\n     var hasher = crypto.createHash('sha1');\n     var fileName = hasher.update(ssoSessionName).digest('hex') + '.json';\n     var cachePath = path.join(iniLoader.getHomeDir(), '.aws', 'sso', 'cache', fileName);\n     var tokenFromCache = JSON.parse(fs.readFileSync(cachePath));\n\n     if (!tokenFromCache) {\n       throw AWS.util.error(\n         new Error('Cached token not found. Please log in using \"aws sso login\"'\n           + ' for profile \"' + this.profile + '\".'),\n         { code: 'SSOTokenProviderFailure' }\n       );\n     }\n\n     validateTokenKey(tokenFromCache, 'accessToken');\n     validateTokenKey(tokenFromCache, 'expiresAt');\n\n     var currentTime = AWS.util.date.getDate().getTime();\n     var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);\n     var tokenExpireTime = new Date(tokenFromCache['expiresAt']);\n\n     if (tokenExpireTime > adjustedTime) {\n       // Token is valid and not expired.\n       self.token = tokenFromCache.accessToken;\n       self.expireTime = tokenExpireTime;\n       self.expired = false;\n       callback(null);\n       return;\n     }\n\n     // Skip new refresh, if last refresh was done within 30 seconds.\n     if (currentTime - lastRefreshAttemptTime < 30 * 1000) {\n       refreshUnsuccessful(currentTime, tokenExpireTime, callback);\n       return;\n     }\n\n     // Token is in expiry window, refresh from SSOOIDC.createToken() call.\n     validateTokenKey(tokenFromCache, 'clientId');\n     validateTokenKey(tokenFromCache, 'clientSecret');\n     validateTokenKey(tokenFromCache, 'refreshToken');\n\n     if (!self.service || self.service.config.region !== ssoSession.sso_region) {\n       self.service = new AWS.SSOOIDC({ region: ssoSession.sso_region });\n     }\n\n     var params = {\n       clientId: tokenFromCache.clientId,\n       clientSecret: tokenFromCache.clientSecret,\n       refreshToken: tokenFromCache.refreshToken,\n       grantType: 'refresh_token',\n     };\n\n     lastRefreshAttemptTime = AWS.util.date.getDate().getTime();\n     self.service.createToken(params, function(err, data) {\n       if (err || !data) {\n         refreshUnsuccessful(currentTime, tokenExpireTime, callback);\n       } else {\n         try {\n           validateTokenKey(data, 'accessToken');\n           validateTokenKey(data, 'expiresIn');\n           self.expired = false;\n           self.token = data.accessToken;\n           self.expireTime = new Date(Date.now() + data.expiresIn * 1000);\n           callback(null);\n\n           try {\n             // Write updated token data to disk.\n             tokenFromCache.accessToken = data.accessToken;\n             tokenFromCache.expiresAt = self.expireTime.toISOString();\n             tokenFromCache.refreshToken = data.refreshToken;\n             fs.writeFileSync(cachePath, JSON.stringify(tokenFromCache, null, 2));\n           } catch (error) {\n             // Swallow error if unable to write token to file.\n           }\n         } catch (error) {\n           refreshUnsuccessful(currentTime, tokenExpireTime, callback);\n         }\n       }\n     });\n   },\n\n   /**\n    * Loads the cached access token from disk.\n    *\n    * @callback callback function(err)\n    *   Called after the AWS SSO process has been executed. When this\n    *   callback is called with no error, it means that the token information\n    *   has been loaded into the object (as the `token` property).\n    *   @param err [Error] if an error occurred, this value will be filled.\n    * @see get\n    */\n   refresh: function refresh(callback) {\n     iniLoader.clearCachedFiles();\n     this.coalesceRefresh(callback || AWS.util.fn.callback);\n   },\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n  'crypto': _req0,\n  'fs': _req1,\n  'path': _req2,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}