{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/assets/src/manager/RedManager.ts"],"names":["RedManager","observer","keystate","redpoint","instance","_instance","registRedPoint","key","rednode","childkey","changeState","state","node","active","setkeyState","arg0","tasklist","KEY","renwutabred","da","data","index","length","element","status","renwutabred_main","post","getKeyState"],"mappings":";;;yFAQqBA,U;;;;;;;;;;;;;;;;;;;;AADZC,MAAAA,Q,iBAAAA,Q;;;;;;;;;yBACYD,U,GAAN,MAAMA,UAAN,CAAiB;AAAA;AAAA,eAerBE,QAfqB,GAeV,EAfU;AAAA,eAgBrBC,QAhBqB,GAgBL,EAhBK;AAAA;;AAQT,mBAARC,QAAQ,GAAG;AAClB,cAAI,KAAKC,SAAT,EAAoB;AAChB,mBAAO,KAAKA,SAAZ;AACH;;AACD,eAAKA,SAAL,GAAiB,IAAIL,UAAJ,EAAjB;AACA,iBAAO,KAAKK,SAAZ;AACH;;AAGDC,QAAAA,cAAc,CAACC,GAAD,EAAcC,OAAd,EAA6BC,QAA7B,EAAwD;AAAA,cAA3BA,QAA2B;AAA3BA,YAAAA,QAA2B,GAAN,IAAM;AAAA;;AAClE,eAAKN,QAAL,CAAcI,GAAd,IAAqBC,OAArB;AACH;;AACDE,QAAAA,WAAW,CAACH,GAAD,EAAcI,KAAd,EAA8B;AACrC,cAAIC,IAAI,GAAG,KAAKT,QAAL,CAAcI,GAAd,CAAX;;AACA,cAAIK,IAAJ,EAAU;AACNA,YAAAA,IAAI,CAACC,MAAL,GAAcF,KAAd;AACH,WAJoC,CAKrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEH;;AACDG,QAAAA,WAAW,CAACC,IAAD,EAAeC,QAAf,EAA8B;AACrC,cAAIL,KAAc,GAAG,KAArB;;AACA,cAAII,IAAI,IAAIf,UAAU,CAACiB,GAAX,CAAeC,WAA3B,EAAwC;AAAC;AACrC,gBAAIC,EAAE,GAAIH,QAAD,CAAuCI,IAAhD;;AACA,iBAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,EAAE,CAACG,MAA/B,EAAuCD,KAAK,EAA5C,EAAgD;AAC5C,kBAAME,OAAO,GAAGJ,EAAE,CAACE,KAAD,CAAlB;;AACA,kBAAIE,OAAO,CAACC,MAAR,IAAkB,CAAtB,EAAyB;AACrBb,gBAAAA,KAAK,GAAG,IAAR;AACA;AACH;AAEJ;;AACD,iBAAKT,QAAL,CAAcF,UAAU,CAACiB,GAAX,CAAeQ,gBAA7B,IAAiDd,KAAjD;AACH;;AACD,eAAKT,QAAL,CAAca,IAAd,IAAsBJ,KAAtB;AACA;AAAA;AAAA,oCAASe,IAAT,CAAc,WAAd,EAA2BX,IAA3B;AACH;;AACDY,QAAAA,WAAW,CAACpB,GAAD,EAAuB;AAC9B,iBAAO,KAAKL,QAAL,CAAcK,GAAd,CAAP;AACH;;AAvD2B,O;;AAAXP,MAAAA,U,CAGVK,S;AAHUL,MAAAA,U,CAIViB,G,GAAM;AACTC,QAAAA,WAAW,EAAE,aADJ;AAETO,QAAAA,gBAAgB,EAAE;AAFT,O","sourcesContent":["type redpoint = {\n    key: string,\n    rednode: Node,\n    childkey?: string[]\n}\nimport { _decorator, Component, Node } from 'cc';\nimport { network } from '../model/RequestData';\nimport { observer } from '../game/App';\nexport default class RedManager {\n\n\n    static _instance: RedManager;\n    static KEY = {\n        renwutabred: \"renwutabred\",\n        renwutabred_main: \"renwutabred_main\",\n    }\n    static get instance() {\n        if (this._instance) {\n            return this._instance;\n        }\n        this._instance = new RedManager();\n        return this._instance;\n    }\n    public keystate = {};\n    public redpoint: any = {};\n    registRedPoint(key: string, rednode: Node, childkey: string[] = null) {\n        this.redpoint[key] = rednode;\n    }\n    changeState(key: string, state: boolean) {\n        let node = this.redpoint[key];\n        if (node) {\n            node.active = state;\n        }\n        // if(this.redpoint[key].childkey){\n        //     for (let index = 0; index < this.redpoint[key].childkey.length; index++) {\n        //         const element = this.redpoint[key].childkey[index];\n        //         if(element == key){\n        //             node.active = state;\n        //             break;\n        //         }\n        //     }\n        // }\n\n    }\n    setkeyState(arg0: string, tasklist: any) {\n        let state: boolean = false;\n        if (arg0 == RedManager.KEY.renwutabred) {//任务列表数据刷新\n            let da = (tasklist as network.taskListResponse).data;\n            for (let index = 0; index < da.length; index++) {\n                const element = da[index];\n                if (element.status == 2) {\n                    state = true;\n                    break;\n                }\n\n            }\n            this.keystate[RedManager.KEY.renwutabred_main] = state;\n        }\n        this.keystate[arg0] = state;\n        observer.post(\"keychange\", arg0);\n    }\n    getKeyState(key: string): boolean {\n        return this.keystate[key];\n    }\n}"]}