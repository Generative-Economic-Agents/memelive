{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/apis/appmesh-2018-10-01.min.json"],"names":["version","metadata","apiVersion","endpointPrefix","jsonVersion","protocol","serviceFullName","serviceId","signatureVersion","signingName","uid","operations","CreateMesh","http","method","requestUri","responseCode","input","type","required","members","clientToken","idempotencyToken","meshName","output","mesh","shape","payload","idempotent","CreateRoute","location","locationName","routeName","spec","virtualRouterName","route","CreateVirtualNode","virtualNodeName","virtualNode","CreateVirtualRouter","virtualRouter","DeleteMesh","DeleteRoute","DeleteVirtualNode","DeleteVirtualRouter","DescribeMesh","DescribeRoute","DescribeVirtualNode","DescribeVirtualRouter","ListMeshes","limit","nextToken","meshes","member","arn","ListRoutes","routes","ListVirtualNodes","virtualNodes","ListVirtualRouters","virtualRouters","UpdateRoute","UpdateVirtualNode","UpdateVirtualRouter","shapes","S5","status","S6","createdAt","lastUpdatedAt","Sd","httpRoute","action","weightedTargets","weight","match","prefix","Sl","Sp","backends","listeners","healthCheck","healthyThreshold","intervalMillis","path","port","timeoutMillis","unhealthyThreshold","portMapping","serviceDiscovery","dns","serviceName","S14","S18","serviceNames","S1b"],"mappings":"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","sourcesContent":["export default {\n  version: '2.0',\n  metadata: {\n    apiVersion: '2018-10-01',\n    endpointPrefix: 'appmesh',\n    jsonVersion: '1.1',\n    protocol: 'rest-json',\n    serviceFullName: 'AWS App Mesh',\n    serviceId: 'App Mesh',\n    signatureVersion: 'v4',\n    signingName: 'appmesh',\n    uid: 'appmesh-2018-10-01'\n  },\n  operations: {\n    CreateMesh: {\n      http: {\n        method: 'PUT',\n        requestUri: '/meshes',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName'\n        ],\n        members: {\n          clientToken: {\n            idempotencyToken: true\n          },\n          meshName: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          mesh: {\n            shape: 'S5'\n          }\n        },\n        payload: 'mesh'\n      },\n      idempotent: true\n    },\n    CreateRoute: {\n      http: {\n        method: 'PUT',\n        requestUri: '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName',\n          'routeName',\n          'spec',\n          'virtualRouterName'\n        ],\n        members: {\n          clientToken: {\n            idempotencyToken: true\n          },\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          },\n          routeName: {},\n          spec: {\n            shape: 'Sd'\n          },\n          virtualRouterName: {\n            location: 'uri',\n            locationName: 'virtualRouterName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          route: {\n            shape: 'Sl'\n          }\n        },\n        payload: 'route'\n      },\n      idempotent: true\n    },\n    CreateVirtualNode: {\n      http: {\n        method: 'PUT',\n        requestUri: '/meshes/{meshName}/virtualNodes',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName',\n          'spec',\n          'virtualNodeName'\n        ],\n        members: {\n          clientToken: {\n            idempotencyToken: true\n          },\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          },\n          spec: {\n            shape: 'Sp'\n          },\n          virtualNodeName: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          virtualNode: {\n            shape: 'S14'\n          }\n        },\n        payload: 'virtualNode'\n      },\n      idempotent: true\n    },\n    CreateVirtualRouter: {\n      http: {\n        method: 'PUT',\n        requestUri: '/meshes/{meshName}/virtualRouters',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName',\n          'spec',\n          'virtualRouterName'\n        ],\n        members: {\n          clientToken: {\n            idempotencyToken: true\n          },\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          },\n          spec: {\n            shape: 'S18'\n          },\n          virtualRouterName: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          virtualRouter: {\n            shape: 'S1b'\n          }\n        },\n        payload: 'virtualRouter'\n      },\n      idempotent: true\n    },\n    DeleteMesh: {\n      http: {\n        method: 'DELETE',\n        requestUri: '/meshes/{meshName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName'\n        ],\n        members: {\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          mesh: {\n            shape: 'S5'\n          }\n        },\n        payload: 'mesh'\n      },\n      idempotent: true\n    },\n    DeleteRoute: {\n      http: {\n        method: 'DELETE',\n        requestUri: '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName',\n          'routeName',\n          'virtualRouterName'\n        ],\n        members: {\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          },\n          routeName: {\n            location: 'uri',\n            locationName: 'routeName'\n          },\n          virtualRouterName: {\n            location: 'uri',\n            locationName: 'virtualRouterName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          route: {\n            shape: 'Sl'\n          }\n        },\n        payload: 'route'\n      },\n      idempotent: true\n    },\n    DeleteVirtualNode: {\n      http: {\n        method: 'DELETE',\n        requestUri: '/meshes/{meshName}/virtualNodes/{virtualNodeName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName',\n          'virtualNodeName'\n        ],\n        members: {\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          },\n          virtualNodeName: {\n            location: 'uri',\n            locationName: 'virtualNodeName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          virtualNode: {\n            shape: 'S14'\n          }\n        },\n        payload: 'virtualNode'\n      },\n      idempotent: true\n    },\n    DeleteVirtualRouter: {\n      http: {\n        method: 'DELETE',\n        requestUri: '/meshes/{meshName}/virtualRouters/{virtualRouterName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName',\n          'virtualRouterName'\n        ],\n        members: {\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          },\n          virtualRouterName: {\n            location: 'uri',\n            locationName: 'virtualRouterName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          virtualRouter: {\n            shape: 'S1b'\n          }\n        },\n        payload: 'virtualRouter'\n      },\n      idempotent: true\n    },\n    DescribeMesh: {\n      http: {\n        method: 'GET',\n        requestUri: '/meshes/{meshName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName'\n        ],\n        members: {\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          mesh: {\n            shape: 'S5'\n          }\n        },\n        payload: 'mesh'\n      }\n    },\n    DescribeRoute: {\n      http: {\n        method: 'GET',\n        requestUri: '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName',\n          'routeName',\n          'virtualRouterName'\n        ],\n        members: {\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          },\n          routeName: {\n            location: 'uri',\n            locationName: 'routeName'\n          },\n          virtualRouterName: {\n            location: 'uri',\n            locationName: 'virtualRouterName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          route: {\n            shape: 'Sl'\n          }\n        },\n        payload: 'route'\n      }\n    },\n    DescribeVirtualNode: {\n      http: {\n        method: 'GET',\n        requestUri: '/meshes/{meshName}/virtualNodes/{virtualNodeName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName',\n          'virtualNodeName'\n        ],\n        members: {\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          },\n          virtualNodeName: {\n            location: 'uri',\n            locationName: 'virtualNodeName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          virtualNode: {\n            shape: 'S14'\n          }\n        },\n        payload: 'virtualNode'\n      }\n    },\n    DescribeVirtualRouter: {\n      http: {\n        method: 'GET',\n        requestUri: '/meshes/{meshName}/virtualRouters/{virtualRouterName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName',\n          'virtualRouterName'\n        ],\n        members: {\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          },\n          virtualRouterName: {\n            location: 'uri',\n            locationName: 'virtualRouterName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          virtualRouter: {\n            shape: 'S1b'\n          }\n        },\n        payload: 'virtualRouter'\n      }\n    },\n    ListMeshes: {\n      http: {\n        method: 'GET',\n        requestUri: '/meshes',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        members: {\n          limit: {\n            location: 'querystring',\n            locationName: 'limit',\n            type: 'integer'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'meshes'\n        ],\n        members: {\n          meshes: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              members: {\n                arn: {},\n                meshName: {}\n              }\n            }\n          },\n          nextToken: {}\n        }\n      }\n    },\n    ListRoutes: {\n      http: {\n        method: 'GET',\n        requestUri: '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName',\n          'virtualRouterName'\n        ],\n        members: {\n          limit: {\n            location: 'querystring',\n            locationName: 'limit',\n            type: 'integer'\n          },\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          },\n          virtualRouterName: {\n            location: 'uri',\n            locationName: 'virtualRouterName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'routes'\n        ],\n        members: {\n          nextToken: {},\n          routes: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              members: {\n                arn: {},\n                meshName: {},\n                routeName: {},\n                virtualRouterName: {}\n              }\n            }\n          }\n        }\n      }\n    },\n    ListVirtualNodes: {\n      http: {\n        method: 'GET',\n        requestUri: '/meshes/{meshName}/virtualNodes',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName'\n        ],\n        members: {\n          limit: {\n            location: 'querystring',\n            locationName: 'limit',\n            type: 'integer'\n          },\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'virtualNodes'\n        ],\n        members: {\n          nextToken: {},\n          virtualNodes: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              members: {\n                arn: {},\n                meshName: {},\n                virtualNodeName: {}\n              }\n            }\n          }\n        }\n      }\n    },\n    ListVirtualRouters: {\n      http: {\n        method: 'GET',\n        requestUri: '/meshes/{meshName}/virtualRouters',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName'\n        ],\n        members: {\n          limit: {\n            location: 'querystring',\n            locationName: 'limit',\n            type: 'integer'\n          },\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'virtualRouters'\n        ],\n        members: {\n          nextToken: {},\n          virtualRouters: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              members: {\n                arn: {},\n                meshName: {},\n                virtualRouterName: {}\n              }\n            }\n          }\n        }\n      }\n    },\n    UpdateRoute: {\n      http: {\n        method: 'PUT',\n        requestUri: '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName',\n          'routeName',\n          'spec',\n          'virtualRouterName'\n        ],\n        members: {\n          clientToken: {\n            idempotencyToken: true\n          },\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          },\n          routeName: {\n            location: 'uri',\n            locationName: 'routeName'\n          },\n          spec: {\n            shape: 'Sd'\n          },\n          virtualRouterName: {\n            location: 'uri',\n            locationName: 'virtualRouterName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          route: {\n            shape: 'Sl'\n          }\n        },\n        payload: 'route'\n      },\n      idempotent: true\n    },\n    UpdateVirtualNode: {\n      http: {\n        method: 'PUT',\n        requestUri: '/meshes/{meshName}/virtualNodes/{virtualNodeName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName',\n          'spec',\n          'virtualNodeName'\n        ],\n        members: {\n          clientToken: {\n            idempotencyToken: true\n          },\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          },\n          spec: {\n            shape: 'Sp'\n          },\n          virtualNodeName: {\n            location: 'uri',\n            locationName: 'virtualNodeName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          virtualNode: {\n            shape: 'S14'\n          }\n        },\n        payload: 'virtualNode'\n      },\n      idempotent: true\n    },\n    UpdateVirtualRouter: {\n      http: {\n        method: 'PUT',\n        requestUri: '/meshes/{meshName}/virtualRouters/{virtualRouterName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'meshName',\n          'spec',\n          'virtualRouterName'\n        ],\n        members: {\n          clientToken: {\n            idempotencyToken: true\n          },\n          meshName: {\n            location: 'uri',\n            locationName: 'meshName'\n          },\n          spec: {\n            shape: 'S18'\n          },\n          virtualRouterName: {\n            location: 'uri',\n            locationName: 'virtualRouterName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          virtualRouter: {\n            shape: 'S1b'\n          }\n        },\n        payload: 'virtualRouter'\n      },\n      idempotent: true\n    }\n  },\n  shapes: {\n    S5: {\n      type: 'structure',\n      required: [\n        'meshName',\n        'metadata'\n      ],\n      members: {\n        meshName: {},\n        metadata: {\n          shape: 'S6'\n        },\n        status: {\n          type: 'structure',\n          members: {\n            status: {}\n          }\n        }\n      }\n    },\n    S6: {\n      type: 'structure',\n      members: {\n        arn: {},\n        createdAt: {\n          type: 'timestamp'\n        },\n        lastUpdatedAt: {\n          type: 'timestamp'\n        },\n        uid: {},\n        version: {\n          type: 'long'\n        }\n      }\n    },\n    Sd: {\n      type: 'structure',\n      members: {\n        httpRoute: {\n          type: 'structure',\n          members: {\n            action: {\n              type: 'structure',\n              members: {\n                weightedTargets: {\n                  type: 'list',\n                  member: {\n                    type: 'structure',\n                    members: {\n                      virtualNode: {},\n                      weight: {\n                        type: 'integer'\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            match: {\n              type: 'structure',\n              members: {\n                prefix: {}\n              }\n            }\n          }\n        }\n      }\n    },\n    Sl: {\n      type: 'structure',\n      required: [\n        'meshName',\n        'routeName',\n        'virtualRouterName'\n      ],\n      members: {\n        meshName: {},\n        metadata: {\n          shape: 'S6'\n        },\n        routeName: {},\n        spec: {\n          shape: 'Sd'\n        },\n        status: {\n          type: 'structure',\n          members: {\n            status: {}\n          }\n        },\n        virtualRouterName: {}\n      }\n    },\n    Sp: {\n      type: 'structure',\n      members: {\n        backends: {\n          type: 'list',\n          member: {}\n        },\n        listeners: {\n          type: 'list',\n          member: {\n            type: 'structure',\n            members: {\n              healthCheck: {\n                type: 'structure',\n                required: [\n                  'healthyThreshold',\n                  'intervalMillis',\n                  'protocol',\n                  'timeoutMillis',\n                  'unhealthyThreshold'\n                ],\n                members: {\n                  healthyThreshold: {\n                    type: 'integer'\n                  },\n                  intervalMillis: {\n                    type: 'long'\n                  },\n                  path: {},\n                  port: {\n                    type: 'integer'\n                  },\n                  protocol: {},\n                  timeoutMillis: {\n                    type: 'long'\n                  },\n                  unhealthyThreshold: {\n                    type: 'integer'\n                  }\n                }\n              },\n              portMapping: {\n                type: 'structure',\n                members: {\n                  port: {\n                    type: 'integer'\n                  },\n                  protocol: {}\n                }\n              }\n            }\n          }\n        },\n        serviceDiscovery: {\n          type: 'structure',\n          members: {\n            dns: {\n              type: 'structure',\n              members: {\n                serviceName: {}\n              }\n            }\n          }\n        }\n      }\n    },\n    S14: {\n      type: 'structure',\n      required: [\n        'meshName',\n        'virtualNodeName'\n      ],\n      members: {\n        meshName: {},\n        metadata: {\n          shape: 'S6'\n        },\n        spec: {\n          shape: 'Sp'\n        },\n        status: {\n          type: 'structure',\n          members: {\n            status: {}\n          }\n        },\n        virtualNodeName: {}\n      }\n    },\n    S18: {\n      type: 'structure',\n      members: {\n        serviceNames: {\n          type: 'list',\n          member: {}\n        }\n      }\n    },\n    S1b: {\n      type: 'structure',\n      required: [\n        'meshName',\n        'virtualRouterName'\n      ],\n      members: {\n        meshName: {},\n        metadata: {\n          shape: 'S6'\n        },\n        spec: {\n          shape: 'S18'\n        },\n        status: {\n          type: 'structure',\n          members: {\n            status: {}\n          }\n        },\n        virtualRouterName: {}\n      }\n    }\n  }\n}"]}