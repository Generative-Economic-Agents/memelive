{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/sshpk/lib/formats/x509.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","_req4","_req5","_req6","_req7","_req8","_req9","_req10","url","define","exports","require","module","__filename","__dirname","read","verify","sign","signAsync","write","assert","asn1","Buffer","algs","utils","Key","PrivateKey","pem","Identity","Signature","Certificate","pkcs8","readMPInt","der","nm","strictEqual","peek","Ber","Integer","mpNormalize","readString","cert","key","sig","signatures","x509","object","algParts","algo","split","type","blob","cache","undefined","BerWriter","writeTBSCert","buffer","verifier","createVerify","signature","Local","i","Context","Constructor","SIGN_ALGS","Object","keys","forEach","k","EXTS","buf","options","from","BerReader","readSequence","Math","abs","length","remain","Error","tbsStart","offset","sigOffset","tbsEnd","version","readInt","ok","extras","serial","after","certAlgOid","readOID","certAlg","_offset","issuer","parseAsn1","validFrom","readDate","validUntil","subjects","subjectKey","readPkcs8","issuerUniqueID","slice","subjectUniqueID","extEnd","readExtension","sigAlgOid","sigAlg","sigData","BitString","parse","hashAlgorithm","UTCTime","utcTimeToDate","GeneralizedTime","gTimeToDate","writeDate","date","getUTCFullYear","writeString","dateToGTime","dateToUTCTime","ALTNAME","OtherName","RFC822Name","DNSName","X400Address","DirectoryName","EDIPartyName","URI","IPAddress","OID","EXTPURPOSE","EXTPURPOSE_REV","KEYUSEBITS","extId","id","exts","critical","Boolean","readBoolean","basicConstraints","OctetString","bcEnd","ca","purposes","push","bc","oid","pathLen","extKeyUsage","ekEnd","indexOf","ide","hostname","uid","email","components","value","keyUsage","bits","setBits","readBitField","bit","altName","aeEnd","forEmail","equals","host","forHost","data","UTCTIME_RE","t","m","match","d","Date","thisYear","century","floor","year","parseInt","setUTCFullYear","setUTCHours","setUTCSeconds","GTIME_RE","zeroPad","n","s","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","defaultHashAlgorithm","signer","createSign","done","err","startSequence","_ensure","copy","_buf","writeOID","writeNull","endSequence","toBuffer","alloc","writeBuffer","writeInt","toAsn1","subject","altNames","writePkcs8","writeBoolean","j","purpose","writeBitField","bitIndex","bitLen","byteN","mask","bitVal","name","blen","ceil","unused","_cjsExports","_read","_verify","_sign","_signAsync","_write"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'assert-plus';\nimport { __cjsMetaURL as _req0} from 'asn1';\nimport { __cjsMetaURL as _req1} from 'safer-buffer';\nimport { __cjsMetaURL as _req2} from '../algs';\nimport { __cjsMetaURL as _req3} from '../utils';\nimport { __cjsMetaURL as _req4} from '../key';\nimport { __cjsMetaURL as _req5} from '../private-key';\nimport { __cjsMetaURL as _req6} from './pem';\nimport { __cjsMetaURL as _req7} from '../identity';\nimport { __cjsMetaURL as _req8} from '../signature';\nimport { __cjsMetaURL as _req9} from '../certificate';\nimport { __cjsMetaURL as _req10} from './pkcs8';\nlet _cjsExports;\nlet _read;\nlet _verify;\nlet _sign;\nlet _signAsync;\nlet _write;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n // Copyright 2017 Joyent, Inc.\n\n module.exports = {\n \tread: read,\n \tverify: verify,\n \tsign: sign,\n \tsignAsync: signAsync,\n \twrite: write\n };\n\n var assert = require('assert-plus');\n var asn1 = require('asn1');\n var Buffer = require('safer-buffer').Buffer;\n var algs = require('../algs');\n var utils = require('../utils');\n var Key = require('../key');\n var PrivateKey = require('../private-key');\n var pem = require('./pem');\n var Identity = require('../identity');\n var Signature = require('../signature');\n var Certificate = require('../certificate');\n var pkcs8 = require('./pkcs8');\n\n /*\n  * This file is based on RFC5280 (X.509).\n  */\n\n /* Helper to read in a single mpint */\n function readMPInt(der, nm) {\n \tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n \t    nm + ' is not an Integer');\n \treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n }\n\n function verify(cert, key) {\n \tvar sig = cert.signatures.x509;\n \tassert.object(sig, 'x509 signature');\n\n \tvar algParts = sig.algo.split('-');\n \tif (algParts[0] !== key.type)\n \t\treturn (false);\n\n \tvar blob = sig.cache;\n \tif (blob === undefined) {\n \t\tvar der = new asn1.BerWriter();\n \t\twriteTBSCert(cert, der);\n \t\tblob = der.buffer;\n \t}\n\n \tvar verifier = key.createVerify(algParts[1]);\n \tverifier.write(blob);\n \treturn (verifier.verify(sig.signature));\n }\n\n function Local(i) {\n \treturn (asn1.Ber.Context | asn1.Ber.Constructor | i);\n }\n\n function Context(i) {\n \treturn (asn1.Ber.Context | i);\n }\n\n var SIGN_ALGS = {\n \t'rsa-md5': '1.2.840.113549.1.1.4',\n \t'rsa-sha1': '1.2.840.113549.1.1.5',\n \t'rsa-sha256': '1.2.840.113549.1.1.11',\n \t'rsa-sha384': '1.2.840.113549.1.1.12',\n \t'rsa-sha512': '1.2.840.113549.1.1.13',\n \t'dsa-sha1': '1.2.840.10040.4.3',\n \t'dsa-sha256': '2.16.840.1.101.3.4.3.2',\n \t'ecdsa-sha1': '1.2.840.10045.4.1',\n \t'ecdsa-sha256': '1.2.840.10045.4.3.2',\n \t'ecdsa-sha384': '1.2.840.10045.4.3.3',\n \t'ecdsa-sha512': '1.2.840.10045.4.3.4',\n \t'ed25519-sha512': '1.3.101.112'\n };\n Object.keys(SIGN_ALGS).forEach(function (k) {\n \tSIGN_ALGS[SIGN_ALGS[k]] = k;\n });\n SIGN_ALGS['1.3.14.3.2.3'] = 'rsa-md5';\n SIGN_ALGS['1.3.14.3.2.29'] = 'rsa-sha1';\n\n var EXTS = {\n \t'issuerKeyId': '2.5.29.35',\n \t'altName': '2.5.29.17',\n \t'basicConstraints': '2.5.29.19',\n \t'keyUsage': '2.5.29.15',\n \t'extKeyUsage': '2.5.29.37'\n };\n\n function read(buf, options) {\n \tif (typeof (buf) === 'string') {\n \t\tbuf = Buffer.from(buf, 'binary');\n \t}\n \tassert.buffer(buf, 'buf');\n\n \tvar der = new asn1.BerReader(buf);\n\n \tder.readSequence();\n \tif (Math.abs(der.length - der.remain) > 1) {\n \t\tthrow (new Error('DER sequence does not contain whole byte ' +\n \t\t    'stream'));\n \t}\n\n \tvar tbsStart = der.offset;\n \tder.readSequence();\n \tvar sigOffset = der.offset + der.length;\n \tvar tbsEnd = sigOffset;\n\n \tif (der.peek() === Local(0)) {\n \t\tder.readSequence(Local(0));\n \t\tvar version = der.readInt();\n \t\tassert.ok(version <= 3,\n \t\t    'only x.509 versions up to v3 supported');\n \t}\n\n \tvar cert = {};\n \tcert.signatures = {};\n \tvar sig = (cert.signatures.x509 = {});\n \tsig.extras = {};\n\n \tcert.serial = readMPInt(der, 'serial');\n\n \tder.readSequence();\n \tvar after = der.offset + der.length;\n \tvar certAlgOid = der.readOID();\n \tvar certAlg = SIGN_ALGS[certAlgOid];\n \tif (certAlg === undefined)\n \t\tthrow (new Error('unknown signature algorithm ' + certAlgOid));\n\n \tder._offset = after;\n \tcert.issuer = Identity.parseAsn1(der);\n\n \tder.readSequence();\n \tcert.validFrom = readDate(der);\n \tcert.validUntil = readDate(der);\n\n \tcert.subjects = [Identity.parseAsn1(der)];\n\n \tder.readSequence();\n \tafter = der.offset + der.length;\n \tcert.subjectKey = pkcs8.readPkcs8(undefined, 'public', der);\n \tder._offset = after;\n\n \t/* issuerUniqueID */\n \tif (der.peek() === Local(1)) {\n \t\tder.readSequence(Local(1));\n \t\tsig.extras.issuerUniqueID =\n \t\t    buf.slice(der.offset, der.offset + der.length);\n \t\tder._offset += der.length;\n \t}\n\n \t/* subjectUniqueID */\n \tif (der.peek() === Local(2)) {\n \t\tder.readSequence(Local(2));\n \t\tsig.extras.subjectUniqueID =\n \t\t    buf.slice(der.offset, der.offset + der.length);\n \t\tder._offset += der.length;\n \t}\n\n \t/* extensions */\n \tif (der.peek() === Local(3)) {\n \t\tder.readSequence(Local(3));\n \t\tvar extEnd = der.offset + der.length;\n \t\tder.readSequence();\n\n \t\twhile (der.offset < extEnd)\n \t\t\treadExtension(cert, buf, der);\n\n \t\tassert.strictEqual(der.offset, extEnd);\n \t}\n\n \tassert.strictEqual(der.offset, sigOffset);\n\n \tder.readSequence();\n \tafter = der.offset + der.length;\n \tvar sigAlgOid = der.readOID();\n \tvar sigAlg = SIGN_ALGS[sigAlgOid];\n \tif (sigAlg === undefined)\n \t\tthrow (new Error('unknown signature algorithm ' + sigAlgOid));\n \tder._offset = after;\n\n \tvar sigData = der.readString(asn1.Ber.BitString, true);\n \tif (sigData[0] === 0)\n \t\tsigData = sigData.slice(1);\n \tvar algParts = sigAlg.split('-');\n\n \tsig.signature = Signature.parse(sigData, algParts[0], 'asn1');\n \tsig.signature.hashAlgorithm = algParts[1];\n \tsig.algo = sigAlg;\n \tsig.cache = buf.slice(tbsStart, tbsEnd);\n\n \treturn (new Certificate(cert));\n }\n\n function readDate(der) {\n \tif (der.peek() === asn1.Ber.UTCTime) {\n \t\treturn (utcTimeToDate(der.readString(asn1.Ber.UTCTime)));\n \t} else if (der.peek() === asn1.Ber.GeneralizedTime) {\n \t\treturn (gTimeToDate(der.readString(asn1.Ber.GeneralizedTime)));\n \t} else {\n \t\tthrow (new Error('Unsupported date format'));\n \t}\n }\n\n function writeDate(der, date) {\n \tif (date.getUTCFullYear() >= 2050 || date.getUTCFullYear() < 1950) {\n \t\tder.writeString(dateToGTime(date), asn1.Ber.GeneralizedTime);\n \t} else {\n \t\tder.writeString(dateToUTCTime(date), asn1.Ber.UTCTime);\n \t}\n }\n\n /* RFC5280, section 4.2.1.6 (GeneralName type) */\n var ALTNAME = {\n \tOtherName: Local(0),\n \tRFC822Name: Context(1),\n \tDNSName: Context(2),\n \tX400Address: Local(3),\n \tDirectoryName: Local(4),\n \tEDIPartyName: Local(5),\n \tURI: Context(6),\n \tIPAddress: Context(7),\n \tOID: Context(8)\n };\n\n /* RFC5280, section 4.2.1.12 (KeyPurposeId) */\n var EXTPURPOSE = {\n \t'serverAuth': '1.3.6.1.5.5.7.3.1',\n \t'clientAuth': '1.3.6.1.5.5.7.3.2',\n \t'codeSigning': '1.3.6.1.5.5.7.3.3',\n\n \t/* See https://github.com/joyent/oid-docs/blob/master/root.md */\n \t'joyentDocker': '1.3.6.1.4.1.38678.1.4.1',\n \t'joyentCmon': '1.3.6.1.4.1.38678.1.4.2'\n };\n var EXTPURPOSE_REV = {};\n Object.keys(EXTPURPOSE).forEach(function (k) {\n \tEXTPURPOSE_REV[EXTPURPOSE[k]] = k;\n });\n\n var KEYUSEBITS = [\n \t'signature', 'identity', 'keyEncryption',\n \t'encryption', 'keyAgreement', 'ca', 'crl'\n ];\n\n function readExtension(cert, buf, der) {\n \tder.readSequence();\n \tvar after = der.offset + der.length;\n \tvar extId = der.readOID();\n \tvar id;\n \tvar sig = cert.signatures.x509;\n \tif (!sig.extras.exts)\n \t\tsig.extras.exts = [];\n\n \tvar critical;\n \tif (der.peek() === asn1.Ber.Boolean)\n \t\tcritical = der.readBoolean();\n\n \tswitch (extId) {\n \tcase (EXTS.basicConstraints):\n \t\tder.readSequence(asn1.Ber.OctetString);\n \t\tder.readSequence();\n \t\tvar bcEnd = der.offset + der.length;\n \t\tvar ca = false;\n \t\tif (der.peek() === asn1.Ber.Boolean)\n \t\t\tca = der.readBoolean();\n \t\tif (cert.purposes === undefined)\n \t\t\tcert.purposes = [];\n \t\tif (ca === true)\n \t\t\tcert.purposes.push('ca');\n \t\tvar bc = { oid: extId, critical: critical };\n \t\tif (der.offset < bcEnd && der.peek() === asn1.Ber.Integer)\n \t\t\tbc.pathLen = der.readInt();\n \t\tsig.extras.exts.push(bc);\n \t\tbreak;\n \tcase (EXTS.extKeyUsage):\n \t\tder.readSequence(asn1.Ber.OctetString);\n \t\tder.readSequence();\n \t\tif (cert.purposes === undefined)\n \t\t\tcert.purposes = [];\n \t\tvar ekEnd = der.offset + der.length;\n \t\twhile (der.offset < ekEnd) {\n \t\t\tvar oid = der.readOID();\n \t\t\tcert.purposes.push(EXTPURPOSE_REV[oid] || oid);\n \t\t}\n \t\t/*\n \t\t * This is a bit of a hack: in the case where we have a cert\n \t\t * that's only allowed to do serverAuth or clientAuth (and not\n \t\t * the other), we want to make sure all our Subjects are of\n \t\t * the right type. But we already parsed our Subjects and\n \t\t * decided if they were hosts or users earlier (since it appears\n \t\t * first in the cert).\n \t\t *\n \t\t * So we go through and mutate them into the right kind here if\n \t\t * it doesn't match. This might not be hugely beneficial, as it\n \t\t * seems that single-purpose certs are not often seen in the\n \t\t * wild.\n \t\t */\n \t\tif (cert.purposes.indexOf('serverAuth') !== -1 &&\n \t\t    cert.purposes.indexOf('clientAuth') === -1) {\n \t\t\tcert.subjects.forEach(function (ide) {\n \t\t\t\tif (ide.type !== 'host') {\n \t\t\t\t\tide.type = 'host';\n \t\t\t\t\tide.hostname = ide.uid ||\n \t\t\t\t\t    ide.email ||\n \t\t\t\t\t    ide.components[0].value;\n \t\t\t\t}\n \t\t\t});\n \t\t} else if (cert.purposes.indexOf('clientAuth') !== -1 &&\n \t\t    cert.purposes.indexOf('serverAuth') === -1) {\n \t\t\tcert.subjects.forEach(function (ide) {\n \t\t\t\tif (ide.type !== 'user') {\n \t\t\t\t\tide.type = 'user';\n \t\t\t\t\tide.uid = ide.hostname ||\n \t\t\t\t\t    ide.email ||\n \t\t\t\t\t    ide.components[0].value;\n \t\t\t\t}\n \t\t\t});\n \t\t}\n \t\tsig.extras.exts.push({ oid: extId, critical: critical });\n \t\tbreak;\n \tcase (EXTS.keyUsage):\n \t\tder.readSequence(asn1.Ber.OctetString);\n \t\tvar bits = der.readString(asn1.Ber.BitString, true);\n \t\tvar setBits = readBitField(bits, KEYUSEBITS);\n \t\tsetBits.forEach(function (bit) {\n \t\t\tif (cert.purposes === undefined)\n \t\t\t\tcert.purposes = [];\n \t\t\tif (cert.purposes.indexOf(bit) === -1)\n \t\t\t\tcert.purposes.push(bit);\n \t\t});\n \t\tsig.extras.exts.push({ oid: extId, critical: critical,\n \t\t    bits: bits });\n \t\tbreak;\n \tcase (EXTS.altName):\n \t\tder.readSequence(asn1.Ber.OctetString);\n \t\tder.readSequence();\n \t\tvar aeEnd = der.offset + der.length;\n \t\twhile (der.offset < aeEnd) {\n \t\t\tswitch (der.peek()) {\n \t\t\tcase ALTNAME.OtherName:\n \t\t\tcase ALTNAME.EDIPartyName:\n \t\t\t\tder.readSequence();\n \t\t\t\tder._offset += der.length;\n \t\t\t\tbreak;\n \t\t\tcase ALTNAME.OID:\n \t\t\t\tder.readOID(ALTNAME.OID);\n \t\t\t\tbreak;\n \t\t\tcase ALTNAME.RFC822Name:\n \t\t\t\t/* RFC822 specifies email addresses */\n \t\t\t\tvar email = der.readString(ALTNAME.RFC822Name);\n \t\t\t\tid = Identity.forEmail(email);\n \t\t\t\tif (!cert.subjects[0].equals(id))\n \t\t\t\t\tcert.subjects.push(id);\n \t\t\t\tbreak;\n \t\t\tcase ALTNAME.DirectoryName:\n \t\t\t\tder.readSequence(ALTNAME.DirectoryName);\n \t\t\t\tid = Identity.parseAsn1(der);\n \t\t\t\tif (!cert.subjects[0].equals(id))\n \t\t\t\t\tcert.subjects.push(id);\n \t\t\t\tbreak;\n \t\t\tcase ALTNAME.DNSName:\n \t\t\t\tvar host = der.readString(\n \t\t\t\t    ALTNAME.DNSName);\n \t\t\t\tid = Identity.forHost(host);\n \t\t\t\tif (!cert.subjects[0].equals(id))\n \t\t\t\t\tcert.subjects.push(id);\n \t\t\t\tbreak;\n \t\t\tdefault:\n \t\t\t\tder.readString(der.peek());\n \t\t\t\tbreak;\n \t\t\t}\n \t\t}\n \t\tsig.extras.exts.push({ oid: extId, critical: critical });\n \t\tbreak;\n \tdefault:\n \t\tsig.extras.exts.push({\n \t\t\toid: extId,\n \t\t\tcritical: critical,\n \t\t\tdata: der.readString(asn1.Ber.OctetString, true)\n \t\t});\n \t\tbreak;\n \t}\n\n \tder._offset = after;\n }\n\n var UTCTIME_RE =\n     /^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\n function utcTimeToDate(t) {\n \tvar m = t.match(UTCTIME_RE);\n \tassert.ok(m, 'timestamps must be in UTC');\n \tvar d = new Date();\n\n \tvar thisYear = d.getUTCFullYear();\n \tvar century = Math.floor(thisYear / 100) * 100;\n\n \tvar year = parseInt(m[1], 10);\n \tif (thisYear % 100 < 50 && year >= 60)\n \t\tyear += (century - 1);\n \telse\n \t\tyear += century;\n \td.setUTCFullYear(year, parseInt(m[2], 10) - 1, parseInt(m[3], 10));\n \td.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n \tif (m[6] && m[6].length > 0)\n \t\td.setUTCSeconds(parseInt(m[6], 10));\n \treturn (d);\n }\n\n var GTIME_RE =\n     /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\n function gTimeToDate(t) {\n \tvar m = t.match(GTIME_RE);\n \tassert.ok(m);\n \tvar d = new Date();\n\n \td.setUTCFullYear(parseInt(m[1], 10), parseInt(m[2], 10) - 1,\n \t    parseInt(m[3], 10));\n \td.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n \tif (m[6] && m[6].length > 0)\n \t\td.setUTCSeconds(parseInt(m[6], 10));\n \treturn (d);\n }\n\n function zeroPad(n, m) {\n \tif (m === undefined)\n \t\tm = 2;\n \tvar s = '' + n;\n \twhile (s.length < m)\n \t\ts = '0' + s;\n \treturn (s);\n }\n\n function dateToUTCTime(d) {\n \tvar s = '';\n \ts += zeroPad(d.getUTCFullYear() % 100);\n \ts += zeroPad(d.getUTCMonth() + 1);\n \ts += zeroPad(d.getUTCDate());\n \ts += zeroPad(d.getUTCHours());\n \ts += zeroPad(d.getUTCMinutes());\n \ts += zeroPad(d.getUTCSeconds());\n \ts += 'Z';\n \treturn (s);\n }\n\n function dateToGTime(d) {\n \tvar s = '';\n \ts += zeroPad(d.getUTCFullYear(), 4);\n \ts += zeroPad(d.getUTCMonth() + 1);\n \ts += zeroPad(d.getUTCDate());\n \ts += zeroPad(d.getUTCHours());\n \ts += zeroPad(d.getUTCMinutes());\n \ts += zeroPad(d.getUTCSeconds());\n \ts += 'Z';\n \treturn (s);\n }\n\n function sign(cert, key) {\n \tif (cert.signatures.x509 === undefined)\n \t\tcert.signatures.x509 = {};\n \tvar sig = cert.signatures.x509;\n\n \tsig.algo = key.type + '-' + key.defaultHashAlgorithm();\n \tif (SIGN_ALGS[sig.algo] === undefined)\n \t\treturn (false);\n\n \tvar der = new asn1.BerWriter();\n \twriteTBSCert(cert, der);\n \tvar blob = der.buffer;\n \tsig.cache = blob;\n\n \tvar signer = key.createSign();\n \tsigner.write(blob);\n \tcert.signatures.x509.signature = signer.sign();\n\n \treturn (true);\n }\n\n function signAsync(cert, signer, done) {\n \tif (cert.signatures.x509 === undefined)\n \t\tcert.signatures.x509 = {};\n \tvar sig = cert.signatures.x509;\n\n \tvar der = new asn1.BerWriter();\n \twriteTBSCert(cert, der);\n \tvar blob = der.buffer;\n \tsig.cache = blob;\n\n \tsigner(blob, function (err, signature) {\n \t\tif (err) {\n \t\t\tdone(err);\n \t\t\treturn;\n \t\t}\n \t\tsig.algo = signature.type + '-' + signature.hashAlgorithm;\n \t\tif (SIGN_ALGS[sig.algo] === undefined) {\n \t\t\tdone(new Error('Invalid signing algorithm \"' +\n \t\t\t    sig.algo + '\"'));\n \t\t\treturn;\n \t\t}\n \t\tsig.signature = signature;\n \t\tdone();\n \t});\n }\n\n function write(cert, options) {\n \tvar sig = cert.signatures.x509;\n \tassert.object(sig, 'x509 signature');\n\n \tvar der = new asn1.BerWriter();\n \tder.startSequence();\n \tif (sig.cache) {\n \t\tder._ensure(sig.cache.length);\n \t\tsig.cache.copy(der._buf, der._offset);\n \t\tder._offset += sig.cache.length;\n \t} else {\n \t\twriteTBSCert(cert, der);\n \t}\n\n \tder.startSequence();\n \tder.writeOID(SIGN_ALGS[sig.algo]);\n \tif (sig.algo.match(/^rsa-/))\n \t\tder.writeNull();\n \tder.endSequence();\n\n \tvar sigData = sig.signature.toBuffer('asn1');\n \tvar data = Buffer.alloc(sigData.length + 1);\n \tdata[0] = 0;\n \tsigData.copy(data, 1);\n \tder.writeBuffer(data, asn1.Ber.BitString);\n \tder.endSequence();\n\n \treturn (der.buffer);\n }\n\n function writeTBSCert(cert, der) {\n \tvar sig = cert.signatures.x509;\n \tassert.object(sig, 'x509 signature');\n\n \tder.startSequence();\n\n \tder.startSequence(Local(0));\n \tder.writeInt(2);\n \tder.endSequence();\n\n \tder.writeBuffer(utils.mpNormalize(cert.serial), asn1.Ber.Integer);\n\n \tder.startSequence();\n \tder.writeOID(SIGN_ALGS[sig.algo]);\n \tif (sig.algo.match(/^rsa-/))\n \t\tder.writeNull();\n \tder.endSequence();\n\n \tcert.issuer.toAsn1(der);\n\n \tder.startSequence();\n \twriteDate(der, cert.validFrom);\n \twriteDate(der, cert.validUntil);\n \tder.endSequence();\n\n \tvar subject = cert.subjects[0];\n \tvar altNames = cert.subjects.slice(1);\n \tsubject.toAsn1(der);\n\n \tpkcs8.writePkcs8(der, cert.subjectKey);\n\n \tif (sig.extras && sig.extras.issuerUniqueID) {\n \t\tder.writeBuffer(sig.extras.issuerUniqueID, Local(1));\n \t}\n\n \tif (sig.extras && sig.extras.subjectUniqueID) {\n \t\tder.writeBuffer(sig.extras.subjectUniqueID, Local(2));\n \t}\n\n \tif (altNames.length > 0 || subject.type === 'host' ||\n \t    (cert.purposes !== undefined && cert.purposes.length > 0) ||\n \t    (sig.extras && sig.extras.exts)) {\n \t\tder.startSequence(Local(3));\n \t\tder.startSequence();\n\n \t\tvar exts = [];\n \t\tif (cert.purposes !== undefined && cert.purposes.length > 0) {\n \t\t\texts.push({\n \t\t\t\toid: EXTS.basicConstraints,\n \t\t\t\tcritical: true\n \t\t\t});\n \t\t\texts.push({\n \t\t\t\toid: EXTS.keyUsage,\n \t\t\t\tcritical: true\n \t\t\t});\n \t\t\texts.push({\n \t\t\t\toid: EXTS.extKeyUsage,\n \t\t\t\tcritical: true\n \t\t\t});\n \t\t}\n \t\texts.push({ oid: EXTS.altName });\n \t\tif (sig.extras && sig.extras.exts)\n \t\t\texts = sig.extras.exts;\n\n \t\tfor (var i = 0; i < exts.length; ++i) {\n \t\t\tder.startSequence();\n \t\t\tder.writeOID(exts[i].oid);\n\n \t\t\tif (exts[i].critical !== undefined)\n \t\t\t\tder.writeBoolean(exts[i].critical);\n\n \t\t\tif (exts[i].oid === EXTS.altName) {\n \t\t\t\tder.startSequence(asn1.Ber.OctetString);\n \t\t\t\tder.startSequence();\n \t\t\t\tif (subject.type === 'host') {\n \t\t\t\t\tder.writeString(subject.hostname,\n \t\t\t\t\t    Context(2));\n \t\t\t\t}\n \t\t\t\tfor (var j = 0; j < altNames.length; ++j) {\n \t\t\t\t\tif (altNames[j].type === 'host') {\n \t\t\t\t\t\tder.writeString(\n \t\t\t\t\t\t    altNames[j].hostname,\n \t\t\t\t\t\t    ALTNAME.DNSName);\n \t\t\t\t\t} else if (altNames[j].type ===\n \t\t\t\t\t    'email') {\n \t\t\t\t\t\tder.writeString(\n \t\t\t\t\t\t    altNames[j].email,\n \t\t\t\t\t\t    ALTNAME.RFC822Name);\n \t\t\t\t\t} else {\n \t\t\t\t\t\t/*\n \t\t\t\t\t\t * Encode anything else as a\n \t\t\t\t\t\t * DN style name for now.\n \t\t\t\t\t\t */\n \t\t\t\t\t\tder.startSequence(\n \t\t\t\t\t\t    ALTNAME.DirectoryName);\n \t\t\t\t\t\taltNames[j].toAsn1(der);\n \t\t\t\t\t\tder.endSequence();\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tder.endSequence();\n \t\t\t\tder.endSequence();\n \t\t\t} else if (exts[i].oid === EXTS.basicConstraints) {\n \t\t\t\tder.startSequence(asn1.Ber.OctetString);\n \t\t\t\tder.startSequence();\n \t\t\t\tvar ca = (cert.purposes.indexOf('ca') !== -1);\n \t\t\t\tvar pathLen = exts[i].pathLen;\n \t\t\t\tder.writeBoolean(ca);\n \t\t\t\tif (pathLen !== undefined)\n \t\t\t\t\tder.writeInt(pathLen);\n \t\t\t\tder.endSequence();\n \t\t\t\tder.endSequence();\n \t\t\t} else if (exts[i].oid === EXTS.extKeyUsage) {\n \t\t\t\tder.startSequence(asn1.Ber.OctetString);\n \t\t\t\tder.startSequence();\n \t\t\t\tcert.purposes.forEach(function (purpose) {\n \t\t\t\t\tif (purpose === 'ca')\n \t\t\t\t\t\treturn;\n \t\t\t\t\tif (KEYUSEBITS.indexOf(purpose) !== -1)\n \t\t\t\t\t\treturn;\n \t\t\t\t\tvar oid = purpose;\n \t\t\t\t\tif (EXTPURPOSE[purpose] !== undefined)\n \t\t\t\t\t\toid = EXTPURPOSE[purpose];\n \t\t\t\t\tder.writeOID(oid);\n \t\t\t\t});\n \t\t\t\tder.endSequence();\n \t\t\t\tder.endSequence();\n \t\t\t} else if (exts[i].oid === EXTS.keyUsage) {\n \t\t\t\tder.startSequence(asn1.Ber.OctetString);\n \t\t\t\t/*\n \t\t\t\t * If we parsed this certificate from a byte\n \t\t\t\t * stream (i.e. we didn't generate it in sshpk)\n \t\t\t\t * then we'll have a \".bits\" property on the\n \t\t\t\t * ext with the original raw byte contents.\n \t\t\t\t *\n \t\t\t\t * If we have this, use it here instead of\n \t\t\t\t * regenerating it. This guarantees we output\n \t\t\t\t * the same data we parsed, so signatures still\n \t\t\t\t * validate.\n \t\t\t\t */\n \t\t\t\tif (exts[i].bits !== undefined) {\n \t\t\t\t\tder.writeBuffer(exts[i].bits,\n \t\t\t\t\t    asn1.Ber.BitString);\n \t\t\t\t} else {\n \t\t\t\t\tvar bits = writeBitField(cert.purposes,\n \t\t\t\t\t    KEYUSEBITS);\n \t\t\t\t\tder.writeBuffer(bits,\n \t\t\t\t\t    asn1.Ber.BitString);\n \t\t\t\t}\n \t\t\t\tder.endSequence();\n \t\t\t} else {\n \t\t\t\tder.writeBuffer(exts[i].data,\n \t\t\t\t    asn1.Ber.OctetString);\n \t\t\t}\n\n \t\t\tder.endSequence();\n \t\t}\n\n \t\tder.endSequence();\n \t\tder.endSequence();\n \t}\n\n \tder.endSequence();\n }\n\n /*\n  * Reads an ASN.1 BER bitfield out of the Buffer produced by doing\n  * `BerReader#readString(asn1.Ber.BitString)`. That function gives us the raw\n  * contents of the BitString tag, which is a count of unused bits followed by\n  * the bits as a right-padded byte string.\n  *\n  * `bits` is the Buffer, `bitIndex` should contain an array of string names\n  * for the bits in the string, ordered starting with bit #0 in the ASN.1 spec.\n  *\n  * Returns an array of Strings, the names of the bits that were set to 1.\n  */\n function readBitField(bits, bitIndex) {\n \tvar bitLen = 8 * (bits.length - 1) - bits[0];\n \tvar setBits = {};\n \tfor (var i = 0; i < bitLen; ++i) {\n \t\tvar byteN = 1 + Math.floor(i / 8);\n \t\tvar bit = 7 - (i % 8);\n \t\tvar mask = 1 << bit;\n \t\tvar bitVal = ((bits[byteN] & mask) !== 0);\n \t\tvar name = bitIndex[i];\n \t\tif (bitVal && typeof (name) === 'string') {\n \t\t\tsetBits[name] = true;\n \t\t}\n \t}\n \treturn (Object.keys(setBits));\n }\n\n /*\n  * `setBits` is an array of strings, containing the names for each bit that\n  * sould be set to 1. `bitIndex` is same as in `readBitField()`.\n  *\n  * Returns a Buffer, ready to be written out with `BerWriter#writeString()`.\n  */\n function writeBitField(setBits, bitIndex) {\n \tvar bitLen = bitIndex.length;\n \tvar blen = Math.ceil(bitLen / 8);\n \tvar unused = blen * 8 - bitLen;\n \tvar bits = Buffer.alloc(1 + blen); // zero-filled\n \tbits[0] = unused;\n \tfor (var i = 0; i < bitLen; ++i) {\n \t\tvar byteN = 1 + Math.floor(i / 8);\n \t\tvar bit = 7 - (i % 8);\n \t\tvar mask = 1 << bit;\n \t\tvar name = bitIndex[i];\n \t\tif (name === undefined)\n \t\t\tcontinue;\n \t\tvar bitVal = (setBits.indexOf(name) !== -1);\n \t\tif (bitVal) {\n \t\t\tbits[byteN] |= mask;\n \t\t}\n \t}\n \treturn (bits);\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_read = module.exports.read;\n_verify = module.exports.verify;\n_sign = module.exports.sign;\n_signAsync = module.exports.signAsync;\n_write = module.exports.write;\n\n}, () => ({\n  'assert-plus': _req,\n  'asn1': _req0,\n  'safer-buffer': _req1,\n  '../algs': _req2,\n  '../utils': _req3,\n  '../key': _req4,\n  '../private-key': _req5,\n  './pem': _req6,\n  '../identity': _req7,\n  '../signature': _req8,\n  '../certificate': _req9,\n  './pkcs8': _req10,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}