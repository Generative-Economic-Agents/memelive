{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/dynamodb/set.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","util","typeOf","memberTypeToSetType","DynamoDBSet","inherit","constructor","Set","list","options","wrapperName","initialize","validate","self","values","concat","detectType","type","error","Error","code","message","length","i","toJSON","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from './types';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var util = require('../core').util;\n var typeOf = require('./types').typeOf;\n\n /**\n  * @api private\n  */\n var memberTypeToSetType = {\n   'String': 'String',\n   'Number': 'Number',\n   'NumberValue': 'Number',\n   'Binary': 'Binary'\n };\n\n /**\n  * @api private\n  */\n var DynamoDBSet = util.inherit({\n\n   constructor: function Set(list, options) {\n     options = options || {};\n     this.wrapperName = 'Set';\n     this.initialize(list, options.validate);\n   },\n\n   initialize: function(list, validate) {\n     var self = this;\n     self.values = [].concat(list);\n     self.detectType();\n     if (validate) {\n       self.validate();\n     }\n   },\n\n   detectType: function() {\n     this.type = memberTypeToSetType[typeOf(this.values[0])];\n     if (!this.type) {\n       throw util.error(new Error(), {\n         code: 'InvalidSetType',\n         message: 'Sets can contain string, number, or binary values'\n       });\n     }\n   },\n\n   validate: function() {\n     var self = this;\n     var length = self.values.length;\n     var values = self.values;\n     for (var i = 0; i < length; i++) {\n       if (memberTypeToSetType[typeOf(values[i])] !== self.type) {\n         throw util.error(new Error(), {\n           code: 'InvalidType',\n           message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'\n         });\n       }\n     }\n   },\n\n   /**\n    * Render the underlying values only when converting to JSON.\n    */\n   toJSON: function() {\n     var self = this;\n     return self.values;\n   }\n\n });\n\n /**\n  * @api private\n  */\n module.exports = DynamoDBSet;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n  './types': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}