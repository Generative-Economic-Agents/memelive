{"version":3,"sources":["file:///Users/feiwang/workSpace/AITown/cutepet/node_modules/lodash-es/_baseXor.js"],"names":["baseXor","arrays","iteratee","comparator","length","baseUniq","index","result","Array","array","othIndex","baseDifference","baseFlatten"],"mappings":";;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,OAAT,CAAiBC,MAAjB,EAAyBC,QAAzB,EAAmCC,UAAnC,EAA+C;AAC7C,QAAIC,MAAM,GAAGH,MAAM,CAACG,MAApB;;AACA,QAAIA,MAAM,GAAG,CAAb,EAAgB;AACd,aAAOA,MAAM,GAAGC,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,CAAX,GAAyB,EAAtC;AACD;;AACD,QAAIK,KAAK,GAAG,CAAC,CAAb;AAAA,QACIC,MAAM,GAAGC,KAAK,CAACJ,MAAD,CADlB;;AAGA,WAAO,EAAEE,KAAF,GAAUF,MAAjB,EAAyB;AACvB,UAAIK,KAAK,GAAGR,MAAM,CAACK,KAAD,CAAlB;AAAA,UACII,QAAQ,GAAG,CAAC,CADhB;;AAGA,aAAO,EAAEA,QAAF,GAAaN,MAApB,EAA4B;AAC1B,YAAIM,QAAQ,IAAIJ,KAAhB,EAAuB;AACrBC,UAAAA,MAAM,CAACD,KAAD,CAAN,GAAgBK,cAAc,CAACJ,MAAM,CAACD,KAAD,CAAN,IAAiBG,KAAlB,EAAyBR,MAAM,CAACS,QAAD,CAA/B,EAA2CR,QAA3C,EAAqDC,UAArD,CAA9B;AACD;AACF;AACF;;AACD,WAAOE,QAAQ,CAACO,WAAW,CAACL,MAAD,EAAS,CAAT,CAAZ,EAAyBL,QAAzB,EAAmCC,UAAnC,CAAf;AACD;;;;AAjCMQ,MAAAA,c;;AACAC,MAAAA,W;;AACAP,MAAAA,Q;;;yBAiCQL,O","sourcesContent":["import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseUniq from './_baseUniq.js';\n\n/**\n * The base implementation of methods like `_.xor`, without support for\n * iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of values.\n */\nfunction baseXor(arrays, iteratee, comparator) {\n  var length = arrays.length;\n  if (length < 2) {\n    return length ? baseUniq(arrays[0]) : [];\n  }\n  var index = -1,\n      result = Array(length);\n\n  while (++index < length) {\n    var array = arrays[index],\n        othIndex = -1;\n\n    while (++othIndex < length) {\n      if (othIndex != index) {\n        result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n      }\n    }\n  }\n  return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n}\n\nexport default baseXor;\n"]}