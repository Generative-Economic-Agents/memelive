{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/unzipWith.js"],"names":["unzipWith","array","iteratee","length","result","unzip","arrayMap","group","apply","undefined"],"mappings":";;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,SAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoC;AAClC,QAAI,EAAED,KAAK,IAAIA,KAAK,CAACE,MAAjB,CAAJ,EAA8B;AAC5B,aAAO,EAAP;AACD;;AACD,QAAIC,MAAM,GAAGC,KAAK,CAACJ,KAAD,CAAlB;;AACA,QAAIC,QAAQ,IAAI,IAAhB,EAAsB;AACpB,aAAOE,MAAP;AACD;;AACD,WAAOE,QAAQ,CAACF,MAAD,EAAS,UAASG,KAAT,EAAgB;AACtC,aAAOC,KAAK,CAACN,QAAD,EAAWO,SAAX,EAAsBF,KAAtB,CAAZ;AACD,KAFc,CAAf;AAGD;;;;AApCMC,MAAAA,K;;AACAF,MAAAA,Q;;AACAD,MAAAA,K;;;yBAoCQL,S","sourcesContent":["import apply from './_apply.js';\nimport arrayMap from './_arrayMap.js';\nimport unzip from './unzip.js';\n\n/**\n * This method is like `_.unzip` except that it accepts `iteratee` to specify\n * how regrouped values should be combined. The iteratee is invoked with the\n * elements of each group: (...group).\n *\n * @static\n * @memberOf _\n * @since 3.8.0\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @param {Function} [iteratee=_.identity] The function to combine\n *  regrouped values.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n * // => [[1, 10, 100], [2, 20, 200]]\n *\n * _.unzipWith(zipped, _.add);\n * // => [3, 30, 300]\n */\nfunction unzipWith(array, iteratee) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  var result = unzip(array);\n  if (iteratee == null) {\n    return result;\n  }\n  return arrayMap(result, function(group) {\n    return apply(iteratee, undefined, group);\n  });\n}\n\nexport default unzipWith;\n"]}