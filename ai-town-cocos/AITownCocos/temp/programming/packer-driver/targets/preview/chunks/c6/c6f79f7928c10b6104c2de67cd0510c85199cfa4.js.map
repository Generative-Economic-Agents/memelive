{"version":3,"sources":["file:///Users/feiwang/workSpace/AITown/cutepet/assets/src/game/components/listViewCtrl2.ts"],"names":["_decorator","Component","Node","ScrollView","Vec3","UITransform","instantiate","error","Vec2","ListItemComponent","ccclass","property","menu","_temp_vec3","ListViewCtrl2","_content","_items","_updateTimer","_updateInterval","_lastContentPosY","_itemTemplateUITrans","_contentUITrans","_itemdata","onLoad","scrollView","content","initData","spawnCount","itemdata","reset","totalCount","length","initialize","scheduleOnce","i","getComponent","setData","removeAllChildren","itemTemplate","height","spacing","item","addChild","itemUITrans","setPosition","indexlabelComp","index_label","string","push","getPositionInView","worldPos","parent","convertToWorldSpaceAR","position","viewPos","node","convertToNodeSpaceAR","update","dt","addItem","removeItem","moveBottomItemToTop","offset","getItemAtBottom","getPosition","y","scrollToFixedPosition","scrollToOffset"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, ScrollView, Label, Button, Vec3, UITransform, instantiate, error, Vec2 } from \"cc\";\nimport { ListItemComponent } from \"./ListItemComponent\";\nconst { ccclass, property, menu } = _decorator;\n\nconst _temp_vec3 = new Vec3();\n/**\n * 竖版listview\n * 复用cell实例\n * 可指定复用数量\n */\n@ccclass(\"ListViewCtrl2\")\n@menu('UI/ListViewCtrl2')\nexport class ListViewCtrl2 extends Component {\n    @property(Node)\n    public itemTemplate: Node = null!;\n    @property(ScrollView)\n    public scrollView: ScrollView = null!;\n    @property\n    public spawnCount = 0; // 初始化 item 数量\n    @property\n    public totalCount = 0; // 滚动列表里总的 item 数量\n    @property\n    public spacing = 0; // item 垂直排布间隔\n    @property\n    public bufferZone = 0; // when item is away from bufferZone, we relocate it\n\n\n    private _content: Node = null!;\n    private _items: Node[] = [];\n    private _updateTimer = 0;\n    private _updateInterval = 0.2;\n    private _lastContentPosY = 0;\n    private _itemTemplateUITrans!: UITransform;\n    private _contentUITrans!: UITransform;\n\n    onLoad() {\n        this._content = this.scrollView.content!;\n        // this.initialize();//编辑器数据设置\n        this._updateTimer = 0;\n        this._updateInterval = 0.2;\n        this._lastContentPosY = 0; // use this variable to detect if we are scrolling up or down\n    }\n\n    //=================外部调用设置=======================\n    private _itemdata: any[] = null;\n    /**\n     * 设置spwan,itemdata;\n     * \n     */\n    public initData(spawnCount, itemdata) {\n        this.reset();\n        this.spawnCount = spawnCount;\n        this.totalCount = itemdata ? itemdata.length : 0;\n        this._itemdata = itemdata;\n        this.initialize();\n\n        this.scheduleOnce(() => {//等待初始化完成后，可获取组件\n            for (let i = 0; i < this._items.length; i++) {\n                this._items[i].getComponent(ListItemComponent).setData(this._itemdata[i]);\n            }\n            // this._content.getComponent(UITransform).height = this._contentUITrans.height;\n        }, 0.1)\n    }\n\n    public reset() {\n        this.spawnCount = 0;\n        this.totalCount = 0;\n        this._itemdata = [];\n        this._content.removeAllChildren();\n        this._items = [];\n    }\n    //=================外部调用设置end=======================\n    // 初始化 item\n    initialize() {\n\n        this._itemTemplateUITrans = this.itemTemplate.getComponent(UITransform);\n        this._contentUITrans = this._content.getComponent(UITransform);\n        this._contentUITrans.height = this.totalCount * (this._itemTemplateUITrans.height + this.spacing) + this.spacing; // get total content height\n        for (let i = 0; i < this.spawnCount; i++) { // spawn items, we only need to do this once\n            let item = instantiate(this.itemTemplate) as Node;\n            this._content.addChild(item);\n            let itemUITrans = item.getComponent(UITransform);\n            item.setPosition(0, -itemUITrans.height * (0.5 + i) - this.spacing * (i), 0);\n            // const labelComp = item.getComponentInChildren(Label)!;\n\n            const indexlabelComp = item.getComponent(ListItemComponent)!.index_label;\n            indexlabelComp.string = i + 1 + \"\";\n            this._items.push(item);\n        }\n    }\n\n    getPositionInView(item: Node) {\n        // get item position in scrollview's node space\n        let worldPos = item.parent!.getComponent(UITransform)!.convertToWorldSpaceAR(item.position);\n        let viewPos = this.scrollView.node.getComponent(UITransform)!.convertToNodeSpaceAR(worldPos);\n        return viewPos;\n    }\n\n    update(dt: number) {\n        // if (!this._itemTemplateUITrans) {\n        //     return;//未初始化；\n        // }\n        // this._updateTimer += dt;\n        // if (this._updateTimer < this._updateInterval) return; // we don't need to do the math every frame\n        // this._updateTimer = 0;\n        // let items = this._items;\n        // let buffer = this.bufferZone;\n        // let isDown = this.scrollView.content!.position.y < this._lastContentPosY; // scrolling direction\n        // let offset = (this._itemTemplateUITrans.height + this.spacing) * items.length;\n        // for (let i = 0; i < items.length; ++i) {\n        //     let viewPos = this.getPositionInView(items[i]);\n        //     items[i].getPosition(_temp_vec3);\n        //     if (isDown) {\n        //         // if away from buffer zone and not reaching top of content\n        //         if (viewPos.y < -buffer && _temp_vec3.y + offset < 0) {\n        //             _temp_vec3.y += offset;\n        //             items[i].setPosition(_temp_vec3);\n        //             const indexlabelComp = items[i].getComponent(ListItemComponent)!.index_label;\n        //             let ind = Math.floor(-_temp_vec3.y / this._contentUITrans.height * this.totalCount) ;\n        //             indexlabelComp.string = ind + 1 + \"\";\n        //             items[i].getComponent(ListItemComponent).setData(this._itemdata[ind]);\n        //         }\n        //     } else {\n        //         // if away from buffer zone and not reaching bottom of content\n        //         if (viewPos.y > buffer && _temp_vec3.y - offset > -this._contentUITrans.height) {\n        //             _temp_vec3.y -= offset;\n        //             items[i].setPosition(_temp_vec3);\n        //             const indexlabelComp = items[i].getComponent(ListItemComponent)!.index_label;\n        //             let ind = Math.floor(-_temp_vec3.y / this._contentUITrans.height * this.totalCount) ;\n        //             indexlabelComp.string = ind + 1 + \"\";\n        //             items[i].getComponent(ListItemComponent).setData(this._itemdata[ind]);\n        //         }\n        //     }\n        // }\n        // // update lastContentPosY\n        // this._lastContentPosY = this.scrollView.content!.position.y;\n        // // console.log(\"Total Items: \" + this.totalCount);\n    }\n\n    addItem() {\n        this._contentUITrans.height = (this.totalCount + 1) * (this._itemTemplateUITrans.height + this.spacing) + this.spacing; // get total content height\n        this.totalCount = this.totalCount + 1;\n    }\n\n    removeItem() {\n        if (this.totalCount - 1 < 30) {\n            error(\"can't remove item less than 30!\");\n            return;\n        }\n\n        this._contentUITrans.height = (this.totalCount - 1) * (this._itemTemplateUITrans.height + this.spacing) + this.spacing; // get total content height\n        this.totalCount = this.totalCount - 1;\n\n        this.moveBottomItemToTop();\n    }\n\n    moveBottomItemToTop() {\n        let offset = (this._itemTemplateUITrans.height + this.spacing) * this._items.length;\n        let length = this._items.length;\n        let item = this.getItemAtBottom();\n        item.getPosition(_temp_vec3);\n\n        // whether need to move to top\n        if (_temp_vec3.y + offset < 0) {\n            _temp_vec3.y = _temp_vec3.y + offset;\n            item.setPosition(_temp_vec3);\n        }\n    }\n\n    getItemAtBottom() {\n        let item = this._items[0];\n        for (let i = 1; i < this._items.length; ++i) {\n            if (item.position.y > this._items[i].position.y) {\n                item = this._items[i];\n            }\n        }\n        return item;\n    }\n\n    scrollToFixedPosition() {\n        this.scrollView.scrollToOffset(new Vec2(0, 500), 2, true);\n    }\n}\n\n"]}