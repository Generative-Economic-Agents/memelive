{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/sshpk/lib/formats/openssh-cert.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","_req4","_req5","_req6","_req7","_req8","_req9","_req10","url","define","exports","require","module","__filename","__dirname","read","verify","sign","signAsync","write","fromBuffer","toBuffer","assert","SSHBuffer","crypto","Buffer","algs","Key","PrivateKey","Identity","rfc4253","Signature","utils","Certificate","cert","key","TYPES","Object","keys","forEach","k","ECDSA_ALGO","buf","options","isBuffer","toString","parts","trim","split","length","Error","algo","data","from","partial","sshbuf","buffer","innerAlgo","readString","undefined","signatures","openssh","nonce","readBuffer","type","getAlg","partCount","info","push","readPart","ok","algInfo","res","exec","strictEqual","i","name","normalize","p","mpNormalize","subjectKey","serial","readInt64","readInt","string","keyId","principals","pbuf","psshbuf","atEnd","subjects","map","pr","forUser","forHost","validFrom","int64ToDate","validUntil","exts","extbuf","ext","critical","signingKeyBuf","issuerKey","issuer","sigBuf","signature","parse","remainder","consumed","_offset","readUInt32BE","d","Date","setTime","sourceInt64","dateToInt64","date","Math","round","getTime","upper","floor","lower","alloc","writeUInt32BE","blob","e","sig","hashAlgo","signer","createSign","done","err","out","getCertType","comment","noSig","object","randomBytes","writeString","writeBuffer","part","writePart","writeInt64","notStrictEqual","id","writeInt","uid","hostname","sub","host","user","certType","match","curve","_cjsExports","_read","_verify","_sign","_signAsync","_write","_fromBuffer","_toBuffer"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'assert-plus';\nimport { __cjsMetaURL as _req0} from '../ssh-buffer';\nimport { __cjsMetaURL as _req1} from 'crypto';\nimport { __cjsMetaURL as _req2} from 'safer-buffer';\nimport { __cjsMetaURL as _req3} from '../algs';\nimport { __cjsMetaURL as _req4} from '../key';\nimport { __cjsMetaURL as _req5} from '../private-key';\nimport { __cjsMetaURL as _req6} from '../identity';\nimport { __cjsMetaURL as _req7} from './rfc4253';\nimport { __cjsMetaURL as _req8} from '../signature';\nimport { __cjsMetaURL as _req9} from '../utils';\nimport { __cjsMetaURL as _req10} from '../certificate';\nlet _cjsExports;\nlet _read;\nlet _verify;\nlet _sign;\nlet _signAsync;\nlet _write;\nlet _fromBuffer;\nlet _toBuffer;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n // Copyright 2017 Joyent, Inc.\n\n module.exports = {\n \tread: read,\n \tverify: verify,\n \tsign: sign,\n \tsignAsync: signAsync,\n \twrite: write,\n\n \t/* Internal private API */\n \tfromBuffer: fromBuffer,\n \ttoBuffer: toBuffer\n };\n\n var assert = require('assert-plus');\n var SSHBuffer = require('../ssh-buffer');\n var crypto = require('crypto');\n var Buffer = require('safer-buffer').Buffer;\n var algs = require('../algs');\n var Key = require('../key');\n var PrivateKey = require('../private-key');\n var Identity = require('../identity');\n var rfc4253 = require('./rfc4253');\n var Signature = require('../signature');\n var utils = require('../utils');\n var Certificate = require('../certificate');\n\n function verify(cert, key) {\n \t/*\n \t * We always give an issuerKey, so if our verify() is being called then\n \t * there was no signature. Return false.\n \t */\n \treturn (false);\n }\n\n var TYPES = {\n \t'user': 1,\n \t'host': 2\n };\n Object.keys(TYPES).forEach(function (k) { TYPES[TYPES[k]] = k; });\n\n var ECDSA_ALGO = /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;\n\n function read(buf, options) {\n \tif (Buffer.isBuffer(buf))\n \t\tbuf = buf.toString('ascii');\n \tvar parts = buf.trim().split(/[ \\t\\n]+/g);\n \tif (parts.length < 2 || parts.length > 3)\n \t\tthrow (new Error('Not a valid SSH certificate line'));\n\n \tvar algo = parts[0];\n \tvar data = parts[1];\n\n \tdata = Buffer.from(data, 'base64');\n \treturn (fromBuffer(data, algo));\n }\n\n function fromBuffer(data, algo, partial) {\n \tvar sshbuf = new SSHBuffer({ buffer: data });\n \tvar innerAlgo = sshbuf.readString();\n \tif (algo !== undefined && innerAlgo !== algo)\n \t\tthrow (new Error('SSH certificate algorithm mismatch'));\n \tif (algo === undefined)\n \t\talgo = innerAlgo;\n\n \tvar cert = {};\n \tcert.signatures = {};\n \tcert.signatures.openssh = {};\n\n \tcert.signatures.openssh.nonce = sshbuf.readBuffer();\n\n \tvar key = {};\n \tvar parts = (key.parts = []);\n \tkey.type = getAlg(algo);\n\n \tvar partCount = algs.info[key.type].parts.length;\n \twhile (parts.length < partCount)\n \t\tparts.push(sshbuf.readPart());\n \tassert.ok(parts.length >= 1, 'key must have at least one part');\n\n \tvar algInfo = algs.info[key.type];\n \tif (key.type === 'ecdsa') {\n \t\tvar res = ECDSA_ALGO.exec(algo);\n \t\tassert.ok(res !== null);\n \t\tassert.strictEqual(res[1], parts[0].data.toString());\n \t}\n\n \tfor (var i = 0; i < algInfo.parts.length; ++i) {\n \t\tparts[i].name = algInfo.parts[i];\n \t\tif (parts[i].name !== 'curve' &&\n \t\t    algInfo.normalize !== false) {\n \t\t\tvar p = parts[i];\n \t\t\tp.data = utils.mpNormalize(p.data);\n \t\t}\n \t}\n\n \tcert.subjectKey = new Key(key);\n\n \tcert.serial = sshbuf.readInt64();\n\n \tvar type = TYPES[sshbuf.readInt()];\n \tassert.string(type, 'valid cert type');\n\n \tcert.signatures.openssh.keyId = sshbuf.readString();\n\n \tvar principals = [];\n \tvar pbuf = sshbuf.readBuffer();\n \tvar psshbuf = new SSHBuffer({ buffer: pbuf });\n \twhile (!psshbuf.atEnd())\n \t\tprincipals.push(psshbuf.readString());\n \tif (principals.length === 0)\n \t\tprincipals = ['*'];\n\n \tcert.subjects = principals.map(function (pr) {\n \t\tif (type === 'user')\n \t\t\treturn (Identity.forUser(pr));\n \t\telse if (type === 'host')\n \t\t\treturn (Identity.forHost(pr));\n \t\tthrow (new Error('Unknown identity type ' + type));\n \t});\n\n \tcert.validFrom = int64ToDate(sshbuf.readInt64());\n \tcert.validUntil = int64ToDate(sshbuf.readInt64());\n\n \tvar exts = [];\n \tvar extbuf = new SSHBuffer({ buffer: sshbuf.readBuffer() });\n \tvar ext;\n \twhile (!extbuf.atEnd()) {\n \t\text = { critical: true };\n \t\text.name = extbuf.readString();\n \t\text.data = extbuf.readBuffer();\n \t\texts.push(ext);\n \t}\n \textbuf = new SSHBuffer({ buffer: sshbuf.readBuffer() });\n \twhile (!extbuf.atEnd()) {\n \t\text = { critical: false };\n \t\text.name = extbuf.readString();\n \t\text.data = extbuf.readBuffer();\n \t\texts.push(ext);\n \t}\n \tcert.signatures.openssh.exts = exts;\n\n \t/* reserved */\n \tsshbuf.readBuffer();\n\n \tvar signingKeyBuf = sshbuf.readBuffer();\n \tcert.issuerKey = rfc4253.read(signingKeyBuf);\n\n \t/*\n \t * OpenSSH certs don't give the identity of the issuer, just their\n \t * public key. So, we use an Identity that matches anything. The\n \t * isSignedBy() function will later tell you if the key matches.\n \t */\n \tcert.issuer = Identity.forHost('**');\n\n \tvar sigBuf = sshbuf.readBuffer();\n \tcert.signatures.openssh.signature =\n \t    Signature.parse(sigBuf, cert.issuerKey.type, 'ssh');\n\n \tif (partial !== undefined) {\n \t\tpartial.remainder = sshbuf.remainder();\n \t\tpartial.consumed = sshbuf._offset;\n \t}\n\n \treturn (new Certificate(cert));\n }\n\n function int64ToDate(buf) {\n \tvar i = buf.readUInt32BE(0) * 4294967296;\n \ti += buf.readUInt32BE(4);\n \tvar d = new Date();\n \td.setTime(i * 1000);\n \td.sourceInt64 = buf;\n \treturn (d);\n }\n\n function dateToInt64(date) {\n \tif (date.sourceInt64 !== undefined)\n \t\treturn (date.sourceInt64);\n \tvar i = Math.round(date.getTime() / 1000);\n \tvar upper = Math.floor(i / 4294967296);\n \tvar lower = Math.floor(i % 4294967296);\n \tvar buf = Buffer.alloc(8);\n \tbuf.writeUInt32BE(upper, 0);\n \tbuf.writeUInt32BE(lower, 4);\n \treturn (buf);\n }\n\n function sign(cert, key) {\n \tif (cert.signatures.openssh === undefined)\n \t\tcert.signatures.openssh = {};\n \ttry {\n \t\tvar blob = toBuffer(cert, true);\n \t} catch (e) {\n \t\tdelete (cert.signatures.openssh);\n \t\treturn (false);\n \t}\n \tvar sig = cert.signatures.openssh;\n \tvar hashAlgo = undefined;\n \tif (key.type === 'rsa' || key.type === 'dsa')\n \t\thashAlgo = 'sha1';\n \tvar signer = key.createSign(hashAlgo);\n \tsigner.write(blob);\n \tsig.signature = signer.sign();\n \treturn (true);\n }\n\n function signAsync(cert, signer, done) {\n \tif (cert.signatures.openssh === undefined)\n \t\tcert.signatures.openssh = {};\n \ttry {\n \t\tvar blob = toBuffer(cert, true);\n \t} catch (e) {\n \t\tdelete (cert.signatures.openssh);\n \t\tdone(e);\n \t\treturn;\n \t}\n \tvar sig = cert.signatures.openssh;\n\n \tsigner(blob, function (err, signature) {\n \t\tif (err) {\n \t\t\tdone(err);\n \t\t\treturn;\n \t\t}\n \t\ttry {\n \t\t\t/*\n \t\t\t * This will throw if the signature isn't of a\n \t\t\t * type/algo that can be used for SSH.\n \t\t\t */\n \t\t\tsignature.toBuffer('ssh');\n \t\t} catch (e) {\n \t\t\tdone(e);\n \t\t\treturn;\n \t\t}\n \t\tsig.signature = signature;\n \t\tdone();\n \t});\n }\n\n function write(cert, options) {\n \tif (options === undefined)\n \t\toptions = {};\n\n \tvar blob = toBuffer(cert);\n \tvar out = getCertType(cert.subjectKey) + ' ' + blob.toString('base64');\n \tif (options.comment)\n \t\tout = out + ' ' + options.comment;\n \treturn (out);\n }\n\n\n function toBuffer(cert, noSig) {\n \tassert.object(cert.signatures.openssh, 'signature for openssh format');\n \tvar sig = cert.signatures.openssh;\n\n \tif (sig.nonce === undefined)\n \t\tsig.nonce = crypto.randomBytes(16);\n \tvar buf = new SSHBuffer({});\n \tbuf.writeString(getCertType(cert.subjectKey));\n \tbuf.writeBuffer(sig.nonce);\n\n \tvar key = cert.subjectKey;\n \tvar algInfo = algs.info[key.type];\n \talgInfo.parts.forEach(function (part) {\n \t\tbuf.writePart(key.part[part]);\n \t});\n\n \tbuf.writeInt64(cert.serial);\n\n \tvar type = cert.subjects[0].type;\n \tassert.notStrictEqual(type, 'unknown');\n \tcert.subjects.forEach(function (id) {\n \t\tassert.strictEqual(id.type, type);\n \t});\n \ttype = TYPES[type];\n \tbuf.writeInt(type);\n\n \tif (sig.keyId === undefined) {\n \t\tsig.keyId = cert.subjects[0].type + '_' +\n \t\t    (cert.subjects[0].uid || cert.subjects[0].hostname);\n \t}\n \tbuf.writeString(sig.keyId);\n\n \tvar sub = new SSHBuffer({});\n \tcert.subjects.forEach(function (id) {\n \t\tif (type === TYPES.host)\n \t\t\tsub.writeString(id.hostname);\n \t\telse if (type === TYPES.user)\n \t\t\tsub.writeString(id.uid);\n \t});\n \tbuf.writeBuffer(sub.toBuffer());\n\n \tbuf.writeInt64(dateToInt64(cert.validFrom));\n \tbuf.writeInt64(dateToInt64(cert.validUntil));\n\n \tvar exts = sig.exts;\n \tif (exts === undefined)\n \t\texts = [];\n\n \tvar extbuf = new SSHBuffer({});\n \texts.forEach(function (ext) {\n \t\tif (ext.critical !== true)\n \t\t\treturn;\n \t\textbuf.writeString(ext.name);\n \t\textbuf.writeBuffer(ext.data);\n \t});\n \tbuf.writeBuffer(extbuf.toBuffer());\n\n \textbuf = new SSHBuffer({});\n \texts.forEach(function (ext) {\n \t\tif (ext.critical === true)\n \t\t\treturn;\n \t\textbuf.writeString(ext.name);\n \t\textbuf.writeBuffer(ext.data);\n \t});\n \tbuf.writeBuffer(extbuf.toBuffer());\n\n \t/* reserved */\n \tbuf.writeBuffer(Buffer.alloc(0));\n\n \tsub = rfc4253.write(cert.issuerKey);\n \tbuf.writeBuffer(sub);\n\n \tif (!noSig)\n \t\tbuf.writeBuffer(sig.signature.toBuffer('ssh'));\n\n \treturn (buf.toBuffer());\n }\n\n function getAlg(certType) {\n \tif (certType === 'ssh-rsa-cert-v01@openssh.com')\n \t\treturn ('rsa');\n \tif (certType === 'ssh-dss-cert-v01@openssh.com')\n \t\treturn ('dsa');\n \tif (certType.match(ECDSA_ALGO))\n \t\treturn ('ecdsa');\n \tif (certType === 'ssh-ed25519-cert-v01@openssh.com')\n \t\treturn ('ed25519');\n \tthrow (new Error('Unsupported cert type ' + certType));\n }\n\n function getCertType(key) {\n \tif (key.type === 'rsa')\n \t\treturn ('ssh-rsa-cert-v01@openssh.com');\n \tif (key.type === 'dsa')\n \t\treturn ('ssh-dss-cert-v01@openssh.com');\n \tif (key.type === 'ecdsa')\n \t\treturn ('ecdsa-sha2-' + key.curve + '-cert-v01@openssh.com');\n \tif (key.type === 'ed25519')\n \t\treturn ('ssh-ed25519-cert-v01@openssh.com');\n \tthrow (new Error('Unsupported key type ' + key.type));\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_read = module.exports.read;\n_verify = module.exports.verify;\n_sign = module.exports.sign;\n_signAsync = module.exports.signAsync;\n_write = module.exports.write;\n_fromBuffer = module.exports.fromBuffer;\n_toBuffer = module.exports.toBuffer;\n\n}, () => ({\n  'assert-plus': _req,\n  '../ssh-buffer': _req0,\n  'crypto': _req1,\n  'safer-buffer': _req2,\n  '../algs': _req3,\n  '../key': _req4,\n  '../private-key': _req5,\n  '../identity': _req6,\n  './rfc4253': _req7,\n  '../signature': _req8,\n  '../utils': _req9,\n  '../certificate': _req10,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}