{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/_hasPath.js"],"names":["hasPath","object","path","hasFunc","castPath","index","length","result","key","toKey","isLength","isIndex","isArray","isArguments"],"mappings":";;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,OAAT,CAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;AACtCD,IAAAA,IAAI,GAAGE,QAAQ,CAACF,IAAD,EAAOD,MAAP,CAAf;AAEA,QAAII,KAAK,GAAG,CAAC,CAAb;AAAA,QACIC,MAAM,GAAGJ,IAAI,CAACI,MADlB;AAAA,QAEIC,MAAM,GAAG,KAFb;;AAIA,WAAO,EAAEF,KAAF,GAAUC,MAAjB,EAAyB;AACvB,UAAIE,GAAG,GAAGC,KAAK,CAACP,IAAI,CAACG,KAAD,CAAL,CAAf;;AACA,UAAI,EAAEE,MAAM,GAAGN,MAAM,IAAI,IAAV,IAAkBE,OAAO,CAACF,MAAD,EAASO,GAAT,CAApC,CAAJ,EAAwD;AACtD;AACD;;AACDP,MAAAA,MAAM,GAAGA,MAAM,CAACO,GAAD,CAAf;AACD;;AACD,QAAID,MAAM,IAAI,EAAEF,KAAF,IAAWC,MAAzB,EAAiC;AAC/B,aAAOC,MAAP;AACD;;AACDD,IAAAA,MAAM,GAAGL,MAAM,IAAI,IAAV,GAAiB,CAAjB,GAAqBA,MAAM,CAACK,MAArC;AACA,WAAO,CAAC,CAACA,MAAF,IAAYI,QAAQ,CAACJ,MAAD,CAApB,IAAgCK,OAAO,CAACH,GAAD,EAAMF,MAAN,CAAvC,KACJM,OAAO,CAACX,MAAD,CAAP,IAAmBY,WAAW,CAACZ,MAAD,CAD1B,CAAP;AAED;;;;AApCMG,MAAAA,Q;;AACAS,MAAAA,W;;AACAD,MAAAA,O;;AACAD,MAAAA,O;;AACAD,MAAAA,Q;;AACAD,MAAAA,K;;;yBAiCQT,O","sourcesContent":["import castPath from './_castPath.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isIndex from './_isIndex.js';\nimport isLength from './isLength.js';\nimport toKey from './_toKey.js';\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\nexport default hasPath;\n"]}