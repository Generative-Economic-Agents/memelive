{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/_cloneBuffer.js"],"names":["cloneBuffer","buffer","isDeep","slice","length","result","allocUnsafe","constructor","copy","root","freeExports","exports","nodeType","freeModule","module","moduleExports","Buffer","undefined"],"mappings":";;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,WAAT,CAAqBC,MAArB,EAA6BC,MAA7B,EAAqC;AACnC,QAAIA,MAAJ,EAAY;AACV,aAAOD,MAAM,CAACE,KAAP,EAAP;AACD;;AACD,QAAIC,MAAM,GAAGH,MAAM,CAACG,MAApB;AAAA,QACIC,MAAM,GAAGC,WAAW,GAAGA,WAAW,CAACF,MAAD,CAAd,GAAyB,IAAIH,MAAM,CAACM,WAAX,CAAuBH,MAAvB,CADjD;AAGAH,IAAAA,MAAM,CAACO,IAAP,CAAYH,MAAZ;AACA,WAAOA,MAAP;AACD;;;;AAhCMI,MAAAA,I;;;AAEP;AACIC,MAAAA,W,GAAc,OAAOC,OAAP,IAAkB,QAAlB,IAA8BA,OAA9B,IAAyC,CAACA,OAAO,CAACC,QAAlD,IAA8DD,O;AAEhF;;AACIE,MAAAA,U,GAAaH,WAAW,IAAI,OAAOI,MAAP,IAAiB,QAAhC,IAA4CA,MAA5C,IAAsD,CAACA,MAAM,CAACF,QAA9D,IAA0EE,M;AAE3F;;AACIC,MAAAA,a,GAAgBF,UAAU,IAAIA,UAAU,CAACF,OAAX,KAAuBD,W;AAEzD;;AACIM,MAAAA,M,GAASD,aAAa,GAAGN,IAAI,CAACO,MAAR,GAAiBC,S;AACvCX,MAAAA,W,GAAcU,MAAM,GAAGA,MAAM,CAACV,WAAV,GAAwBW,S;;yBAqBjCjB,W","sourcesContent":["import root from './_root.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nexport default cloneBuffer;\n"]}