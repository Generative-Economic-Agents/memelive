{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/sshpk/lib/formats/pkcs1.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","_req4","_req5","_req6","_req7","url","define","exports","require","module","__filename","__dirname","read","readPkcs1","write","writePkcs1","assert","asn1","Buffer","algs","utils","Key","PrivateKey","pem","pkcs8","readECDSACurve","buf","options","key","readMPInt","der","nm","strictEqual","peek","Ber","Integer","mpNormalize","readString","alg","type","readPkcs1RSAPublic","readPkcs1RSAPrivate","Error","readPkcs1DSAPublic","readPkcs1DSAPrivate","readPkcs1ECDSAPrivate","readPkcs1ECDSAPublic","readPkcs1EdDSAPrivate","n","e","parts","name","data","version","d","p","q","dmodp","dmodq","iqmp","readUInt8","g","y","x","k","OctetString","readSequence","oid","readOID","A","readBitString","zeroPadToLength","curveOid","curve","curves","Object","keys","j","length","c","cd","pkcs8oid","string","Q","BitString","ecNormalize","from","startSequence","isPrivateKey","writePkcs1RSAPrivate","writePkcs1RSAPublic","writePkcs1DSAPrivate","writePkcs1DSAPublic","writePkcs1ECDSAPrivate","writePkcs1ECDSAPublic","writePkcs1EdDSAPrivate","writePkcs1EdDSAPublic","endSequence","writeBuffer","part","ver","addRSAMissing","writeOID","toString","writeBitString","_cjsExports","_read","_readPkcs1","_write","_writePkcs1"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'assert-plus';\nimport { __cjsMetaURL as _req0} from 'asn1';\nimport { __cjsMetaURL as _req1} from 'safer-buffer';\nimport { __cjsMetaURL as _req2} from '../algs';\nimport { __cjsMetaURL as _req3} from '../utils';\nimport { __cjsMetaURL as _req4} from '../key';\nimport { __cjsMetaURL as _req5} from '../private-key';\nimport { __cjsMetaURL as _req6} from './pem';\nimport { __cjsMetaURL as _req7} from './pkcs8';\nlet _cjsExports;\nlet _read;\nlet _readPkcs1;\nlet _write;\nlet _writePkcs1;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n // Copyright 2015 Joyent, Inc.\n\n module.exports = {\n \tread: read,\n \treadPkcs1: readPkcs1,\n \twrite: write,\n \twritePkcs1: writePkcs1\n };\n\n var assert = require('assert-plus');\n var asn1 = require('asn1');\n var Buffer = require('safer-buffer').Buffer;\n var algs = require('../algs');\n var utils = require('../utils');\n\n var Key = require('../key');\n var PrivateKey = require('../private-key');\n var pem = require('./pem');\n\n var pkcs8 = require('./pkcs8');\n var readECDSACurve = pkcs8.readECDSACurve;\n\n function read(buf, options) {\n \treturn (pem.read(buf, options, 'pkcs1'));\n }\n\n function write(key, options) {\n \treturn (pem.write(key, options, 'pkcs1'));\n }\n\n /* Helper to read in a single mpint */\n function readMPInt(der, nm) {\n \tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n \t    nm + ' is not an Integer');\n \treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n }\n\n function readPkcs1(alg, type, der) {\n \tswitch (alg) {\n \tcase 'RSA':\n \t\tif (type === 'public')\n \t\t\treturn (readPkcs1RSAPublic(der));\n \t\telse if (type === 'private')\n \t\t\treturn (readPkcs1RSAPrivate(der));\n \t\tthrow (new Error('Unknown key type: ' + type));\n \tcase 'DSA':\n \t\tif (type === 'public')\n \t\t\treturn (readPkcs1DSAPublic(der));\n \t\telse if (type === 'private')\n \t\t\treturn (readPkcs1DSAPrivate(der));\n \t\tthrow (new Error('Unknown key type: ' + type));\n \tcase 'EC':\n \tcase 'ECDSA':\n \t\tif (type === 'private')\n \t\t\treturn (readPkcs1ECDSAPrivate(der));\n \t\telse if (type === 'public')\n \t\t\treturn (readPkcs1ECDSAPublic(der));\n \t\tthrow (new Error('Unknown key type: ' + type));\n \tcase 'EDDSA':\n \tcase 'EdDSA':\n \t\tif (type === 'private')\n \t\t\treturn (readPkcs1EdDSAPrivate(der));\n \t\tthrow (new Error(type + ' keys not supported with EdDSA'));\n \tdefault:\n \t\tthrow (new Error('Unknown key algo: ' + alg));\n \t}\n }\n\n function readPkcs1RSAPublic(der) {\n \t// modulus and exponent\n \tvar n = readMPInt(der, 'modulus');\n \tvar e = readMPInt(der, 'exponent');\n\n \t// now, make the key\n \tvar key = {\n \t\ttype: 'rsa',\n \t\tparts: [\n \t\t\t{ name: 'e', data: e },\n \t\t\t{ name: 'n', data: n }\n \t\t]\n \t};\n\n \treturn (new Key(key));\n }\n\n function readPkcs1RSAPrivate(der) {\n \tvar version = readMPInt(der, 'version');\n \tassert.strictEqual(version[0], 0);\n\n \t// modulus then public exponent\n \tvar n = readMPInt(der, 'modulus');\n \tvar e = readMPInt(der, 'public exponent');\n \tvar d = readMPInt(der, 'private exponent');\n \tvar p = readMPInt(der, 'prime1');\n \tvar q = readMPInt(der, 'prime2');\n \tvar dmodp = readMPInt(der, 'exponent1');\n \tvar dmodq = readMPInt(der, 'exponent2');\n \tvar iqmp = readMPInt(der, 'iqmp');\n\n \t// now, make the key\n \tvar key = {\n \t\ttype: 'rsa',\n \t\tparts: [\n \t\t\t{ name: 'n', data: n },\n \t\t\t{ name: 'e', data: e },\n \t\t\t{ name: 'd', data: d },\n \t\t\t{ name: 'iqmp', data: iqmp },\n \t\t\t{ name: 'p', data: p },\n \t\t\t{ name: 'q', data: q },\n \t\t\t{ name: 'dmodp', data: dmodp },\n \t\t\t{ name: 'dmodq', data: dmodq }\n \t\t]\n \t};\n\n \treturn (new PrivateKey(key));\n }\n\n function readPkcs1DSAPrivate(der) {\n \tvar version = readMPInt(der, 'version');\n \tassert.strictEqual(version.readUInt8(0), 0);\n\n \tvar p = readMPInt(der, 'p');\n \tvar q = readMPInt(der, 'q');\n \tvar g = readMPInt(der, 'g');\n \tvar y = readMPInt(der, 'y');\n \tvar x = readMPInt(der, 'x');\n\n \t// now, make the key\n \tvar key = {\n \t\ttype: 'dsa',\n \t\tparts: [\n \t\t\t{ name: 'p', data: p },\n \t\t\t{ name: 'q', data: q },\n \t\t\t{ name: 'g', data: g },\n \t\t\t{ name: 'y', data: y },\n \t\t\t{ name: 'x', data: x }\n \t\t]\n \t};\n\n \treturn (new PrivateKey(key));\n }\n\n function readPkcs1EdDSAPrivate(der) {\n \tvar version = readMPInt(der, 'version');\n \tassert.strictEqual(version.readUInt8(0), 1);\n\n \t// private key\n \tvar k = der.readString(asn1.Ber.OctetString, true);\n\n \tder.readSequence(0xa0);\n \tvar oid = der.readOID();\n \tassert.strictEqual(oid, '1.3.101.112', 'the ed25519 curve identifier');\n\n \tder.readSequence(0xa1);\n \tvar A = utils.readBitString(der);\n\n \tvar key = {\n \t\ttype: 'ed25519',\n \t\tparts: [\n \t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) },\n \t\t\t{ name: 'k', data: k }\n \t\t]\n \t};\n\n \treturn (new PrivateKey(key));\n }\n\n function readPkcs1DSAPublic(der) {\n \tvar y = readMPInt(der, 'y');\n \tvar p = readMPInt(der, 'p');\n \tvar q = readMPInt(der, 'q');\n \tvar g = readMPInt(der, 'g');\n\n \tvar key = {\n \t\ttype: 'dsa',\n \t\tparts: [\n \t\t\t{ name: 'y', data: y },\n \t\t\t{ name: 'p', data: p },\n \t\t\t{ name: 'q', data: q },\n \t\t\t{ name: 'g', data: g }\n \t\t]\n \t};\n\n \treturn (new Key(key));\n }\n\n function readPkcs1ECDSAPublic(der) {\n \tder.readSequence();\n\n \tvar oid = der.readOID();\n \tassert.strictEqual(oid, '1.2.840.10045.2.1', 'must be ecPublicKey');\n\n \tvar curveOid = der.readOID();\n\n \tvar curve;\n \tvar curves = Object.keys(algs.curves);\n \tfor (var j = 0; j < curves.length; ++j) {\n \t\tvar c = curves[j];\n \t\tvar cd = algs.curves[c];\n \t\tif (cd.pkcs8oid === curveOid) {\n \t\t\tcurve = c;\n \t\t\tbreak;\n \t\t}\n \t}\n \tassert.string(curve, 'a known ECDSA named curve');\n\n \tvar Q = der.readString(asn1.Ber.BitString, true);\n \tQ = utils.ecNormalize(Q);\n\n \tvar key = {\n \t\ttype: 'ecdsa',\n \t\tparts: [\n \t\t\t{ name: 'curve', data: Buffer.from(curve) },\n \t\t\t{ name: 'Q', data: Q }\n \t\t]\n \t};\n\n \treturn (new Key(key));\n }\n\n function readPkcs1ECDSAPrivate(der) {\n \tvar version = readMPInt(der, 'version');\n \tassert.strictEqual(version.readUInt8(0), 1);\n\n \t// private key\n \tvar d = der.readString(asn1.Ber.OctetString, true);\n\n \tder.readSequence(0xa0);\n \tvar curve = readECDSACurve(der);\n \tassert.string(curve, 'a known elliptic curve');\n\n \tder.readSequence(0xa1);\n \tvar Q = der.readString(asn1.Ber.BitString, true);\n \tQ = utils.ecNormalize(Q);\n\n \tvar key = {\n \t\ttype: 'ecdsa',\n \t\tparts: [\n \t\t\t{ name: 'curve', data: Buffer.from(curve) },\n \t\t\t{ name: 'Q', data: Q },\n \t\t\t{ name: 'd', data: d }\n \t\t]\n \t};\n\n \treturn (new PrivateKey(key));\n }\n\n function writePkcs1(der, key) {\n \tder.startSequence();\n\n \tswitch (key.type) {\n \tcase 'rsa':\n \t\tif (PrivateKey.isPrivateKey(key))\n \t\t\twritePkcs1RSAPrivate(der, key);\n \t\telse\n \t\t\twritePkcs1RSAPublic(der, key);\n \t\tbreak;\n \tcase 'dsa':\n \t\tif (PrivateKey.isPrivateKey(key))\n \t\t\twritePkcs1DSAPrivate(der, key);\n \t\telse\n \t\t\twritePkcs1DSAPublic(der, key);\n \t\tbreak;\n \tcase 'ecdsa':\n \t\tif (PrivateKey.isPrivateKey(key))\n \t\t\twritePkcs1ECDSAPrivate(der, key);\n \t\telse\n \t\t\twritePkcs1ECDSAPublic(der, key);\n \t\tbreak;\n \tcase 'ed25519':\n \t\tif (PrivateKey.isPrivateKey(key))\n \t\t\twritePkcs1EdDSAPrivate(der, key);\n \t\telse\n \t\t\twritePkcs1EdDSAPublic(der, key);\n \t\tbreak;\n \tdefault:\n \t\tthrow (new Error('Unknown key algo: ' + key.type));\n \t}\n\n \tder.endSequence();\n }\n\n function writePkcs1RSAPublic(der, key) {\n \tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n }\n\n function writePkcs1RSAPrivate(der, key) {\n \tvar ver = Buffer.from([0]);\n \tder.writeBuffer(ver, asn1.Ber.Integer);\n\n \tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n \tif (!key.part.dmodp || !key.part.dmodq)\n \t\tutils.addRSAMissing(key);\n \tder.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n }\n\n function writePkcs1DSAPrivate(der, key) {\n \tvar ver = Buffer.from([0]);\n \tder.writeBuffer(ver, asn1.Ber.Integer);\n\n \tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n }\n\n function writePkcs1DSAPublic(der, key) {\n \tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n }\n\n function writePkcs1ECDSAPublic(der, key) {\n \tder.startSequence();\n\n \tder.writeOID('1.2.840.10045.2.1'); /* ecPublicKey */\n \tvar curve = key.part.curve.data.toString();\n \tvar curveOid = algs.curves[curve].pkcs8oid;\n \tassert.string(curveOid, 'a known ECDSA named curve');\n \tder.writeOID(curveOid);\n\n \tder.endSequence();\n\n \tvar Q = utils.ecNormalize(key.part.Q.data, true);\n \tder.writeBuffer(Q, asn1.Ber.BitString);\n }\n\n function writePkcs1ECDSAPrivate(der, key) {\n \tvar ver = Buffer.from([1]);\n \tder.writeBuffer(ver, asn1.Ber.Integer);\n\n \tder.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n\n \tder.startSequence(0xa0);\n \tvar curve = key.part.curve.data.toString();\n \tvar curveOid = algs.curves[curve].pkcs8oid;\n \tassert.string(curveOid, 'a known ECDSA named curve');\n \tder.writeOID(curveOid);\n \tder.endSequence();\n\n \tder.startSequence(0xa1);\n \tvar Q = utils.ecNormalize(key.part.Q.data, true);\n \tder.writeBuffer(Q, asn1.Ber.BitString);\n \tder.endSequence();\n }\n\n function writePkcs1EdDSAPrivate(der, key) {\n \tvar ver = Buffer.from([1]);\n \tder.writeBuffer(ver, asn1.Ber.Integer);\n\n \tder.writeBuffer(key.part.k.data, asn1.Ber.OctetString);\n\n \tder.startSequence(0xa0);\n \tder.writeOID('1.3.101.112');\n \tder.endSequence();\n\n \tder.startSequence(0xa1);\n \tutils.writeBitString(der, key.part.A.data);\n \tder.endSequence();\n }\n\n function writePkcs1EdDSAPublic(der, key) {\n \tthrow (new Error('Public keys are not supported for EdDSA PKCS#1'));\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_read = module.exports.read;\n_readPkcs1 = module.exports.readPkcs1;\n_write = module.exports.write;\n_writePkcs1 = module.exports.writePkcs1;\n\n}, () => ({\n  'assert-plus': _req,\n  'asn1': _req0,\n  'safer-buffer': _req1,\n  '../algs': _req2,\n  '../utils': _req3,\n  '../key': _req4,\n  '../private-key': _req5,\n  './pem': _req6,\n  './pkcs8': _req7,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}