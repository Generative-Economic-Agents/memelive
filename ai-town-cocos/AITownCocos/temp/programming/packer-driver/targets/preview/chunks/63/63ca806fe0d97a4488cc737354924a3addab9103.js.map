{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/event-stream/parse-event.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","parseMessage","parseEvent","parser","message","shape","parsedMessage","messageType","headers","value","parseError","eventType","eventModel","members","result","eventPayloadMemberName","payloadShape","type","body","parse","toString","eventHeaderNames","eventHeaderMemberNames","i","length","name","toType","output","errorCode","errorMessage","error","Error","code","_cjsExports","_parseEvent"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './parse-message';\nlet _cjsExports;\nlet _parseEvent;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var parseMessage = require('./parse-message').parseMessage;\n\n /**\n  *\n  * @param {*} parser\n  * @param {Buffer} message\n  * @param {*} shape\n  * @api private\n  */\n function parseEvent(parser, message, shape) {\n     var parsedMessage = parseMessage(message);\n\n     // check if message is an event or error\n     var messageType = parsedMessage.headers[':message-type'];\n     if (messageType) {\n         if (messageType.value === 'error') {\n             throw parseError(parsedMessage);\n         } else if (messageType.value !== 'event') {\n             // not sure how to parse non-events/non-errors, ignore for now\n             return;\n         }\n     }\n\n     // determine event type\n     var eventType = parsedMessage.headers[':event-type'];\n     // check that the event type is modeled\n     var eventModel = shape.members[eventType.value];\n     if (!eventModel) {\n         return;\n     }\n\n     var result = {};\n     // check if an event payload exists\n     var eventPayloadMemberName = eventModel.eventPayloadMemberName;\n     if (eventPayloadMemberName) {\n         var payloadShape = eventModel.members[eventPayloadMemberName];\n         // if the shape is binary, return the byte array\n         if (payloadShape.type === 'binary') {\n             result[eventPayloadMemberName] = parsedMessage.body;\n         } else {\n             result[eventPayloadMemberName] = parser.parse(parsedMessage.body.toString(), payloadShape);\n         }\n     }\n\n     // read event headers\n     var eventHeaderNames = eventModel.eventHeaderMemberNames;\n     for (var i = 0; i < eventHeaderNames.length; i++) {\n         var name = eventHeaderNames[i];\n         if (parsedMessage.headers[name]) {\n             // parse the header!\n             result[name] = eventModel.members[name].toType(parsedMessage.headers[name].value);\n         }\n     }\n\n     var output = {};\n     output[eventType.value] = result;\n     return output;\n }\n\n function parseError(message) {\n     var errorCode = message.headers[':error-code'];\n     var errorMessage = message.headers[':error-message'];\n     var error = new Error(errorMessage.value || errorMessage);\n     error.code = error.name = errorCode.value || errorCode;\n     return error;\n }\n\n /**\n  * @api private\n  */\n module.exports = {\n     parseEvent: parseEvent\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_parseEvent = module.exports.parseEvent;\n\n}, () => ({\n  './parse-message': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}