{"version":3,"sources":["file:///Users/feiwang/cutepet/assets/src/module/main/PlayWithCat.ts/ToyComponent.ts"],"names":["_decorator","Component","Node","ListViewCtrl2","GlobalConfig","modelMgr","observer","EventType","ActionType","TouchCatTips","showMsgWithMask","Log","ccclass","property","TAG","ToyComponent","currentGoodId","start","ClosePage","log","useButton","active","ToyPage","onDestroy","get_user_toys","data","toyArr","forEach","toyInfo","goodsId","count","push","showZhongziList","updateSerCatsHandler","arr","configModel","commonConfigJson","Cat","onEnable","len","Math","ceil","length","grpArr","i","temparr","j","pre_listView","ctrl","getChildByName","spawnCount","getComponent","initData","hideUseBtn","useToyById","mainModel","playAniComplete","playWithCat","instance","getCurCatId","hasToySpine","checkplayerItems","catNode","actionData","type","TOY_PLAY","text","duringTime","toyId","post","SEND_CAT_ACTION","bubble","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;;AACvBC,MAAAA,a,iBAAAA,a;;AACAC,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,Q,iBAAAA,Q;AAAUC,MAAAA,Q,iBAAAA,Q;;AACVC,MAAAA,S,iBAAAA,S;;AAGAC,MAAAA,U,iBAAAA,U;AAAYC,MAAAA,Y,iBAAAA,Y;;AACZC,MAAAA,e,iBAAAA,e;;AAEFC,MAAAA,G;;;;;;;;;OACD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBb,U;AAExBc,MAAAA,G,GAAM,c;;8BAGCC,Y,WADZH,OAAO,CAAC,cAAD,C,UAEHC,QAAQ,CAACX,IAAD,C,UAGRW,QAAQ,CAACX,IAAD,C,UAGRW,QAAQ,CAACX,IAAD,C,UAGRW,QAAQ,CAACX,IAAD,C,UAGRW,QAAQ,CAACX,IAAD,C,2BAdb,MACaa,YADb,SACkCd,SADlC,CAC4C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAexCe,aAfwC,GAef,CAfe;AAAA;;AAiBxCC,QAAAA,KAAK,GAAG,CAEP;;AAEOC,QAAAA,SAAS,GAAE;AACf;AAAA;AAAA,0BAAIC,GAAJ,CAAQL,GAAR,EAAa,WAAb;AACA,eAAKM,SAAL,CAAeC,MAAf,GAAwB,KAAxB;AACA,eAAKC,OAAL,CAAaD,MAAb,GAAsB,KAAtB;AACH;;AAESE,QAAAA,SAAS,GAAS,CAE3B;;AAEDC,QAAAA,aAAa,CAACC,IAAD,EAAW;AACpB;AAAA;AAAA,0BAAIN,GAAJ,CAAQL,GAAR,EAAaW,IAAb;AACA,cAAIC,MAAM,GAAG,EAAb;AACCD,UAAAA,IAAI,CAACA,IAAN,CAA6BE,OAA7B,CAAsCC,OAAD,IAAW;AAC5C,gBAAGA,OAAO,CAACC,OAAR,IAAmB,QAAnB,IAA+BD,OAAO,CAACE,KAAR,GAAgB,CAAlD,EAAoD;AAChDJ,cAAAA,MAAM,CAACK,IAAP,CAAYH,OAAZ;AACH;AACJ,WAJD;AAKA,eAAKI,eAAL,CAAqBN,MAArB;AACH;;AAEOO,QAAAA,oBAAoB,GAAE;AAC1B,cAAIC,GAAU,GAAG;AAAA;AAAA,oCAASC,WAAT,CAAqBC,gBAArB,CAAsCC,GAAvD;AACA,eAAKL,eAAL,CAAqBE,GAArB;AACH;;AACSI,QAAAA,QAAQ,GAAS,CACvB;AACA;AACA;AACH;AACD;AACJ;AACA;;;AACWN,QAAAA,eAAe,CAACE,GAAD,EAAM;AACxB,cAAIK,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUP,GAAG,CAACQ,MAAJ,GAAa,CAAvB,CAAV;AACA,cAAIC,MAAM,GAAG,EAAb;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAApB,EAAyBK,CAAC,EAA1B,EAA8B;AAC1B,gBAAIC,OAAO,GAAG,EAAd;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBD,cAAAA,OAAO,CAACd,IAAR,CAAaG,GAAG,CAAEU,CAAD,GAAM,CAAN,GAAUE,CAAX,CAAhB;AACH;;AACDH,YAAAA,MAAM,CAACZ,IAAP,CAAYc,OAAZ;AACH;;AACD,cAAI,KAAKE,YAAT,EAAuB;AACnB,gBAAIC,IAAI,GAAG,KAAKD,YAAL,CAAkBE,cAAlB,CAAiC,UAAjC,CAAX;AACA,gBAAIC,UAAU,GAAGP,MAAM,CAACD,MAAxB;AACAM,YAAAA,IAAI,CAACG,YAAL;AAAA;AAAA,gDAAiCC,QAAjC,CAA0CF,UAA1C,EAAsDP,MAAtD;AACH;AACJ;;AAEDU,QAAAA,UAAU,GAAE;AACR;AAAA;AAAA,0BAAIlC,GAAJ,CAAQL,GAAR,EAAa,kBAAb;AACA,eAAKM,SAAL,CAAeC,MAAf,GAAwB,KAAxB;AACH;;AAEDiC,QAAAA,UAAU,GAAE;AACR,cAAG,CAAC;AAAA;AAAA,oCAASC,SAAT,CAAmBC,eAAvB,EAAuC;AACnC;AAAA;AAAA,oDAAgB,qBAAhB;AACA;AACH;;AAED;AAAA;AAAA,oCAASD,SAAT,CAAmBE,WAAnB,CAA+B;AAAA;AAAA,4CAAaC,QAAb,CAAsBC,WAAtB,EAA/B,EAAoE,KAAK3C,aAAzE,EAAwF,CAAxF;AACA;AAAA;AAAA,0BAAIG,GAAJ,CAAQL,GAAR,EAAa,SAAb,EAAwB,KAAKE,aAA7B;AACA,eAAKE,SAAL;AACA;AAAA;AAAA,oCAASqC,SAAT,CAAmBK,WAAnB,GAAiC,IAAjC;AACA;AAAA;AAAA,oCAASL,SAAT,CAAmBM,gBAAnB;AACA;AAAA;AAAA,0BAAI1C,GAAJ,CAAQL,GAAR,EAAa,gBAAb,EAA+B,KAAKgD,OAApC;AACA,cAAMC,UAA0B,GAAG;AAC/BC,YAAAA,IAAI,EAAE;AAAA;AAAA,0CAAWC,QADc;AAE/BC,YAAAA,IAAI,EAAE;AAAA;AAAA,8CAAa,CAAb,CAFyB;AAG/BC,YAAAA,UAAU,EAAE,CAHmB;AAI/BC,YAAAA,KAAK,EAAE,KAAKpD;AAJmB,WAAnC;AAMA;AAAA;AAAA,oCAASqD,IAAT,CAAc;AAAA;AAAA,sCAAUC,eAAxB,EAAyCP,UAAzC;AACA,eAAKQ,MAAL,CAAYlD,MAAZ,GAAqB,KAArB;AACA;AACH;;AAEDmD,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AArGuC,O;;;;;iBAEnB,I;;;;;;;iBAGL,I;;;;;;;iBAGE,I;;;;;;;iBAGF,I;;;;;;;iBAGD,I","sourcesContent":["import { _decorator, Component, Node } from 'cc';\nimport { ListViewCtrl2 } from '../../../game/components/listViewCtrl2';\nimport { GlobalConfig } from '../../../game/config/GlobalConfig';\nimport { modelMgr, observer } from '../../../game/App';\nimport { EventType } from '../../../EventType';\nimport { ToyDataType } from '../shop/CatEnjoyToolsDataType';\nimport MainModel from '../../../model/main/MainModel';\nimport { ActionType, TouchCatTips } from '../../../model/StaticTextConfig';\nimport { showMsgWithMask } from '../../../core/message/MaskToastManager';\nimport { CatActionInfo } from '../../../game/config/DataStruct';\nimport Log from '../../../../../assets/src/utils/LogUtils'\nconst { ccclass, property } = _decorator;\n\nconst TAG = 'ToyComponent'\n\n@ccclass('ToyComponent')\nexport class ToyComponent extends Component {\n    @property(Node)\n    pre_listView: Node = null;\n\n    @property(Node)\n    ToyPage: Node = null;\n\n    @property(Node)\n    useButton: Node = null;\n\n    @property(Node)\n    catNode: Node = null;\n\n    @property(Node)\n    bubble: Node = null;\n    currentGoodId : number = 0  \n\n    start() {\n\n    }\n\n    private ClosePage(){\n        Log.log(TAG, 'close pag')\n        this.useButton.active = false\n        this.ToyPage.active = false\n    }\n\n    protected onDestroy(): void {\n\n    }\n\n    get_user_toys(data: any){\n        Log.log(TAG, data)\n        let toyArr = [];\n        (data.data as ToyDataType[]).forEach((toyInfo)=>{\n            if(toyInfo.goodsId >= 10101003 && toyInfo.count > 0){\n                toyArr.push(toyInfo)\n            }\n        })\n        this.showZhongziList(toyArr);\n    }\n\n    private updateSerCatsHandler(){\n        let arr: any[] = modelMgr.configModel.commonConfigJson.Cat;\n        this.showZhongziList(arr);\n    }\n    protected onEnable(): void {\n        //排序逻辑\n        // let arr: any[] = modelMgr.configModel.commonConfigJson.Cat;\n        // this.showZhongziList(arr);\n    }\n    /**\n* \n*/\n    public showZhongziList(arr) {\n        let len = Math.ceil(arr.length / 3);\n        let grpArr = [];\n        for (let i = 0; i < len; i++) {\n            let temparr = [];\n            for (let j = 0; j < 3; j++) {\n                temparr.push(arr[(i) * 3 + j]);\n            }\n            grpArr.push(temparr);\n        }\n        if (this.pre_listView) {\n            let ctrl = this.pre_listView.getChildByName(\"listctrl\");\n            let spawnCount = grpArr.length;\n            ctrl.getComponent(ListViewCtrl2).initData(spawnCount, grpArr);\n        }\n    }\n\n    hideUseBtn(){\n        Log.log(TAG, 'click hideUseBtn')\n        this.useButton.active = false\n    }\n\n    useToyById(){\n        if(!modelMgr.mainModel.playAniComplete){\n            showMsgWithMask(\"Cat has Action now!\");\n            return\n        }\n        \n        modelMgr.mainModel.playWithCat(GlobalConfig.instance.getCurCatId(), this.currentGoodId, 1)\n        Log.log(TAG, 'use Toy' ,this.currentGoodId)\n        this.ClosePage()\n        modelMgr.mainModel.hasToySpine = true\n        modelMgr.mainModel.checkplayerItems()\n        Log.log(TAG, 'cat node happy' ,this.catNode)\n        const actionData : CatActionInfo = {\n            type: ActionType.TOY_PLAY,\n            text: TouchCatTips[1],\n            duringTime: 7,\n            toyId: this.currentGoodId\n        }\n        observer.post(EventType.SEND_CAT_ACTION, actionData)\n        this.bubble.active = false\n        /**使用逗猫工具 */\n    }\n\n    update(deltaTime: number) {\n\n    }\n}\n\n\n"]}