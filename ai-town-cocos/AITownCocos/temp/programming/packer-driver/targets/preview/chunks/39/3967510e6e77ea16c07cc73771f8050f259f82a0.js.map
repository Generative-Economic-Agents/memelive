{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/credentials/credential_provider_chain.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","AWS","CredentialProviderChain","util","inherit","Credentials","constructor","providers","defaultProviders","slice","resolveCallbacks","resolve","callback","self","length","Error","push","index","resolveNext","err","creds","arrayEach","provider","call","get","getErr","addPromisesToClass","PromiseDependency","prototype","resolvePromise","promisifyMethod","deletePromisesFromClass","addPromises","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n\n /**\n  * Creates a credential provider chain that searches for AWS credentials\n  * in a list of credential providers specified by the {providers} property.\n  *\n  * By default, the chain will use the {defaultProviders} to resolve credentials.\n  * These providers will look in the environment using the\n  * {AWS.EnvironmentCredentials} class with the 'AWS' and 'AMAZON' prefixes.\n  *\n  * ## Setting Providers\n  *\n  * Each provider in the {providers} list should be a function that returns\n  * a {AWS.Credentials} object, or a hardcoded credentials object. The function\n  * form allows for delayed execution of the credential construction.\n  *\n  * ## Resolving Credentials from a Chain\n  *\n  * Call {resolve} to return the first valid credential object that can be\n  * loaded by the provider chain.\n  *\n  * For example, to resolve a chain with a custom provider that checks a file\n  * on disk after the set of {defaultProviders}:\n  *\n  * ```javascript\n  * var diskProvider = new AWS.FileSystemCredentials('./creds.json');\n  * var chain = new AWS.CredentialProviderChain();\n  * chain.providers.push(diskProvider);\n  * chain.resolve();\n  * ```\n  *\n  * The above code will return the `diskProvider` object if the\n  * file contains credentials and the `defaultProviders` do not contain\n  * any credential settings.\n  *\n  * @!attribute providers\n  *   @return [Array<AWS.Credentials, Function>]\n  *     a list of credentials objects or functions that return credentials\n  *     objects. If the provider is a function, the function will be\n  *     executed lazily when the provider needs to be checked for valid\n  *     credentials. By default, this object will be set to the\n  *     {defaultProviders}.\n  *   @see defaultProviders\n  */\n AWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {\n\n   /**\n    * Creates a new CredentialProviderChain with a default set of providers\n    * specified by {defaultProviders}.\n    */\n   constructor: function CredentialProviderChain(providers) {\n     if (providers) {\n       this.providers = providers;\n     } else {\n       this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);\n     }\n     this.resolveCallbacks = [];\n   },\n\n   /**\n    * @!method  resolvePromise()\n    *   Returns a 'thenable' promise.\n    *   Resolves the provider chain by searching for the first set of\n    *   credentials in {providers}.\n    *\n    *   Two callbacks can be provided to the `then` method on the returned promise.\n    *   The first callback will be called if the promise is fulfilled, and the second\n    *   callback will be called if the promise is rejected.\n    *   @callback fulfilledCallback function(credentials)\n    *     Called if the promise is fulfilled and the provider resolves the chain\n    *     to a credentials object\n    *     @param credentials [AWS.Credentials] the credentials object resolved\n    *       by the provider chain.\n    *   @callback rejectedCallback function(error)\n    *     Called if the promise is rejected.\n    *     @param err [Error] the error object returned if no credentials are found.\n    *   @return [Promise] A promise that represents the state of the `resolve` method call.\n    *   @example Calling the `resolvePromise` method.\n    *     var promise = chain.resolvePromise();\n    *     promise.then(function(credentials) { ... }, function(err) { ... });\n    */\n\n   /**\n    * Resolves the provider chain by searching for the first set of\n    * credentials in {providers}.\n    *\n    * @callback callback function(err, credentials)\n    *   Called when the provider resolves the chain to a credentials object\n    *   or null if no credentials can be found.\n    *\n    *   @param err [Error] the error object returned if no credentials are\n    *     found.\n    *   @param credentials [AWS.Credentials] the credentials object resolved\n    *     by the provider chain.\n    * @return [AWS.CredentialProviderChain] the provider, for chaining.\n    */\n   resolve: function resolve(callback) {\n     var self = this;\n     if (self.providers.length === 0) {\n       callback(new Error('No providers'));\n       return self;\n     }\n\n     if (self.resolveCallbacks.push(callback) === 1) {\n       var index = 0;\n       var providers = self.providers.slice(0);\n\n       function resolveNext(err, creds) {\n         if ((!err && creds) || index === providers.length) {\n           AWS.util.arrayEach(self.resolveCallbacks, function (callback) {\n             callback(err, creds);\n           });\n           self.resolveCallbacks.length = 0;\n           return;\n         }\n\n         var provider = providers[index++];\n         if (typeof provider === 'function') {\n           creds = provider.call();\n         } else {\n           creds = provider;\n         }\n\n         if (creds.get) {\n           creds.get(function (getErr) {\n             resolveNext(getErr, getErr ? null : creds);\n           });\n         } else {\n           resolveNext(null, creds);\n         }\n       }\n\n       resolveNext();\n     }\n\n     return self;\n   }\n });\n\n /**\n  * The default set of providers used by a vanilla CredentialProviderChain.\n  *\n  * In the browser:\n  *\n  * ```javascript\n  * AWS.CredentialProviderChain.defaultProviders = []\n  * ```\n  *\n  * In Node.js:\n  *\n  * ```javascript\n  * AWS.CredentialProviderChain.defaultProviders = [\n  *   function () { return new AWS.EnvironmentCredentials('AWS'); },\n  *   function () { return new AWS.EnvironmentCredentials('AMAZON'); },\n  *   function () { return new AWS.SsoCredentials(); },\n  *   function () { return new AWS.SharedIniFileCredentials(); },\n  *   function () { return new AWS.ECSCredentials(); },\n  *   function () { return new AWS.ProcessCredentials(); },\n  *   function () { return new AWS.TokenFileWebIdentityCredentials(); },\n  *   function () { return new AWS.EC2MetadataCredentials() }\n  * ]\n  * ```\n  */\n AWS.CredentialProviderChain.defaultProviders = [];\n\n /**\n  * @api private\n  */\n AWS.CredentialProviderChain.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n   this.prototype.resolvePromise = AWS.util.promisifyMethod('resolve', PromiseDependency);\n };\n\n /**\n  * @api private\n  */\n AWS.CredentialProviderChain.deletePromisesFromClass = function deletePromisesFromClass() {\n   delete this.prototype.resolvePromise;\n };\n\n AWS.util.addPromises(AWS.CredentialProviderChain);\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}