System.register(["__unresolved_0", "__unresolved_1", "__unresolved_2", "__unresolved_3", "__unresolved_4", "__unresolved_5", "__unresolved_6", "__unresolved_7", "__unresolved_8"], function (_export, _context) {
  "use strict";

  var _cjsLoader, _req, _req0, _req1, _req2, _req3, _req4, _req5, _req6, _cjsExports, __cjsMetaURL;

  _export("default", void 0);

  return {
    setters: [function (_unresolved_) {
      _cjsLoader = _unresolved_.default;
    }, function (_unresolved_2) {
      _req = _unresolved_2.__cjsMetaURL;
    }, function (_unresolved_3) {
      _req0 = _unresolved_3.__cjsMetaURL;
    }, function (_unresolved_4) {
      _req1 = _unresolved_4.__cjsMetaURL;
    }, function (_unresolved_5) {
      _req2 = _unresolved_5.__cjsMetaURL;
    }, function (_unresolved_6) {
      _req3 = _unresolved_6.__cjsMetaURL;
    }, function (_unresolved_7) {
      _req4 = _unresolved_7.__cjsMetaURL;
    }, function (_unresolved_8) {
      _req5 = _unresolved_8.__cjsMetaURL;
    }, function (_unresolved_9) {
      _req6 = _unresolved_9.__cjsMetaURL;
    }],
    execute: function () {
      _export("__cjsMetaURL", __cjsMetaURL = _context.meta.url);

      _cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        // Generated by CoffeeScript 1.12.7
        (function () {
          var NodeType,
              XMLDTDAttList,
              XMLDTDElement,
              XMLDTDEntity,
              XMLDTDNotation,
              XMLDocType,
              XMLNamedNodeMap,
              XMLNode,
              isObject,
              extend = function extend(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
              this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          },
              hasProp = {}.hasOwnProperty;

          isObject = require('./Utility').isObject;
          XMLNode = require('./XMLNode');
          NodeType = require('./NodeType');
          XMLDTDAttList = require('./XMLDTDAttList');
          XMLDTDEntity = require('./XMLDTDEntity');
          XMLDTDElement = require('./XMLDTDElement');
          XMLDTDNotation = require('./XMLDTDNotation');
          XMLNamedNodeMap = require('./XMLNamedNodeMap');

          module.exports = XMLDocType = function (superClass) {
            extend(XMLDocType, superClass);

            function XMLDocType(parent, pubID, sysID) {
              var child, i, len, ref, ref1, ref2;

              XMLDocType.__super__.constructor.call(this, parent);

              this.type = NodeType.DocType;

              if (parent.children) {
                ref = parent.children;

                for (i = 0, len = ref.length; i < len; i++) {
                  child = ref[i];

                  if (child.type === NodeType.Element) {
                    this.name = child.name;
                    break;
                  }
                }
              }

              this.documentObject = parent;

              if (isObject(pubID)) {
                ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;
              }

              if (sysID == null) {
                ref2 = [pubID, sysID], sysID = ref2[0], pubID = ref2[1];
              }

              if (pubID != null) {
                this.pubID = this.stringify.dtdPubID(pubID);
              }

              if (sysID != null) {
                this.sysID = this.stringify.dtdSysID(sysID);
              }
            }

            Object.defineProperty(XMLDocType.prototype, 'entities', {
              get: function get() {
                var child, i, len, nodes, ref;
                nodes = {};
                ref = this.children;

                for (i = 0, len = ref.length; i < len; i++) {
                  child = ref[i];

                  if (child.type === NodeType.EntityDeclaration && !child.pe) {
                    nodes[child.name] = child;
                  }
                }

                return new XMLNamedNodeMap(nodes);
              }
            });
            Object.defineProperty(XMLDocType.prototype, 'notations', {
              get: function get() {
                var child, i, len, nodes, ref;
                nodes = {};
                ref = this.children;

                for (i = 0, len = ref.length; i < len; i++) {
                  child = ref[i];

                  if (child.type === NodeType.NotationDeclaration) {
                    nodes[child.name] = child;
                  }
                }

                return new XMLNamedNodeMap(nodes);
              }
            });
            Object.defineProperty(XMLDocType.prototype, 'publicId', {
              get: function get() {
                return this.pubID;
              }
            });
            Object.defineProperty(XMLDocType.prototype, 'systemId', {
              get: function get() {
                return this.sysID;
              }
            });
            Object.defineProperty(XMLDocType.prototype, 'internalSubset', {
              get: function get() {
                throw new Error("This DOM method is not implemented." + this.debugInfo());
              }
            });

            XMLDocType.prototype.element = function (name, value) {
              var child;
              child = new XMLDTDElement(this, name, value);
              this.children.push(child);
              return this;
            };

            XMLDocType.prototype.attList = function (elementName, attributeName, attributeType, defaultValueType, defaultValue) {
              var child;
              child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
              this.children.push(child);
              return this;
            };

            XMLDocType.prototype.entity = function (name, value) {
              var child;
              child = new XMLDTDEntity(this, false, name, value);
              this.children.push(child);
              return this;
            };

            XMLDocType.prototype.pEntity = function (name, value) {
              var child;
              child = new XMLDTDEntity(this, true, name, value);
              this.children.push(child);
              return this;
            };

            XMLDocType.prototype.notation = function (name, value) {
              var child;
              child = new XMLDTDNotation(this, name, value);
              this.children.push(child);
              return this;
            };

            XMLDocType.prototype.toString = function (options) {
              return this.options.writer.docType(this, this.options.writer.filterOptions(options));
            };

            XMLDocType.prototype.ele = function (name, value) {
              return this.element(name, value);
            };

            XMLDocType.prototype.att = function (elementName, attributeName, attributeType, defaultValueType, defaultValue) {
              return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
            };

            XMLDocType.prototype.ent = function (name, value) {
              return this.entity(name, value);
            };

            XMLDocType.prototype.pent = function (name, value) {
              return this.pEntity(name, value);
            };

            XMLDocType.prototype.not = function (name, value) {
              return this.notation(name, value);
            };

            XMLDocType.prototype.up = function () {
              return this.root() || this.documentObject;
            };

            XMLDocType.prototype.isEqualNode = function (node) {
              if (!XMLDocType.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
                return false;
              }

              if (node.name !== this.name) {
                return false;
              }

              if (node.publicId !== this.publicId) {
                return false;
              }

              if (node.systemId !== this.systemId) {
                return false;
              }

              return true;
            };

            return XMLDocType;
          }(XMLNode);
        }).call(this); // #endregion ORIGINAL CODE

        _export("default", _cjsExports = module.exports);
      }, () => ({
        './Utility': _req,
        './XMLNode': _req0,
        './NodeType': _req1,
        './XMLDTDAttList': _req2,
        './XMLDTDEntity': _req3,
        './XMLDTDElement': _req4,
        './XMLDTDNotation': _req5,
        './XMLNamedNodeMap': _req6
      }));
    }
  };
});
//# sourceMappingURL=6524018acd5167996510bf89f133a679ab651296.js.map