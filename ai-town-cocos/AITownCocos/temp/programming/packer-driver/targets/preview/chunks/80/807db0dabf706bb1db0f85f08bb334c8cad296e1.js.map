{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/credentials/ec2_metadata_credentials.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","AWS","EC2MetadataCredentials","util","inherit","Credentials","constructor","options","call","copy","merge","maxRetries","defaultMaxRetries","httpOptions","timeout","defaultTimeout","connectTimeout","defaultConnectTimeout","metadataService","MetadataService","logger","config","originalExpiration","undefined","refresh","callback","coalesceRefresh","fn","load","self","loadCredentials","err","creds","hasLoadedCredentials","extendExpirationIfExpired","setCredentials","AccessKeyId","secretAccessKey","needsRefresh","expireTime","expired","nextTimeout","Math","floor","random","currentTime","date","getDate","getTime","Date","warn","Expiration","metadata","accessKeyId","SecretAccessKey","sessionToken","Token","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from '../metadata_service';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n require('../metadata_service');\n\n /**\n  * Represents credentials received from the metadata service on an EC2 instance.\n  *\n  * By default, this class will connect to the metadata service using\n  * {AWS.MetadataService} and attempt to load any available credentials. If it\n  * can connect, and credentials are available, these will be used with zero\n  * configuration.\n  *\n  * This credentials class will by default timeout after 1 second of inactivity\n  * and retry 3 times.\n  * If your requests to the EC2 metadata service are timing out, you can increase\n  * these values by configuring them directly:\n  *\n  * ```javascript\n  * AWS.config.credentials = new AWS.EC2MetadataCredentials({\n  *   httpOptions: { timeout: 5000 }, // 5 second timeout\n  *   maxRetries: 10, // retry 10 times\n  *   retryDelayOptions: { base: 200 }, // see AWS.Config for information\n  *   logger: console // see AWS.Config for information\n  *   ec2MetadataV1Disabled: false // whether to block IMDS v1 fallback.\n  * });\n  * ```\n  *\n  * If your requests are timing out in connecting to the metadata service, such\n  * as when testing on a development machine, you can use the connectTimeout\n  * option, specified in milliseconds, which also defaults to 1 second.\n  *\n  * If the requests failed or returns expired credentials, it will\n  * extend the expiration of current credential, with a warning message. For more\n  * information, please go to:\n  * https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html\n  *\n  * @!attribute originalExpiration\n  *   @return [Date] The optional original expiration of the current credential.\n  *   In case of AWS outage, the EC2 metadata will extend expiration of the\n  *   existing credential.\n  *\n  * @see AWS.Config.retryDelayOptions\n  * @see AWS.Config.logger\n  *\n  * @!macro nobrowser\n  */\n AWS.EC2MetadataCredentials = AWS.util.inherit(AWS.Credentials, {\n   constructor: function EC2MetadataCredentials(options) {\n     AWS.Credentials.call(this);\n\n     options = options ? AWS.util.copy(options) : {};\n     options = AWS.util.merge(\n       {maxRetries: this.defaultMaxRetries}, options);\n     if (!options.httpOptions) options.httpOptions = {};\n     options.httpOptions = AWS.util.merge(\n       {timeout: this.defaultTimeout,\n         connectTimeout: this.defaultConnectTimeout},\n        options.httpOptions);\n\n     this.metadataService = new AWS.MetadataService(options);\n     this.logger = options.logger || AWS.config && AWS.config.logger;\n   },\n\n   /**\n    * @api private\n    */\n   defaultTimeout: 1000,\n\n    /**\n    * @api private\n    */\n   defaultConnectTimeout: 1000,\n\n   /**\n    * @api private\n    */\n   defaultMaxRetries: 3,\n\n   /**\n    * The original expiration of the current credential. In case of AWS\n    * outage, the EC2 metadata will extend expiration of the existing\n    * credential.\n    */\n   originalExpiration: undefined,\n\n   /**\n    * Loads the credentials from the instance metadata service\n    *\n    * @callback callback function(err)\n    *   Called when the instance metadata service responds (or fails). When\n    *   this callback is called with no error, it means that the credentials\n    *   information has been loaded into the object (as the `accessKeyId`,\n    *   `secretAccessKey`, and `sessionToken` properties).\n    *   @param err [Error] if an error occurred, this value will be filled\n    * @see get\n    */\n   refresh: function refresh(callback) {\n     this.coalesceRefresh(callback || AWS.util.fn.callback);\n   },\n\n   /**\n    * @api private\n    * @param callback\n    */\n   load: function load(callback) {\n     var self = this;\n     self.metadataService.loadCredentials(function(err, creds) {\n       if (err) {\n         if (self.hasLoadedCredentials()) {\n           self.extendExpirationIfExpired();\n           callback();\n         } else {\n           callback(err);\n         }\n       } else {\n         self.setCredentials(creds);\n         self.extendExpirationIfExpired();\n         callback();\n       }\n     });\n   },\n\n   /**\n    * Whether this credential has been loaded.\n    * @api private\n    */\n   hasLoadedCredentials: function hasLoadedCredentials() {\n     return this.AccessKeyId && this.secretAccessKey;\n   },\n\n   /**\n    * if expired, extend the expiration by 15 minutes base plus a jitter of 5\n    * minutes range.\n    * @api private\n    */\n   extendExpirationIfExpired: function extendExpirationIfExpired() {\n     if (this.needsRefresh()) {\n       this.originalExpiration = this.originalExpiration || this.expireTime;\n       this.expired = false;\n       var nextTimeout = 15 * 60 + Math.floor(Math.random() * 5 * 60);\n       var currentTime = AWS.util.date.getDate().getTime();\n       this.expireTime = new Date(currentTime + nextTimeout * 1000);\n       // TODO: add doc link;\n       this.logger.warn('Attempting credential expiration extension due to a '\n           + 'credential service availability issue. A refresh of these '\n           + 'credentials will be attempted again at ' + this.expireTime\n           + '\\nFor more information, please visit: https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html');\n     }\n   },\n\n   /**\n    * Update the credential with new credential responded from EC2 metadata\n    * service.\n    * @api private\n    */\n   setCredentials: function setCredentials(creds) {\n     var currentTime = AWS.util.date.getDate().getTime();\n     var expireTime = new Date(creds.Expiration);\n     this.expired = currentTime >= expireTime ? true : false;\n     this.metadata = creds;\n     this.accessKeyId = creds.AccessKeyId;\n     this.secretAccessKey = creds.SecretAccessKey;\n     this.sessionToken = creds.Token;\n     this.expireTime = expireTime;\n   }\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n  '../metadata_service': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}