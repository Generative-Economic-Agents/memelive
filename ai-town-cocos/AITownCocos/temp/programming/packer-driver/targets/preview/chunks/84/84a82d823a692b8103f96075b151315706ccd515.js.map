{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/_baseIsEqualDeep.js"],"names":["baseIsEqualDeep","object","other","bitmask","customizer","equalFunc","stack","objIsArr","isArray","othIsArr","objTag","arrayTag","getTag","othTag","argsTag","objectTag","objIsObj","othIsObj","isSameTag","isBuffer","Stack","isTypedArray","equalArrays","equalByTag","COMPARE_PARTIAL_FLAG","objIsWrapped","hasOwnProperty","call","othIsWrapped","objUnwrapped","value","othUnwrapped","equalObjects","objectProto","Object","prototype"],"mappings":"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","sourcesContent":["import Stack from './_Stack.js';\nimport equalArrays from './_equalArrays.js';\nimport equalByTag from './_equalByTag.js';\nimport equalObjects from './_equalObjects.js';\nimport getTag from './_getTag.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nexport default baseIsEqualDeep;\n"]}