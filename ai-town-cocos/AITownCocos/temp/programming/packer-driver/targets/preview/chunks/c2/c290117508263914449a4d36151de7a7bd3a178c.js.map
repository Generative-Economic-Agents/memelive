{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/sshpk/lib/formats/ssh-private.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","_req4","_req5","_req6","_req7","_req8","_req9","_req10","_req11","_req12","url","define","exports","require","module","__filename","__dirname","read","readSSHPrivate","write","assert","asn1","Buffer","algs","utils","crypto","Key","PrivateKey","pem","rfc4253","SSHBuffer","errors","bcrypt","buf","options","MAGIC","type","buffer","magic","readCString","strictEqual","cipher","readString","kdf","kdfOpts","readBuffer","nkeys","readInt","Error","pubKey","ok","atEnd","privKeyBlob","kdfOptsBuf","salt","rounds","cinf","opensshCipherInfo","undefined","passphrase","from","isBuffer","KeyEncryptedError","filename","pass","Uint8Array","salti","out","keySize","blockSize","res","pbkdf","length","ckey","slice","iv","cipherStream","createDecipheriv","opensslName","setAutoPadding","chunk","chunks","once","e","toString","indexOf","end","push","concat","checkInt1","checkInt2","ret","key","readInternal","remainder","skip","consumed","comment","isPrivateKey","toPublic","kdfopts","alloc","optionalString","privBuf","checkInt","randomBytes","readUInt32BE","writeInt","toBuffer","writeString","n","_offset","writeChar","kdfssh","writeBuffer","createCipheriv","writeCString","header","tmp","len","o","i","limit","_cjsExports","_read","_readSSHPrivate","_write"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'assert-plus';\nimport { __cjsMetaURL as _req0} from 'asn1';\nimport { __cjsMetaURL as _req1} from 'safer-buffer';\nimport { __cjsMetaURL as _req2} from '../algs';\nimport { __cjsMetaURL as _req3} from '../utils';\nimport { __cjsMetaURL as _req4} from 'crypto';\nimport { __cjsMetaURL as _req5} from '../key';\nimport { __cjsMetaURL as _req6} from '../private-key';\nimport { __cjsMetaURL as _req7} from './pem';\nimport { __cjsMetaURL as _req8} from './rfc4253';\nimport { __cjsMetaURL as _req9} from '../ssh-buffer';\nimport { __cjsMetaURL as _req10} from '../errors';\nimport { __cjsMetaURL as _req11} from 'bcrypt-pbkdf';\nimport { __cjsMetaURL as _req12} from 'bcrypt-pbkdf';\nlet _cjsExports;\nlet _read;\nlet _readSSHPrivate;\nlet _write;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n // Copyright 2015 Joyent, Inc.\n\n module.exports = {\n \tread: read,\n \treadSSHPrivate: readSSHPrivate,\n \twrite: write\n };\n\n var assert = require('assert-plus');\n var asn1 = require('asn1');\n var Buffer = require('safer-buffer').Buffer;\n var algs = require('../algs');\n var utils = require('../utils');\n var crypto = require('crypto');\n\n var Key = require('../key');\n var PrivateKey = require('../private-key');\n var pem = require('./pem');\n var rfc4253 = require('./rfc4253');\n var SSHBuffer = require('../ssh-buffer');\n var errors = require('../errors');\n\n var bcrypt;\n\n function read(buf, options) {\n \treturn (pem.read(buf, options));\n }\n\n var MAGIC = 'openssh-key-v1';\n\n function readSSHPrivate(type, buf, options) {\n \tbuf = new SSHBuffer({buffer: buf});\n\n \tvar magic = buf.readCString();\n \tassert.strictEqual(magic, MAGIC, 'bad magic string');\n\n \tvar cipher = buf.readString();\n \tvar kdf = buf.readString();\n \tvar kdfOpts = buf.readBuffer();\n\n \tvar nkeys = buf.readInt();\n \tif (nkeys !== 1) {\n \t\tthrow (new Error('OpenSSH-format key file contains ' +\n \t\t    'multiple keys: this is unsupported.'));\n \t}\n\n \tvar pubKey = buf.readBuffer();\n\n \tif (type === 'public') {\n \t\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n \t\treturn (rfc4253.read(pubKey));\n \t}\n\n \tvar privKeyBlob = buf.readBuffer();\n \tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\n \tvar kdfOptsBuf = new SSHBuffer({ buffer: kdfOpts });\n \tswitch (kdf) {\n \tcase 'none':\n \t\tif (cipher !== 'none') {\n \t\t\tthrow (new Error('OpenSSH-format key uses KDF \"none\" ' +\n \t\t\t     'but specifies a cipher other than \"none\"'));\n \t\t}\n \t\tbreak;\n \tcase 'bcrypt':\n \t\tvar salt = kdfOptsBuf.readBuffer();\n \t\tvar rounds = kdfOptsBuf.readInt();\n \t\tvar cinf = utils.opensshCipherInfo(cipher);\n \t\tif (bcrypt === undefined) {\n \t\t\tbcrypt = require('bcrypt-pbkdf');\n \t\t}\n\n \t\tif (typeof (options.passphrase) === 'string') {\n \t\t\toptions.passphrase = Buffer.from(options.passphrase,\n \t\t\t    'utf-8');\n \t\t}\n \t\tif (!Buffer.isBuffer(options.passphrase)) {\n \t\t\tthrow (new errors.KeyEncryptedError(\n \t\t\t    options.filename, 'OpenSSH'));\n \t\t}\n\n \t\tvar pass = new Uint8Array(options.passphrase);\n \t\tvar salti = new Uint8Array(salt);\n \t\t/* Use the pbkdf to derive both the key and the IV. */\n \t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n \t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n \t\t    out, out.length, rounds);\n \t\tif (res !== 0) {\n \t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n \t\t\t    'failure, parameters invalid'));\n \t\t}\n \t\tout = Buffer.from(out);\n \t\tvar ckey = out.slice(0, cinf.keySize);\n \t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n \t\tvar cipherStream = crypto.createDecipheriv(cinf.opensslName,\n \t\t    ckey, iv);\n \t\tcipherStream.setAutoPadding(false);\n \t\tvar chunk, chunks = [];\n \t\tcipherStream.once('error', function (e) {\n \t\t\tif (e.toString().indexOf('bad decrypt') !== -1) {\n \t\t\t\tthrow (new Error('Incorrect passphrase ' +\n \t\t\t\t    'supplied, could not decrypt key'));\n \t\t\t}\n \t\t\tthrow (e);\n \t\t});\n \t\tcipherStream.write(privKeyBlob);\n \t\tcipherStream.end();\n \t\twhile ((chunk = cipherStream.read()) !== null)\n \t\t\tchunks.push(chunk);\n \t\tprivKeyBlob = Buffer.concat(chunks);\n \t\tbreak;\n \tdefault:\n \t\tthrow (new Error(\n \t\t    'OpenSSH-format key uses unknown KDF \"' + kdf + '\"'));\n \t}\n\n \tbuf = new SSHBuffer({buffer: privKeyBlob});\n\n \tvar checkInt1 = buf.readInt();\n \tvar checkInt2 = buf.readInt();\n \tif (checkInt1 !== checkInt2) {\n \t\tthrow (new Error('Incorrect passphrase supplied, could not ' +\n \t\t    'decrypt key'));\n \t}\n\n \tvar ret = {};\n \tvar key = rfc4253.readInternal(ret, 'private', buf.remainder());\n\n \tbuf.skip(ret.consumed);\n\n \tvar comment = buf.readString();\n \tkey.comment = comment;\n\n \treturn (key);\n }\n\n function write(key, options) {\n \tvar pubKey;\n \tif (PrivateKey.isPrivateKey(key))\n \t\tpubKey = key.toPublic();\n \telse\n \t\tpubKey = key;\n\n \tvar cipher = 'none';\n \tvar kdf = 'none';\n \tvar kdfopts = Buffer.alloc(0);\n \tvar cinf = { blockSize: 8 };\n \tvar passphrase;\n \tif (options !== undefined) {\n \t\tpassphrase = options.passphrase;\n \t\tif (typeof (passphrase) === 'string')\n \t\t\tpassphrase = Buffer.from(passphrase, 'utf-8');\n \t\tif (passphrase !== undefined) {\n \t\t\tassert.buffer(passphrase, 'options.passphrase');\n \t\t\tassert.optionalString(options.cipher, 'options.cipher');\n \t\t\tcipher = options.cipher;\n \t\t\tif (cipher === undefined)\n \t\t\t\tcipher = 'aes128-ctr';\n \t\t\tcinf = utils.opensshCipherInfo(cipher);\n \t\t\tkdf = 'bcrypt';\n \t\t}\n \t}\n\n \tvar privBuf;\n \tif (PrivateKey.isPrivateKey(key)) {\n \t\tprivBuf = new SSHBuffer({});\n \t\tvar checkInt = crypto.randomBytes(4).readUInt32BE(0);\n \t\tprivBuf.writeInt(checkInt);\n \t\tprivBuf.writeInt(checkInt);\n \t\tprivBuf.write(key.toBuffer('rfc4253'));\n \t\tprivBuf.writeString(key.comment || '');\n\n \t\tvar n = 1;\n \t\twhile (privBuf._offset % cinf.blockSize !== 0)\n \t\t\tprivBuf.writeChar(n++);\n \t\tprivBuf = privBuf.toBuffer();\n \t}\n\n \tswitch (kdf) {\n \tcase 'none':\n \t\tbreak;\n \tcase 'bcrypt':\n \t\tvar salt = crypto.randomBytes(16);\n \t\tvar rounds = 16;\n \t\tvar kdfssh = new SSHBuffer({});\n \t\tkdfssh.writeBuffer(salt);\n \t\tkdfssh.writeInt(rounds);\n \t\tkdfopts = kdfssh.toBuffer();\n\n \t\tif (bcrypt === undefined) {\n \t\t\tbcrypt = require('bcrypt-pbkdf');\n \t\t}\n \t\tvar pass = new Uint8Array(passphrase);\n \t\tvar salti = new Uint8Array(salt);\n \t\t/* Use the pbkdf to derive both the key and the IV. */\n \t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n \t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n \t\t    out, out.length, rounds);\n \t\tif (res !== 0) {\n \t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n \t\t\t    'failure, parameters invalid'));\n \t\t}\n \t\tout = Buffer.from(out);\n \t\tvar ckey = out.slice(0, cinf.keySize);\n \t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n\n \t\tvar cipherStream = crypto.createCipheriv(cinf.opensslName,\n \t\t    ckey, iv);\n \t\tcipherStream.setAutoPadding(false);\n \t\tvar chunk, chunks = [];\n \t\tcipherStream.once('error', function (e) {\n \t\t\tthrow (e);\n \t\t});\n \t\tcipherStream.write(privBuf);\n \t\tcipherStream.end();\n \t\twhile ((chunk = cipherStream.read()) !== null)\n \t\t\tchunks.push(chunk);\n \t\tprivBuf = Buffer.concat(chunks);\n \t\tbreak;\n \tdefault:\n \t\tthrow (new Error('Unsupported kdf ' + kdf));\n \t}\n\n \tvar buf = new SSHBuffer({});\n\n \tbuf.writeCString(MAGIC);\n \tbuf.writeString(cipher);\t/* cipher */\n \tbuf.writeString(kdf);\t\t/* kdf */\n \tbuf.writeBuffer(kdfopts);\t/* kdfoptions */\n\n \tbuf.writeInt(1);\t\t/* nkeys */\n \tbuf.writeBuffer(pubKey.toBuffer('rfc4253'));\n\n \tif (privBuf)\n \t\tbuf.writeBuffer(privBuf);\n\n \tbuf = buf.toBuffer();\n\n \tvar header;\n \tif (PrivateKey.isPrivateKey(key))\n \t\theader = 'OPENSSH PRIVATE KEY';\n \telse\n \t\theader = 'OPENSSH PUBLIC KEY';\n\n \tvar tmp = buf.toString('base64');\n \tvar len = tmp.length + (tmp.length / 70) +\n \t    18 + 16 + header.length*2 + 10;\n \tbuf = Buffer.alloc(len);\n \tvar o = 0;\n \to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n \tfor (var i = 0; i < tmp.length; ) {\n \t\tvar limit = i + 70;\n \t\tif (limit > tmp.length)\n \t\t\tlimit = tmp.length;\n \t\to += buf.write(tmp.slice(i, limit), o);\n \t\tbuf[o++] = 10;\n \t\ti = limit;\n \t}\n \to += buf.write('-----END ' + header + '-----\\n', o);\n\n \treturn (buf.slice(0, o));\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_read = module.exports.read;\n_readSSHPrivate = module.exports.readSSHPrivate;\n_write = module.exports.write;\n\n}, () => ({\n  'assert-plus': _req,\n  'asn1': _req0,\n  'safer-buffer': _req1,\n  '../algs': _req2,\n  '../utils': _req3,\n  'crypto': _req4,\n  '../key': _req5,\n  '../private-key': _req6,\n  './pem': _req7,\n  './rfc4253': _req8,\n  '../ssh-buffer': _req9,\n  '../errors': _req10,\n  'bcrypt-pbkdf': _req11,\n  'bcrypt-pbkdf': _req12,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}