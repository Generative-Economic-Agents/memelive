{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/lodash-es/_composeArgs.js"],"names":["composeArgs","args","partials","holders","isCurried","argsIndex","argsLength","length","holdersLength","leftIndex","leftLength","rangeLength","nativeMax","result","Array","isUncurried","Math","max"],"mappings":";;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,WAAT,CAAqBC,IAArB,EAA2BC,QAA3B,EAAqCC,OAArC,EAA8CC,SAA9C,EAAyD;AACvD,QAAIC,SAAS,GAAG,CAAC,CAAjB;AAAA,QACIC,UAAU,GAAGL,IAAI,CAACM,MADtB;AAAA,QAEIC,aAAa,GAAGL,OAAO,CAACI,MAF5B;AAAA,QAGIE,SAAS,GAAG,CAAC,CAHjB;AAAA,QAIIC,UAAU,GAAGR,QAAQ,CAACK,MAJ1B;AAAA,QAKII,WAAW,GAAGC,SAAS,CAACN,UAAU,GAAGE,aAAd,EAA6B,CAA7B,CAL3B;AAAA,QAMIK,MAAM,GAAGC,KAAK,CAACJ,UAAU,GAAGC,WAAd,CANlB;AAAA,QAOII,WAAW,GAAG,CAACX,SAPnB;;AASA,WAAO,EAAEK,SAAF,GAAcC,UAArB,EAAiC;AAC/BG,MAAAA,MAAM,CAACJ,SAAD,CAAN,GAAoBP,QAAQ,CAACO,SAAD,CAA5B;AACD;;AACD,WAAO,EAAEJ,SAAF,GAAcG,aAArB,EAAoC;AAClC,UAAIO,WAAW,IAAIV,SAAS,GAAGC,UAA/B,EAA2C;AACzCO,QAAAA,MAAM,CAACV,OAAO,CAACE,SAAD,CAAR,CAAN,GAA6BJ,IAAI,CAACI,SAAD,CAAjC;AACD;AACF;;AACD,WAAOM,WAAW,EAAlB,EAAsB;AACpBE,MAAAA,MAAM,CAACJ,SAAS,EAAV,CAAN,GAAsBR,IAAI,CAACI,SAAS,EAAV,CAA1B;AACD;;AACD,WAAOQ,MAAP;AACD;;;;;AApCD;AACID,MAAAA,S,GAAYI,IAAI,CAACC,G;;yBAqCNjB,W","sourcesContent":["/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates an array that is the composition of partially applied arguments,\n * placeholders, and provided arguments into a single array of arguments.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to prepend to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgs(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersLength = holders.length,\n      leftIndex = -1,\n      leftLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(leftLength + rangeLength),\n      isUncurried = !isCurried;\n\n  while (++leftIndex < leftLength) {\n    result[leftIndex] = partials[leftIndex];\n  }\n  while (++argsIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[holders[argsIndex]] = args[argsIndex];\n    }\n  }\n  while (rangeLength--) {\n    result[leftIndex++] = args[argsIndex++];\n  }\n  return result;\n}\n\nexport default composeArgs;\n"]}