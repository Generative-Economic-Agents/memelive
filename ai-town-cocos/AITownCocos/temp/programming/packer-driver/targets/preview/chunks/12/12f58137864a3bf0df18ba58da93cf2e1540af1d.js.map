{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/http.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","AWS","inherit","util","Endpoint","constructor","endpoint","config","hideProperties","Error","copy","match","useSSL","sslEnabled","undefined","update","urlParse","port","parseInt","protocol","HttpRequest","region","method","path","headers","body","_userAgent","setUserAgent","getUserAgentHeaderName","userAgent","prefix","isBrowser","appendToUserAgent","agentPartial","getUserAgent","pathname","split","search","query","queryStringParse","queryParamsToString","updateEndpoint","endpointStr","newEndpoint","host","HttpResponse","statusCode","streaming","stream","createUnbufferedStream","HttpClient","getInstance","singleton","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './core';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('./core');\n var inherit = AWS.util.inherit;\n\n /**\n  * The endpoint that a service will talk to, for example,\n  * `'https://ec2.ap-southeast-1.amazonaws.com'`. If\n  * you need to override an endpoint for a service, you can\n  * set the endpoint on a service by passing the endpoint\n  * object with the `endpoint` option key:\n  *\n  * ```javascript\n  * var ep = new AWS.Endpoint('awsproxy.example.com');\n  * var s3 = new AWS.S3({endpoint: ep});\n  * s3.service.endpoint.hostname == 'awsproxy.example.com'\n  * ```\n  *\n  * Note that if you do not specify a protocol, the protocol will\n  * be selected based on your current {AWS.config} configuration.\n  *\n  * @!attribute protocol\n  *   @return [String] the protocol (http or https) of the endpoint\n  *     URL\n  * @!attribute hostname\n  *   @return [String] the host portion of the endpoint, e.g.,\n  *     example.com\n  * @!attribute host\n  *   @return [String] the host portion of the endpoint including\n  *     the port, e.g., example.com:80\n  * @!attribute port\n  *   @return [Integer] the port of the endpoint\n  * @!attribute href\n  *   @return [String] the full URL of the endpoint\n  */\n AWS.Endpoint = inherit({\n\n   /**\n    * @overload Endpoint(endpoint)\n    *   Constructs a new endpoint given an endpoint URL. If the\n    *   URL omits a protocol (http or https), the default protocol\n    *   set in the global {AWS.config} will be used.\n    *   @param endpoint [String] the URL to construct an endpoint from\n    */\n   constructor: function Endpoint(endpoint, config) {\n     AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);\n\n     if (typeof endpoint === 'undefined' || endpoint === null) {\n       throw new Error('Invalid endpoint: ' + endpoint);\n     } else if (typeof endpoint !== 'string') {\n       return AWS.util.copy(endpoint);\n     }\n\n     if (!endpoint.match(/^http/)) {\n       var useSSL = config && config.sslEnabled !== undefined ?\n         config.sslEnabled : AWS.config.sslEnabled;\n       endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;\n     }\n\n     AWS.util.update(this, AWS.util.urlParse(endpoint));\n\n     // Ensure the port property is set as an integer\n     if (this.port) {\n       this.port = parseInt(this.port, 10);\n     } else {\n       this.port = this.protocol === 'https:' ? 443 : 80;\n     }\n   }\n\n });\n\n /**\n  * The low level HTTP request object, encapsulating all HTTP header\n  * and body data sent by a service request.\n  *\n  * @!attribute method\n  *   @return [String] the HTTP method of the request\n  * @!attribute path\n  *   @return [String] the path portion of the URI, e.g.,\n  *     \"/list/?start=5&num=10\"\n  * @!attribute headers\n  *   @return [map<String,String>]\n  *     a map of header keys and their respective values\n  * @!attribute body\n  *   @return [String] the request body payload\n  * @!attribute endpoint\n  *   @return [AWS.Endpoint] the endpoint for the request\n  * @!attribute region\n  *   @api private\n  *   @return [String] the region, for signing purposes only.\n  */\n AWS.HttpRequest = inherit({\n\n   /**\n    * @api private\n    */\n   constructor: function HttpRequest(endpoint, region) {\n     endpoint = new AWS.Endpoint(endpoint);\n     this.method = 'POST';\n     this.path = endpoint.path || '/';\n     this.headers = {};\n     this.body = '';\n     this.endpoint = endpoint;\n     this.region = region;\n     this._userAgent = '';\n     this.setUserAgent();\n   },\n\n   /**\n    * @api private\n    */\n   setUserAgent: function setUserAgent() {\n     this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS.util.userAgent();\n   },\n\n   getUserAgentHeaderName: function getUserAgentHeaderName() {\n     var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';\n     return prefix + 'User-Agent';\n   },\n\n   /**\n    * @api private\n    */\n   appendToUserAgent: function appendToUserAgent(agentPartial) {\n     if (typeof agentPartial === 'string' && agentPartial) {\n       this._userAgent += ' ' + agentPartial;\n     }\n     this.headers[this.getUserAgentHeaderName()] = this._userAgent;\n   },\n\n   /**\n    * @api private\n    */\n   getUserAgent: function getUserAgent() {\n     return this._userAgent;\n   },\n\n   /**\n    * @return [String] the part of the {path} excluding the\n    *   query string\n    */\n   pathname: function pathname() {\n     return this.path.split('?', 1)[0];\n   },\n\n   /**\n    * @return [String] the query string portion of the {path}\n    */\n   search: function search() {\n     var query = this.path.split('?', 2)[1];\n     if (query) {\n       query = AWS.util.queryStringParse(query);\n       return AWS.util.queryParamsToString(query);\n     }\n     return '';\n   },\n\n   /**\n    * @api private\n    * update httpRequest endpoint with endpoint string\n    */\n   updateEndpoint: function updateEndpoint(endpointStr) {\n     var newEndpoint = new AWS.Endpoint(endpointStr);\n     this.endpoint = newEndpoint;\n     this.path = newEndpoint.path || '/';\n     if (this.headers['Host']) {\n       this.headers['Host'] = newEndpoint.host;\n     }\n   }\n });\n\n /**\n  * The low level HTTP response object, encapsulating all HTTP header\n  * and body data returned from the request.\n  *\n  * @!attribute statusCode\n  *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)\n  * @!attribute headers\n  *   @return [map<String,String>]\n  *      a map of response header keys and their respective values\n  * @!attribute body\n  *   @return [String] the response body payload\n  * @!attribute [r] streaming\n  *   @return [Boolean] whether this response is being streamed at a low-level.\n  *     Defaults to `false` (buffered reads). Do not modify this manually, use\n  *     {createUnbufferedStream} to convert the stream to unbuffered mode\n  *     instead.\n  */\n AWS.HttpResponse = inherit({\n\n   /**\n    * @api private\n    */\n   constructor: function HttpResponse() {\n     this.statusCode = undefined;\n     this.headers = {};\n     this.body = undefined;\n     this.streaming = false;\n     this.stream = null;\n   },\n\n   /**\n    * Disables buffering on the HTTP response and returns the stream for reading.\n    * @return [Stream, XMLHttpRequest, null] the underlying stream object.\n    *   Use this object to directly read data off of the stream.\n    * @note This object is only available after the {AWS.Request~httpHeaders}\n    *   event has fired. This method must be called prior to\n    *   {AWS.Request~httpData}.\n    * @example Taking control of a stream\n    *   request.on('httpHeaders', function(statusCode, headers) {\n    *     if (statusCode < 300) {\n    *       if (headers.etag === 'xyz') {\n    *         // pipe the stream, disabling buffering\n    *         var stream = this.response.httpResponse.createUnbufferedStream();\n    *         stream.pipe(process.stdout);\n    *       } else { // abort this request and set a better error message\n    *         this.abort();\n    *         this.response.error = new Error('Invalid ETag');\n    *       }\n    *     }\n    *   }).send(console.log);\n    */\n   createUnbufferedStream: function createUnbufferedStream() {\n     this.streaming = true;\n     return this.stream;\n   }\n });\n\n\n AWS.HttpClient = inherit({});\n\n /**\n  * @api private\n  */\n AWS.HttpClient.getInstance = function getInstance() {\n   if (this.singleton === undefined) {\n     this.singleton = new this();\n   }\n   return this.singleton;\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './core': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}