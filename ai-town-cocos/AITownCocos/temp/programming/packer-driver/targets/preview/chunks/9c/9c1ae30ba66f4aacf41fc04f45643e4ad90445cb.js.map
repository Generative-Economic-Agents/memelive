{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/lodash-es/_createPartial.js"],"names":["createPartial","func","bitmask","thisArg","partials","isBind","WRAP_BIND_FLAG","Ctor","createCtor","wrapper","argsIndex","argsLength","arguments","length","leftIndex","leftLength","args","Array","fn","root","apply"],"mappings":";;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsCC,OAAtC,EAA+CC,QAA/C,EAAyD;AACvD,QAAIC,MAAM,GAAGH,OAAO,GAAGI,cAAvB;AAAA,QACIC,IAAI,GAAGC,UAAU,CAACP,IAAD,CADrB;;AAGA,aAASQ,OAAT,GAAmB;AACjB,UAAIC,SAAS,GAAG,CAAC,CAAjB;AAAA,UACIC,UAAU,GAAGC,SAAS,CAACC,MAD3B;AAAA,UAEIC,SAAS,GAAG,CAAC,CAFjB;AAAA,UAGIC,UAAU,GAAGX,QAAQ,CAACS,MAH1B;AAAA,UAIIG,IAAI,GAAGC,KAAK,CAACF,UAAU,GAAGJ,UAAd,CAJhB;AAAA,UAKIO,EAAE,GAAI,QAAQ,SAASC,IAAjB,IAAyB,gBAAgBV,OAA1C,GAAqDF,IAArD,GAA4DN,IALrE;;AAOA,aAAO,EAAEa,SAAF,GAAcC,UAArB,EAAiC;AAC/BC,QAAAA,IAAI,CAACF,SAAD,CAAJ,GAAkBV,QAAQ,CAACU,SAAD,CAA1B;AACD;;AACD,aAAOH,UAAU,EAAjB,EAAqB;AACnBK,QAAAA,IAAI,CAACF,SAAS,EAAV,CAAJ,GAAoBF,SAAS,CAAC,EAAEF,SAAH,CAA7B;AACD;;AACD,aAAOU,KAAK,CAACF,EAAD,EAAKb,MAAM,GAAGF,OAAH,GAAa,IAAxB,EAA8Ba,IAA9B,CAAZ;AACD;;AACD,WAAOP,OAAP;AACD;;;;AAxCMW,MAAAA,K;;AACAZ,MAAAA,U;;AACAW,MAAAA,I;;;AAEP;AACIb,MAAAA,c,GAAiB,C;;yBAqCNN,a","sourcesContent":["import apply from './_apply.js';\nimport createCtor from './_createCtor.js';\nimport root from './_root.js';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1;\n\n/**\n * Creates a function that wraps `func` to invoke it with the `this` binding\n * of `thisArg` and `partials` prepended to the arguments it receives.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} partials The arguments to prepend to those provided to\n *  the new function.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createPartial(func, bitmask, thisArg, partials) {\n  var isBind = bitmask & WRAP_BIND_FLAG,\n      Ctor = createCtor(func);\n\n  function wrapper() {\n    var argsIndex = -1,\n        argsLength = arguments.length,\n        leftIndex = -1,\n        leftLength = partials.length,\n        args = Array(leftLength + argsLength),\n        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n    while (++leftIndex < leftLength) {\n      args[leftIndex] = partials[leftIndex];\n    }\n    while (argsLength--) {\n      args[leftIndex++] = arguments[++argsIndex];\n    }\n    return apply(fn, isBind ? thisArg : this, args);\n  }\n  return wrapper;\n}\n\nexport default createPartial;\n"]}