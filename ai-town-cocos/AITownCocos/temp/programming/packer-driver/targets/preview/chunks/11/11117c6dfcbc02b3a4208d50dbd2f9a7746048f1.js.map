{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/s3/managed_upload.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","AWS","byteLength","util","string","Buffer","S3","ManagedUpload","inherit","constructor","options","self","SequentialExecutor","call","body","sliceFn","callback","parts","completeInfo","fillQueue","Error","configure","partSize","minPartSize","queueSize","leavePartsOnError","tags","Array","isArray","service","bindServiceObject","params","validateBody","adjustTotalBytes","maxTotalParts","send","failed","err","runFill","fillBuffer","isNode","Stream","stream","fillStream","partBuffers","on","cleanup","isDoneChunking","numParts","totalPartNumbers","doneParts","finishMultiPart","abort","singlePart","error","code","retryable","config","Body","buffer","toBuffer","arraySliceFn","copy","signatureVersion","getSignatureVersion","__super__","merge","Object","defineProperty","get","_originalConfig","enumerable","configurable","totalBytes","e","newPartSize","Math","ceil","undefined","partPos","totalChunkedBytes","totalUploadedBytes","activeParts","multipartReq","partBufferLength","bodyLen","nextChunk","endPos","min","buf","read","push","length","pbuf","concat","rest","slice","isDoneSending","chunk","partNumber","Tagging","getTaggingHeader","req","putObject","_managedUpload","progress","finishSinglePart","ContentMD5","ETag","UploadId","createMultipartUpload","resp","data","queueChunks","uploadPart","kvPairStrings","i","uriEscape","Key","Value","join","partParams","ContentLength","PartNumber","partInfo","_lastUploadedBytes","message","isBrowser","removeAllListeners","resume","abortMultipartUpload","each","part","completeParams","MultipartUpload","Parts","completeMultipartUpload","Location","replace","String","putObjectTagging","TagSet","d","upload","request","httpReq","httpRequest","endpoint","protocol","host","path","key","Bucket","info","operation","loaded","total","emit","mixin","addPromisesToClass","PromiseDependency","prototype","promise","promisifyMethod","deletePromisesFromClass","addPromises","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n var byteLength = AWS.util.string.byteLength;\n var Buffer = AWS.util.Buffer;\n\n /**\n  * The managed uploader allows for easy and efficient uploading of buffers,\n  * blobs, or streams, using a configurable amount of concurrency to perform\n  * multipart uploads where possible. This abstraction also enables uploading\n  * streams of unknown size due to the use of multipart uploads.\n  *\n  * To construct a managed upload object, see the {constructor} function.\n  *\n  * ## Tracking upload progress\n  *\n  * The managed upload object can also track progress by attaching an\n  * 'httpUploadProgress' listener to the upload manager. This event is similar\n  * to {AWS.Request~httpUploadProgress} but groups all concurrent upload progress\n  * into a single event. See {AWS.S3.ManagedUpload~httpUploadProgress} for more\n  * information.\n  *\n  * ## Handling Multipart Cleanup\n  *\n  * By default, this class will automatically clean up any multipart uploads\n  * when an individual part upload fails. This behavior can be disabled in order\n  * to manually handle failures by setting the `leavePartsOnError` configuration\n  * option to `true` when initializing the upload object.\n  *\n  * @!event httpUploadProgress(progress)\n  *   Triggered when the uploader has uploaded more data.\n  *   @note The `total` property may not be set if the stream being uploaded has\n  *     not yet finished chunking. In this case the `total` will be undefined\n  *     until the total stream size is known.\n  *   @note This event will not be emitted in Node.js 0.8.x.\n  *   @param progress [map] An object containing the `loaded` and `total` bytes\n  *     of the request and the `key` of the S3 object. Note that `total` may be undefined until the payload\n  *     size is known.\n  *   @context (see AWS.Request~send)\n  */\n AWS.S3.ManagedUpload = AWS.util.inherit({\n   /**\n    * Creates a managed upload object with a set of configuration options.\n    *\n    * @note A \"Body\" parameter is required to be set prior to calling {send}.\n    * @note In Node.js, sending \"Body\" as {https://nodejs.org/dist/latest/docs/api/stream.html#stream_object_mode object-mode stream}\n    *   may result in upload hangs. Using buffer stream is preferable.\n    * @option options params [map] a map of parameters to pass to the upload\n    *   requests. The \"Body\" parameter is required to be specified either on\n    *   the service or in the params option.\n    * @note ContentMD5 should not be provided when using the managed upload object.\n    *   Instead, setting \"computeChecksums\" to true will enable automatic ContentMD5 generation\n    *   by the managed upload object.\n    * @option options queueSize [Number] (4) the size of the concurrent queue\n    *   manager to upload parts in parallel. Set to 1 for synchronous uploading\n    *   of parts. Note that the uploader will buffer at most queueSize * partSize\n    *   bytes into memory at any given time.\n    * @option options partSize [Number] (5mb) the size in bytes for each\n    *   individual part to be uploaded. Adjust the part size to ensure the number\n    *   of parts does not exceed {maxTotalParts}. See {minPartSize} for the\n    *   minimum allowed part size.\n    * @option options leavePartsOnError [Boolean] (false) whether to abort the\n    *   multipart upload if an error occurs. Set to true if you want to handle\n    *   failures manually.\n    * @option options service [AWS.S3] an optional S3 service object to use for\n    *   requests. This object might have bound parameters used by the uploader.\n    * @option options tags [Array<map>] The tags to apply to the uploaded object.\n    *   Each tag should have a `Key` and `Value` keys.\n    * @example Creating a default uploader for a stream object\n    *   var upload = new AWS.S3.ManagedUpload({\n    *     params: {Bucket: 'bucket', Key: 'key', Body: stream}\n    *   });\n    * @example Creating an uploader with concurrency of 1 and partSize of 10mb\n    *   var upload = new AWS.S3.ManagedUpload({\n    *     partSize: 10 * 1024 * 1024, queueSize: 1,\n    *     params: {Bucket: 'bucket', Key: 'key', Body: stream}\n    *   });\n    * @example Creating an uploader with tags\n    *   var upload = new AWS.S3.ManagedUpload({\n    *     params: {Bucket: 'bucket', Key: 'key', Body: stream},\n    *     tags: [{Key: 'tag1', Value: 'value1'}, {Key: 'tag2', Value: 'value2'}]\n    *   });\n    * @see send\n    */\n   constructor: function ManagedUpload(options) {\n     var self = this;\n     AWS.SequentialExecutor.call(self);\n     self.body = null;\n     self.sliceFn = null;\n     self.callback = null;\n     self.parts = {};\n     self.completeInfo = [];\n     self.fillQueue = function() {\n       self.callback(new Error('Unsupported body payload ' + typeof self.body));\n     };\n\n     self.configure(options);\n   },\n\n   /**\n    * @api private\n    */\n   configure: function configure(options) {\n     options = options || {};\n     this.partSize = this.minPartSize;\n\n     if (options.queueSize) this.queueSize = options.queueSize;\n     if (options.partSize) this.partSize = options.partSize;\n     if (options.leavePartsOnError) this.leavePartsOnError = true;\n     if (options.tags) {\n       if (!Array.isArray(options.tags)) {\n         throw new Error('Tags must be specified as an array; ' +\n           typeof options.tags + ' provided.');\n       }\n       this.tags = options.tags;\n     }\n\n     if (this.partSize < this.minPartSize) {\n       throw new Error('partSize must be greater than ' +\n                       this.minPartSize);\n     }\n\n     this.service = options.service;\n     this.bindServiceObject(options.params);\n     this.validateBody();\n     this.adjustTotalBytes();\n   },\n\n   /**\n    * @api private\n    */\n   leavePartsOnError: false,\n\n   /**\n    * @api private\n    */\n   queueSize: 4,\n\n   /**\n    * @api private\n    */\n   partSize: null,\n\n   /**\n    * @readonly\n    * @return [Number] the minimum number of bytes for an individual part\n    *   upload.\n    */\n   minPartSize: 1024 * 1024 * 5,\n\n   /**\n    * @readonly\n    * @return [Number] the maximum allowed number of parts in a multipart upload.\n    */\n   maxTotalParts: 10000,\n\n   /**\n    * Initiates the managed upload for the payload.\n    *\n    * @callback callback function(err, data)\n    *   @param err [Error] an error or null if no error occurred.\n    *   @param data [map] The response data from the successful upload:\n    *     * `Location` (String) the URL of the uploaded object\n    *     * `ETag` (String) the ETag of the uploaded object\n    *     * `Bucket` (String) the bucket to which the object was uploaded\n    *     * `Key` (String) the key to which the object was uploaded\n    * @example Sending a managed upload object\n    *   var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n    *   var upload = new AWS.S3.ManagedUpload({params: params});\n    *   upload.send(function(err, data) {\n    *     console.log(err, data);\n    *   });\n    */\n   send: function(callback) {\n     var self = this;\n     self.failed = false;\n     self.callback = callback || function(err) { if (err) throw err; };\n\n     var runFill = true;\n     if (self.sliceFn) {\n       self.fillQueue = self.fillBuffer;\n     } else if (AWS.util.isNode()) {\n       var Stream = AWS.util.stream.Stream;\n       if (self.body instanceof Stream) {\n         runFill = false;\n         self.fillQueue = self.fillStream;\n         self.partBuffers = [];\n         self.body.\n           on('error', function(err) { self.cleanup(err); }).\n           on('readable', function() { self.fillQueue(); }).\n           on('end', function() {\n             self.isDoneChunking = true;\n             self.numParts = self.totalPartNumbers;\n             self.fillQueue.call(self);\n\n             if (self.isDoneChunking && self.totalPartNumbers >= 1 && self.doneParts === self.numParts) {\n               self.finishMultiPart();\n             }\n           });\n       }\n     }\n\n     if (runFill) self.fillQueue.call(self);\n   },\n\n   /**\n    * @!method  promise()\n    *   Returns a 'thenable' promise.\n    *\n    *   Two callbacks can be provided to the `then` method on the returned promise.\n    *   The first callback will be called if the promise is fulfilled, and the second\n    *   callback will be called if the promise is rejected.\n    *   @callback fulfilledCallback function(data)\n    *     Called if the promise is fulfilled.\n    *     @param data [map] The response data from the successful upload:\n    *       `Location` (String) the URL of the uploaded object\n    *       `ETag` (String) the ETag of the uploaded object\n    *       `Bucket` (String) the bucket to which the object was uploaded\n    *       `Key` (String) the key to which the object was uploaded\n    *   @callback rejectedCallback function(err)\n    *     Called if the promise is rejected.\n    *     @param err [Error] an error or null if no error occurred.\n    *   @return [Promise] A promise that represents the state of the upload request.\n    *   @example Sending an upload request using promises.\n    *     var upload = s3.upload({Bucket: 'bucket', Key: 'key', Body: stream});\n    *     var promise = upload.promise();\n    *     promise.then(function(data) { ... }, function(err) { ... });\n    */\n\n   /**\n    * Aborts a managed upload, including all concurrent upload requests.\n    * @note By default, calling this function will cleanup a multipart upload\n    *   if one was created. To leave the multipart upload around after aborting\n    *   a request, configure `leavePartsOnError` to `true` in the {constructor}.\n    * @note Calling {abort} in the browser environment will not abort any requests\n    *   that are already in flight. If a multipart upload was created, any parts\n    *   not yet uploaded will not be sent, and the multipart upload will be cleaned up.\n    * @example Aborting an upload\n    *   var params = {\n    *     Bucket: 'bucket', Key: 'key',\n    *     Body: Buffer.alloc(1024 * 1024 * 25) // 25MB payload\n    *   };\n    *   var upload = s3.upload(params);\n    *   upload.send(function (err, data) {\n    *     if (err) console.log(\"Error:\", err.code, err.message);\n    *     else console.log(data);\n    *   });\n    *\n    *   // abort request in 1 second\n    *   setTimeout(upload.abort.bind(upload), 1000);\n    */\n   abort: function() {\n     var self = this;\n     //abort putObject request\n     if (self.isDoneChunking === true && self.totalPartNumbers === 1 && self.singlePart) {\n       self.singlePart.abort();\n     } else {\n       self.cleanup(AWS.util.error(new Error('Request aborted by user'), {\n         code: 'RequestAbortedError', retryable: false\n       }));\n     }\n   },\n\n   /**\n    * @api private\n    */\n   validateBody: function validateBody() {\n     var self = this;\n     self.body = self.service.config.params.Body;\n     if (typeof self.body === 'string') {\n       self.body = AWS.util.buffer.toBuffer(self.body);\n     } else if (!self.body) {\n       throw new Error('params.Body is required');\n     }\n     self.sliceFn = AWS.util.arraySliceFn(self.body);\n   },\n\n   /**\n    * @api private\n    */\n   bindServiceObject: function bindServiceObject(params) {\n     params = params || {};\n     var self = this;\n     // bind parameters to new service object\n     if (!self.service) {\n       self.service = new AWS.S3({params: params});\n     } else {\n       // Create a new S3 client from the supplied client's constructor.\n       var service = self.service;\n       var config = AWS.util.copy(service.config);\n       config.signatureVersion = service.getSignatureVersion();\n       self.service = new service.constructor.__super__(config);\n       self.service.config.params =\n         AWS.util.merge(self.service.config.params || {}, params);\n       Object.defineProperty(self.service, '_originalConfig', {\n         get: function() { return service._originalConfig; },\n         enumerable: false,\n         configurable: true\n       });\n     }\n   },\n\n   /**\n    * @api private\n    */\n   adjustTotalBytes: function adjustTotalBytes() {\n     var self = this;\n     try { // try to get totalBytes\n       self.totalBytes = byteLength(self.body);\n     } catch (e) { }\n\n     // try to adjust partSize if we know payload length\n     if (self.totalBytes) {\n       var newPartSize = Math.ceil(self.totalBytes / self.maxTotalParts);\n       if (newPartSize > self.partSize) self.partSize = newPartSize;\n     } else {\n       self.totalBytes = undefined;\n     }\n   },\n\n   /**\n    * @api private\n    */\n   isDoneChunking: false,\n\n   /**\n    * @api private\n    */\n   partPos: 0,\n\n   /**\n    * @api private\n    */\n   totalChunkedBytes: 0,\n\n   /**\n    * @api private\n    */\n   totalUploadedBytes: 0,\n\n   /**\n    * @api private\n    */\n   totalBytes: undefined,\n\n   /**\n    * @api private\n    */\n   numParts: 0,\n\n   /**\n    * @api private\n    */\n   totalPartNumbers: 0,\n\n   /**\n    * @api private\n    */\n   activeParts: 0,\n\n   /**\n    * @api private\n    */\n   doneParts: 0,\n\n   /**\n    * @api private\n    */\n   parts: null,\n\n   /**\n    * @api private\n    */\n   completeInfo: null,\n\n   /**\n    * @api private\n    */\n   failed: false,\n\n   /**\n    * @api private\n    */\n   multipartReq: null,\n\n   /**\n    * @api private\n    */\n   partBuffers: null,\n\n   /**\n    * @api private\n    */\n   partBufferLength: 0,\n\n   /**\n    * @api private\n    */\n   fillBuffer: function fillBuffer() {\n     var self = this;\n     var bodyLen = byteLength(self.body);\n\n     if (bodyLen === 0) {\n       self.isDoneChunking = true;\n       self.numParts = 1;\n       self.nextChunk(self.body);\n       return;\n     }\n\n     while (self.activeParts < self.queueSize && self.partPos < bodyLen) {\n       var endPos = Math.min(self.partPos + self.partSize, bodyLen);\n       var buf = self.sliceFn.call(self.body, self.partPos, endPos);\n       self.partPos += self.partSize;\n\n       if (byteLength(buf) < self.partSize || self.partPos === bodyLen) {\n         self.isDoneChunking = true;\n         self.numParts = self.totalPartNumbers + 1;\n       }\n       self.nextChunk(buf);\n     }\n   },\n\n   /**\n    * @api private\n    */\n   fillStream: function fillStream() {\n     var self = this;\n     if (self.activeParts >= self.queueSize) return;\n\n     var buf = self.body.read(self.partSize - self.partBufferLength) ||\n               self.body.read();\n     if (buf) {\n       self.partBuffers.push(buf);\n       self.partBufferLength += buf.length;\n       self.totalChunkedBytes += buf.length;\n     }\n\n     if (self.partBufferLength >= self.partSize) {\n       // if we have single buffer we avoid copyfull concat\n       var pbuf = self.partBuffers.length === 1 ?\n         self.partBuffers[0] : Buffer.concat(self.partBuffers);\n       self.partBuffers = [];\n       self.partBufferLength = 0;\n\n       // if we have more than partSize, push the rest back on the queue\n       if (pbuf.length > self.partSize) {\n         var rest = pbuf.slice(self.partSize);\n         self.partBuffers.push(rest);\n         self.partBufferLength += rest.length;\n         pbuf = pbuf.slice(0, self.partSize);\n       }\n\n       self.nextChunk(pbuf);\n     }\n\n     if (self.isDoneChunking && !self.isDoneSending) {\n       // if we have single buffer we avoid copyfull concat\n       pbuf = self.partBuffers.length === 1 ?\n           self.partBuffers[0] : Buffer.concat(self.partBuffers);\n       self.partBuffers = [];\n       self.partBufferLength = 0;\n       self.totalBytes = self.totalChunkedBytes;\n       self.isDoneSending = true;\n\n       if (self.numParts === 0 || pbuf.length > 0) {\n         self.numParts++;\n         self.nextChunk(pbuf);\n       }\n     }\n\n     self.body.read(0);\n   },\n\n   /**\n    * @api private\n    */\n   nextChunk: function nextChunk(chunk) {\n     var self = this;\n     if (self.failed) return null;\n\n     var partNumber = ++self.totalPartNumbers;\n     if (self.isDoneChunking && partNumber === 1) {\n       var params = {Body: chunk};\n       if (this.tags) {\n         params.Tagging = this.getTaggingHeader();\n       }\n       var req = self.service.putObject(params);\n       req._managedUpload = self;\n       req.on('httpUploadProgress', self.progress).send(self.finishSinglePart);\n       self.singlePart = req; //save the single part request\n       return null;\n     } else if (self.service.config.params.ContentMD5) {\n       var err = AWS.util.error(new Error('The Content-MD5 you specified is invalid for multi-part uploads.'), {\n         code: 'InvalidDigest', retryable: false\n       });\n\n       self.cleanup(err);\n       return null;\n     }\n\n     if (self.completeInfo[partNumber] && self.completeInfo[partNumber].ETag !== null) {\n       return null; // Already uploaded this part.\n     }\n\n     self.activeParts++;\n     if (!self.service.config.params.UploadId) {\n\n       if (!self.multipartReq) { // create multipart\n         self.multipartReq = self.service.createMultipartUpload();\n         self.multipartReq.on('success', function(resp) {\n           self.service.config.params.UploadId = resp.data.UploadId;\n           self.multipartReq = null;\n         });\n         self.queueChunks(chunk, partNumber);\n         self.multipartReq.on('error', function(err) {\n           self.cleanup(err);\n         });\n         self.multipartReq.send();\n       } else {\n         self.queueChunks(chunk, partNumber);\n       }\n     } else { // multipart is created, just send\n       self.uploadPart(chunk, partNumber);\n     }\n   },\n\n   /**\n    * @api private\n    */\n   getTaggingHeader: function getTaggingHeader() {\n     var kvPairStrings = [];\n     for (var i = 0; i < this.tags.length; i++) {\n       kvPairStrings.push(AWS.util.uriEscape(this.tags[i].Key) + '=' +\n         AWS.util.uriEscape(this.tags[i].Value));\n     }\n\n     return kvPairStrings.join('&');\n   },\n\n   /**\n    * @api private\n    */\n   uploadPart: function uploadPart(chunk, partNumber) {\n     var self = this;\n\n     var partParams = {\n       Body: chunk,\n       ContentLength: AWS.util.string.byteLength(chunk),\n       PartNumber: partNumber\n     };\n\n     var partInfo = {ETag: null, PartNumber: partNumber};\n     self.completeInfo[partNumber] = partInfo;\n\n     var req = self.service.uploadPart(partParams);\n     self.parts[partNumber] = req;\n     req._lastUploadedBytes = 0;\n     req._managedUpload = self;\n     req.on('httpUploadProgress', self.progress);\n     req.send(function(err, data) {\n       delete self.parts[partParams.PartNumber];\n       self.activeParts--;\n\n       if (!err && (!data || !data.ETag)) {\n         var message = 'No access to ETag property on response.';\n         if (AWS.util.isBrowser()) {\n           message += ' Check CORS configuration to expose ETag header.';\n         }\n\n         err = AWS.util.error(new Error(message), {\n           code: 'ETagMissing', retryable: false\n         });\n       }\n       if (err) return self.cleanup(err);\n       //prevent sending part being returned twice (https://github.com/aws/aws-sdk-js/issues/2304)\n       if (self.completeInfo[partNumber] && self.completeInfo[partNumber].ETag !== null) return null;\n       partInfo.ETag = data.ETag;\n       self.doneParts++;\n       if (self.isDoneChunking && self.doneParts === self.totalPartNumbers) {\n         self.finishMultiPart();\n       } else {\n         self.fillQueue.call(self);\n       }\n     });\n   },\n\n   /**\n    * @api private\n    */\n   queueChunks: function queueChunks(chunk, partNumber) {\n     var self = this;\n     self.multipartReq.on('success', function() {\n       self.uploadPart(chunk, partNumber);\n     });\n   },\n\n   /**\n    * @api private\n    */\n   cleanup: function cleanup(err) {\n     var self = this;\n     if (self.failed) return;\n\n     // clean up stream\n     if (typeof self.body.removeAllListeners === 'function' &&\n         typeof self.body.resume === 'function') {\n       self.body.removeAllListeners('readable');\n       self.body.removeAllListeners('end');\n       self.body.resume();\n     }\n\n     // cleanup multipartReq listeners\n     if (self.multipartReq) {\n       self.multipartReq.removeAllListeners('success');\n       self.multipartReq.removeAllListeners('error');\n       self.multipartReq.removeAllListeners('complete');\n       delete self.multipartReq;\n     }\n\n     if (self.service.config.params.UploadId && !self.leavePartsOnError) {\n       self.service.abortMultipartUpload().send();\n     } else if (self.leavePartsOnError) {\n       self.isDoneChunking = false;\n     }\n\n     AWS.util.each(self.parts, function(partNumber, part) {\n       part.removeAllListeners('complete');\n       part.abort();\n     });\n\n     self.activeParts = 0;\n     self.partPos = 0;\n     self.numParts = 0;\n     self.totalPartNumbers = 0;\n     self.parts = {};\n     self.failed = true;\n     self.callback(err);\n   },\n\n   /**\n    * @api private\n    */\n   finishMultiPart: function finishMultiPart() {\n     var self = this;\n     var completeParams = { MultipartUpload: { Parts: self.completeInfo.slice(1) } };\n     self.service.completeMultipartUpload(completeParams, function(err, data) {\n       if (err) {\n         return self.cleanup(err);\n       }\n\n       if (data && typeof data.Location === 'string') {\n         data.Location = data.Location.replace(/%2F/g, '/');\n       }\n\n       if (Array.isArray(self.tags)) {\n         for (var i = 0; i < self.tags.length; i++) {\n           self.tags[i].Value = String(self.tags[i].Value);\n         }\n         self.service.putObjectTagging(\n           {Tagging: {TagSet: self.tags}},\n           function(e, d) {\n             if (e) {\n               self.callback(e);\n             } else {\n               self.callback(e, data);\n             }\n           }\n         );\n       } else {\n         self.callback(err, data);\n       }\n     });\n   },\n\n   /**\n    * @api private\n    */\n   finishSinglePart: function finishSinglePart(err, data) {\n     var upload = this.request._managedUpload;\n     var httpReq = this.request.httpRequest;\n     var endpoint = httpReq.endpoint;\n     if (err) return upload.callback(err);\n     data.Location =\n       [endpoint.protocol, '//', endpoint.host, httpReq.path].join('');\n     data.key = this.request.params.Key; // will stay undocumented\n     data.Key = this.request.params.Key;\n     data.Bucket = this.request.params.Bucket;\n     upload.callback(err, data);\n   },\n\n   /**\n    * @api private\n    */\n   progress: function progress(info) {\n     var upload = this._managedUpload;\n     if (this.operation === 'putObject') {\n       info.part = 1;\n       info.key = this.params.Key;\n     } else {\n       upload.totalUploadedBytes += info.loaded - this._lastUploadedBytes;\n       this._lastUploadedBytes = info.loaded;\n       info = {\n         loaded: upload.totalUploadedBytes,\n         total: upload.totalBytes,\n         part: this.params.PartNumber,\n         key: this.params.Key\n       };\n     }\n     upload.emit('httpUploadProgress', [info]);\n   }\n });\n\n AWS.util.mixin(AWS.S3.ManagedUpload, AWS.SequentialExecutor);\n\n /**\n  * @api private\n  */\n AWS.S3.ManagedUpload.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n   this.prototype.promise = AWS.util.promisifyMethod('send', PromiseDependency);\n };\n\n /**\n  * @api private\n  */\n AWS.S3.ManagedUpload.deletePromisesFromClass = function deletePromisesFromClass() {\n   delete this.prototype.promise;\n };\n\n AWS.util.addPromises(AWS.S3.ManagedUpload);\n\n /**\n  * @api private\n  */\n module.exports = AWS.S3.ManagedUpload;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}