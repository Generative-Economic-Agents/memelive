{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/assets/src/module/main/SpriteAtlasAnimation.ts"],"names":["_decorator","Component","Sprite","SpriteAtlas","ccclass","property","SpriteAtlasAnimation","frames","currentFrame","timer","onCompleteCallback","totalFrames","setOnCompleteCallback","callback","start","atlas","console","error","enabled","getSpriteFrames","length","play","show","stop","hide","sprite","update","deltaTime","fps","spriteFrame","hideOnComplete"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;;;;;;;;;OAClC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;sCAGjBM,oB,WADZF,OAAO,CAAC,sBAAD,C,UAEHC,QAAQ,CAACH,MAAD,C,UAGRG,QAAQ,CAACF,WAAD,C,2BALb,MACaG,oBADb,SAC0CL,SAD1C,CACoD;AAAA;AAAA;;AAAA;;AAElB;AAFkB;;AAKd;AALc;;AAQtB;AARsB;;AAW9B;AAX8B,eAaxCM,MAbwC,GAahB,EAbgB;AAaZ;AAbY,eAcxCC,YAdwC,GAcjB,CAdiB;AAcd;AAdc,eAexCC,KAfwC,GAexB,CAfwB;;AAerB;AAfqB;;AAiBP;AAjBO,eAkBxCC,kBAlBwC,GAkBF,IAlBE;AAkBI;AAlBJ,eAmBhDC,WAnBgD,GAmB1B,CAnB0B;AAAA;;AAqBhD;AACOC,QAAAA,qBAAqB,CAACC,QAAD,EAAqB;AAC7C,eAAKH,kBAAL,GAA0BG,QAA1B;AACH;;AACDC,QAAAA,KAAK,GAAG;AACJ,cAAI,CAAC,KAAKC,KAAV,EAAiB;AACbC,YAAAA,OAAO,CAACC,KAAR,CAAc,8BAAd;AACA;AACH;;AACD,eAAKC,OAAL,GAAe,KAAf,CALI,CAMJ;;AACA,eAAKX,MAAL,GAAc,KAAKQ,KAAL,CAAWI,eAAX,EAAd;AACA,eAAKR,WAAL,GAAmB,KAAKJ,MAAL,CAAYa,MAAZ,GAAmB,CAAtC,CARI,CASJ;AACA;AACA;;AAEA,eAAKZ,YAAL,GAAoB,CAApB;AACA,eAAKC,KAAL,GAAa,CAAb;AACH,SAxC+C,CAyChD;;;AACOY,QAAAA,IAAI,GAAG;AACV,eAAKH,OAAL,GAAe,IAAf,CADU,CACW;;AACrB,eAAKI,IAAL;AACH,SA7C+C,CA+ChD;;;AACOC,QAAAA,IAAI,GAAG;AACV,eAAKL,OAAL,GAAe,KAAf,CADU,CACY;;AACtB,eAAKV,YAAL,GAAoB,CAApB,CAFU,CAEa;AAC1B,SAnD+C,CAqDhD;;;AACOgB,QAAAA,IAAI,GAAG;AACV,cAAI,KAAKC,MAAT,EAAiB;AACb,iBAAKA,MAAL,CAAYP,OAAZ,GAAsB,KAAtB;AACH;AACJ,SA1D+C,CA4DhD;;;AACOI,QAAAA,IAAI,GAAG;AACV,cAAI,KAAKG,MAAT,EAAiB;AACb,iBAAKA,MAAL,CAAYP,OAAZ,GAAsB,IAAtB;AACH;AACJ;;AACDQ,QAAAA,MAAM,CAACC,SAAD,EAAoB;AACtB,cAAI,KAAKT,OAAT,EAAkB;AACd;AACA,gBAAI,KAAKX,MAAL,CAAYa,MAAZ,KAAuB,CAAvB,IAA4B,CAAC,KAAKK,MAAtC,EAA8C;AAC1C;AACH;;AAED,iBAAKhB,KAAL,IAAckB,SAAd;;AACA,gBAAI,KAAKlB,KAAL,IAAc,IAAI,KAAKmB,GAA3B,EAAgC;AAC5B,mBAAKH,MAAL,CAAYI,WAAZ,GAA0B,KAAKtB,MAAL,CAAY,KAAKC,YAAjB,CAA1B;AACA,mBAAKA,YAAL,GAAoB,CAAC,KAAKA,YAAL,GAAoB,CAArB,IAA0B,KAAKD,MAAL,CAAYa,MAA1D;AACA,mBAAKX,KAAL,GAAa,CAAb;AACH;;AACD,gBAAI,KAAKD,YAAL,IAAqB,KAAKG,WAA9B,EAA2C;AAAA;;AACvC,kBAAI,KAAKmB,cAAT,EAAyB;AACrB,qBAAKN,IAAL,GADqB,CACR;AAChB;;AACD,4CAAKd,kBAAL,8CAJuC,CAIV;;AAC7B,mBAAKa,IAAL,GALuC,CAK1B;AAChB;AACJ;AAIJ;;AA1F+C,O;;;;;iBAExB,I;;;;;;;iBAGI,I;;iFAE3BlB,Q;;;;;iBACgB,O;;8EAEhBA,Q;;;;;iBACa,E;;yFAKbA,Q;;;;;iBACiC,K","sourcesContent":["import { _decorator, Component, Sprite, SpriteAtlas, director, SpriteFrame } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('SpriteAtlasAnimation')\nexport class SpriteAtlasAnimation extends Component {\n    @property(Sprite)\n    sprite: Sprite | null = null; // 精灵组件\n\n    @property(SpriteAtlas)\n    atlas: SpriteAtlas | null = null; // SpriteAtlas 资源\n\n    @property\n    prefix: string = 'frame'; // 序列帧名称前缀\n\n    @property\n    fps: number = 10; // 每秒帧数\n\n    private frames: SpriteFrame[] = []; // 存储序列帧\n    private currentFrame: number = 0; // 当前帧\n    private timer: number = 0; // 计时器\n    @property\n    private hideOnComplete: boolean = false; // 是否在播放完毕后隐藏\n    private onCompleteCallback: Function | null = null; // 播放完毕后的回调函数\n    totalFrames: number = 0;\n\n    // 设置播放完毕后的回调\n    public setOnCompleteCallback(callback: Function) {\n        this.onCompleteCallback = callback;\n    }\n    start() {\n        if (!this.atlas) {\n            console.error('SpriteAtlas is not assigned!');\n            return;\n        }\n        this.enabled = false;\n        // 加载所有序列帧\n        this.frames = this.atlas.getSpriteFrames();\n        this.totalFrames = this.frames.length-1;\n        // 可以根据需要对 frames 进行排序或筛选\n        // 例如，如果序列帧命名有规律，可以用前缀筛选\n        // this.frames = this.frames.filter(frame => frame.name.startsWith(this.prefix));\n\n        this.currentFrame = 0;\n        this.timer = 0;\n    }\n    // 播放动画\n    public play() {\n        this.enabled = true; // 启用 update 方法\n        this.show();\n    }\n\n    // 停止动画\n    public stop() {\n        this.enabled = false; // 禁用 update 方法\n        this.currentFrame = 0; // 重置到第一帧\n    }\n\n    // 隐藏 Sprite\n    public hide() {\n        if (this.sprite) {\n            this.sprite.enabled = false;\n        }\n    }\n\n    // 显示 Sprite\n    public show() {\n        if (this.sprite) {\n            this.sprite.enabled = true;\n        }\n    }\n    update(deltaTime: number) {\n        if (this.enabled) {\n            // ... 现有的帧更新逻辑 ...\n            if (this.frames.length === 0 || !this.sprite) {\n                return;\n            }\n\n            this.timer += deltaTime;\n            if (this.timer >= 1 / this.fps) {\n                this.sprite.spriteFrame = this.frames[this.currentFrame];\n                this.currentFrame = (this.currentFrame + 1) % this.frames.length;\n                this.timer = 0;\n            }\n            if (this.currentFrame >= this.totalFrames) {\n                if (this.hideOnComplete) {\n                    this.hide(); // 播放完毕后隐藏\n                }\n                this.onCompleteCallback?.(); // 调用回调函数\n                this.stop(); // 停止动画\n            }\n        }\n\n\n\n    }\n}"]}