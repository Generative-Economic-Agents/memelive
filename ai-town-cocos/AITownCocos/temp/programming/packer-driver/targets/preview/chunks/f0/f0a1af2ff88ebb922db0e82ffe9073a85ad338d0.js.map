{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/sshpk/lib/formats/pkcs8.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","_req4","_req5","_req6","url","define","exports","require","module","__filename","__dirname","read","readPkcs8","write","writePkcs8","pkcs8ToBuffer","readECDSACurve","writeECDSACurve","assert","asn1","Buffer","algs","utils","Key","PrivateKey","pem","buf","options","key","readMPInt","der","nm","strictEqual","peek","Ber","Integer","mpNormalize","readString","alg","type","readSequence","next","offset","length","oid","readOID","_offset","readPkcs8RSAPublic","readPkcs8RSAPrivate","readPkcs8DSAPublic","readPkcs8DSAPrivate","readPkcs8ECDSAPublic","readPkcs8ECDSAPrivate","readPkcs8EdDSAPublic","readPkcs8EdDSAPrivate","readPkcs8X25519Public","readPkcs8X25519Private","Error","BitString","readByte","n","e","source","originalInput","parts","name","data","OctetString","ver","equal","d","p","q","dmodp","dmodq","iqmp","g","y","x","calculateDSAPublic","curveName","curveNames","j","c","cd","OID","Object","keys","curves","pkcs8oid","version","curve","fieldTypeOid","size","countZeros","a","b","s","G","h","ks","i","k","undefined","equals","isBuffer","toString","string","Q","ecNormalize","pub","publicFromPrivateECDSA","part","from","A","readBitString","zeroPadToLength","tag","Context","calculateED25519Public","calculateX25519Public","BerWriter","buffer","startSequence","isPrivateKey","vbuf","writeBuffer","writeOID","writePkcs8RSAPrivate","writePkcs8RSAPublic","writePkcs8DSAPrivate","writePkcs8DSAPublic","writePkcs8ECDSAPrivate","writePkcs8ECDSAPublic","writePkcs8EdDSAPrivate","writePkcs8EdDSAPublic","endSequence","writeNull","addRSAMissing","writeByte","slice","writeBitString","_cjsExports","_read","_readPkcs8","_write","_writePkcs8","_pkcs8ToBuffer","_readECDSACurve","_writeECDSACurve"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'assert-plus';\nimport { __cjsMetaURL as _req0} from 'asn1';\nimport { __cjsMetaURL as _req1} from 'safer-buffer';\nimport { __cjsMetaURL as _req2} from '../algs';\nimport { __cjsMetaURL as _req3} from '../utils';\nimport { __cjsMetaURL as _req4} from '../key';\nimport { __cjsMetaURL as _req5} from '../private-key';\nimport { __cjsMetaURL as _req6} from './pem';\nlet _cjsExports;\nlet _read;\nlet _readPkcs8;\nlet _write;\nlet _writePkcs8;\nlet _pkcs8ToBuffer;\nlet _readECDSACurve;\nlet _writeECDSACurve;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n // Copyright 2018 Joyent, Inc.\n\n module.exports = {\n \tread: read,\n \treadPkcs8: readPkcs8,\n \twrite: write,\n \twritePkcs8: writePkcs8,\n \tpkcs8ToBuffer: pkcs8ToBuffer,\n\n \treadECDSACurve: readECDSACurve,\n \twriteECDSACurve: writeECDSACurve\n };\n\n var assert = require('assert-plus');\n var asn1 = require('asn1');\n var Buffer = require('safer-buffer').Buffer;\n var algs = require('../algs');\n var utils = require('../utils');\n var Key = require('../key');\n var PrivateKey = require('../private-key');\n var pem = require('./pem');\n\n function read(buf, options) {\n \treturn (pem.read(buf, options, 'pkcs8'));\n }\n\n function write(key, options) {\n \treturn (pem.write(key, options, 'pkcs8'));\n }\n\n /* Helper to read in a single mpint */\n function readMPInt(der, nm) {\n \tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n \t    nm + ' is not an Integer');\n \treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n }\n\n function readPkcs8(alg, type, der) {\n \t/* Private keys in pkcs#8 format have a weird extra int */\n \tif (der.peek() === asn1.Ber.Integer) {\n \t\tassert.strictEqual(type, 'private',\n \t\t    'unexpected Integer at start of public key');\n \t\tder.readString(asn1.Ber.Integer, true);\n \t}\n\n \tder.readSequence();\n \tvar next = der.offset + der.length;\n\n \tvar oid = der.readOID();\n \tswitch (oid) {\n \tcase '1.2.840.113549.1.1.1':\n \t\tder._offset = next;\n \t\tif (type === 'public')\n \t\t\treturn (readPkcs8RSAPublic(der));\n \t\telse\n \t\t\treturn (readPkcs8RSAPrivate(der));\n \tcase '1.2.840.10040.4.1':\n \t\tif (type === 'public')\n \t\t\treturn (readPkcs8DSAPublic(der));\n \t\telse\n \t\t\treturn (readPkcs8DSAPrivate(der));\n \tcase '1.2.840.10045.2.1':\n \t\tif (type === 'public')\n \t\t\treturn (readPkcs8ECDSAPublic(der));\n \t\telse\n \t\t\treturn (readPkcs8ECDSAPrivate(der));\n \tcase '1.3.101.112':\n \t\tif (type === 'public') {\n \t\t\treturn (readPkcs8EdDSAPublic(der));\n \t\t} else {\n \t\t\treturn (readPkcs8EdDSAPrivate(der));\n \t\t}\n \tcase '1.3.101.110':\n \t\tif (type === 'public') {\n \t\t\treturn (readPkcs8X25519Public(der));\n \t\t} else {\n \t\t\treturn (readPkcs8X25519Private(der));\n \t\t}\n \tdefault:\n \t\tthrow (new Error('Unknown key type OID ' + oid));\n \t}\n }\n\n function readPkcs8RSAPublic(der) {\n \t// bit string sequence\n \tder.readSequence(asn1.Ber.BitString);\n \tder.readByte();\n \tder.readSequence();\n\n \t// modulus\n \tvar n = readMPInt(der, 'modulus');\n \tvar e = readMPInt(der, 'exponent');\n\n \t// now, make the key\n \tvar key = {\n \t\ttype: 'rsa',\n \t\tsource: der.originalInput,\n \t\tparts: [\n \t\t\t{ name: 'e', data: e },\n \t\t\t{ name: 'n', data: n }\n \t\t]\n \t};\n\n \treturn (new Key(key));\n }\n\n function readPkcs8RSAPrivate(der) {\n \tder.readSequence(asn1.Ber.OctetString);\n \tder.readSequence();\n\n \tvar ver = readMPInt(der, 'version');\n \tassert.equal(ver[0], 0x0, 'unknown RSA private key version');\n\n \t// modulus then public exponent\n \tvar n = readMPInt(der, 'modulus');\n \tvar e = readMPInt(der, 'public exponent');\n \tvar d = readMPInt(der, 'private exponent');\n \tvar p = readMPInt(der, 'prime1');\n \tvar q = readMPInt(der, 'prime2');\n \tvar dmodp = readMPInt(der, 'exponent1');\n \tvar dmodq = readMPInt(der, 'exponent2');\n \tvar iqmp = readMPInt(der, 'iqmp');\n\n \t// now, make the key\n \tvar key = {\n \t\ttype: 'rsa',\n \t\tparts: [\n \t\t\t{ name: 'n', data: n },\n \t\t\t{ name: 'e', data: e },\n \t\t\t{ name: 'd', data: d },\n \t\t\t{ name: 'iqmp', data: iqmp },\n \t\t\t{ name: 'p', data: p },\n \t\t\t{ name: 'q', data: q },\n \t\t\t{ name: 'dmodp', data: dmodp },\n \t\t\t{ name: 'dmodq', data: dmodq }\n \t\t]\n \t};\n\n \treturn (new PrivateKey(key));\n }\n\n function readPkcs8DSAPublic(der) {\n \tder.readSequence();\n\n \tvar p = readMPInt(der, 'p');\n \tvar q = readMPInt(der, 'q');\n \tvar g = readMPInt(der, 'g');\n\n \t// bit string sequence\n \tder.readSequence(asn1.Ber.BitString);\n \tder.readByte();\n\n \tvar y = readMPInt(der, 'y');\n\n \t// now, make the key\n \tvar key = {\n \t\ttype: 'dsa',\n \t\tparts: [\n \t\t\t{ name: 'p', data: p },\n \t\t\t{ name: 'q', data: q },\n \t\t\t{ name: 'g', data: g },\n \t\t\t{ name: 'y', data: y }\n \t\t]\n \t};\n\n \treturn (new Key(key));\n }\n\n function readPkcs8DSAPrivate(der) {\n \tder.readSequence();\n\n \tvar p = readMPInt(der, 'p');\n \tvar q = readMPInt(der, 'q');\n \tvar g = readMPInt(der, 'g');\n\n \tder.readSequence(asn1.Ber.OctetString);\n \tvar x = readMPInt(der, 'x');\n\n \t/* The pkcs#8 format does not include the public key */\n \tvar y = utils.calculateDSAPublic(g, p, x);\n\n \tvar key = {\n \t\ttype: 'dsa',\n \t\tparts: [\n \t\t\t{ name: 'p', data: p },\n \t\t\t{ name: 'q', data: q },\n \t\t\t{ name: 'g', data: g },\n \t\t\t{ name: 'y', data: y },\n \t\t\t{ name: 'x', data: x }\n \t\t]\n \t};\n\n \treturn (new PrivateKey(key));\n }\n\n function readECDSACurve(der) {\n \tvar curveName, curveNames;\n \tvar j, c, cd;\n\n \tif (der.peek() === asn1.Ber.OID) {\n \t\tvar oid = der.readOID();\n\n \t\tcurveNames = Object.keys(algs.curves);\n \t\tfor (j = 0; j < curveNames.length; ++j) {\n \t\t\tc = curveNames[j];\n \t\t\tcd = algs.curves[c];\n \t\t\tif (cd.pkcs8oid === oid) {\n \t\t\t\tcurveName = c;\n \t\t\t\tbreak;\n \t\t\t}\n \t\t}\n\n \t} else {\n \t\t// ECParameters sequence\n \t\tder.readSequence();\n \t\tvar version = der.readString(asn1.Ber.Integer, true);\n \t\tassert.strictEqual(version[0], 1, 'ECDSA key not version 1');\n\n \t\tvar curve = {};\n\n \t\t// FieldID sequence\n \t\tder.readSequence();\n \t\tvar fieldTypeOid = der.readOID();\n \t\tassert.strictEqual(fieldTypeOid, '1.2.840.10045.1.1',\n \t\t    'ECDSA key is not from a prime-field');\n \t\tvar p = curve.p = utils.mpNormalize(\n \t\t    der.readString(asn1.Ber.Integer, true));\n \t\t/*\n \t\t * p always starts with a 1 bit, so count the zeros to get its\n \t\t * real size.\n \t\t */\n \t\tcurve.size = p.length * 8 - utils.countZeros(p);\n\n \t\t// Curve sequence\n \t\tder.readSequence();\n \t\tcurve.a = utils.mpNormalize(\n \t\t    der.readString(asn1.Ber.OctetString, true));\n \t\tcurve.b = utils.mpNormalize(\n \t\t    der.readString(asn1.Ber.OctetString, true));\n \t\tif (der.peek() === asn1.Ber.BitString)\n \t\t\tcurve.s = der.readString(asn1.Ber.BitString, true);\n\n \t\t// Combined Gx and Gy\n \t\tcurve.G = der.readString(asn1.Ber.OctetString, true);\n \t\tassert.strictEqual(curve.G[0], 0x4,\n \t\t    'uncompressed G is required');\n\n \t\tcurve.n = utils.mpNormalize(\n \t\t    der.readString(asn1.Ber.Integer, true));\n \t\tcurve.h = utils.mpNormalize(\n \t\t    der.readString(asn1.Ber.Integer, true));\n \t\tassert.strictEqual(curve.h[0], 0x1, 'a cofactor=1 curve is ' +\n \t\t    'required');\n\n \t\tcurveNames = Object.keys(algs.curves);\n \t\tvar ks = Object.keys(curve);\n \t\tfor (j = 0; j < curveNames.length; ++j) {\n \t\t\tc = curveNames[j];\n \t\t\tcd = algs.curves[c];\n \t\t\tvar equal = true;\n \t\t\tfor (var i = 0; i < ks.length; ++i) {\n \t\t\t\tvar k = ks[i];\n \t\t\t\tif (cd[k] === undefined)\n \t\t\t\t\tcontinue;\n \t\t\t\tif (typeof (cd[k]) === 'object' &&\n \t\t\t\t    cd[k].equals !== undefined) {\n \t\t\t\t\tif (!cd[k].equals(curve[k])) {\n \t\t\t\t\t\tequal = false;\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n \t\t\t\t} else if (Buffer.isBuffer(cd[k])) {\n \t\t\t\t\tif (cd[k].toString('binary')\n \t\t\t\t\t    !== curve[k].toString('binary')) {\n \t\t\t\t\t\tequal = false;\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n \t\t\t\t} else {\n \t\t\t\t\tif (cd[k] !== curve[k]) {\n \t\t\t\t\t\tequal = false;\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t\tif (equal) {\n \t\t\t\tcurveName = c;\n \t\t\t\tbreak;\n \t\t\t}\n \t\t}\n \t}\n \treturn (curveName);\n }\n\n function readPkcs8ECDSAPrivate(der) {\n \tvar curveName = readECDSACurve(der);\n \tassert.string(curveName, 'a known elliptic curve');\n\n \tder.readSequence(asn1.Ber.OctetString);\n \tder.readSequence();\n\n \tvar version = readMPInt(der, 'version');\n \tassert.equal(version[0], 1, 'unknown version of ECDSA key');\n\n \tvar d = der.readString(asn1.Ber.OctetString, true);\n \tvar Q;\n\n \tif (der.peek() == 0xa0) {\n \t\tder.readSequence(0xa0);\n \t\tder._offset += der.length;\n \t}\n \tif (der.peek() == 0xa1) {\n \t\tder.readSequence(0xa1);\n \t\tQ = der.readString(asn1.Ber.BitString, true);\n \t\tQ = utils.ecNormalize(Q);\n \t}\n\n \tif (Q === undefined) {\n \t\tvar pub = utils.publicFromPrivateECDSA(curveName, d);\n \t\tQ = pub.part.Q.data;\n \t}\n\n \tvar key = {\n \t\ttype: 'ecdsa',\n \t\tparts: [\n \t\t\t{ name: 'curve', data: Buffer.from(curveName) },\n \t\t\t{ name: 'Q', data: Q },\n \t\t\t{ name: 'd', data: d }\n \t\t]\n \t};\n\n \treturn (new PrivateKey(key));\n }\n\n function readPkcs8ECDSAPublic(der) {\n \tvar curveName = readECDSACurve(der);\n \tassert.string(curveName, 'a known elliptic curve');\n\n \tvar Q = der.readString(asn1.Ber.BitString, true);\n \tQ = utils.ecNormalize(Q);\n\n \tvar key = {\n \t\ttype: 'ecdsa',\n \t\tparts: [\n \t\t\t{ name: 'curve', data: Buffer.from(curveName) },\n \t\t\t{ name: 'Q', data: Q }\n \t\t]\n \t};\n\n \treturn (new Key(key));\n }\n\n function readPkcs8EdDSAPublic(der) {\n \tif (der.peek() === 0x00)\n \t\tder.readByte();\n\n \tvar A = utils.readBitString(der);\n\n \tvar key = {\n \t\ttype: 'ed25519',\n \t\tparts: [\n \t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) }\n \t\t]\n \t};\n\n \treturn (new Key(key));\n }\n\n function readPkcs8X25519Public(der) {\n \tvar A = utils.readBitString(der);\n\n \tvar key = {\n \t\ttype: 'curve25519',\n \t\tparts: [\n \t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) }\n \t\t]\n \t};\n\n \treturn (new Key(key));\n }\n\n function readPkcs8EdDSAPrivate(der) {\n \tif (der.peek() === 0x00)\n \t\tder.readByte();\n\n \tder.readSequence(asn1.Ber.OctetString);\n \tvar k = der.readString(asn1.Ber.OctetString, true);\n \tk = utils.zeroPadToLength(k, 32);\n\n \tvar A, tag;\n \twhile ((tag = der.peek()) !== null) {\n \t\tif (tag === (asn1.Ber.Context | 1)) {\n \t\t\tA = utils.readBitString(der, tag);\n \t\t} else {\n \t\t\tder.readSequence(tag);\n \t\t\tder._offset += der.length;\n \t\t}\n \t}\n \tif (A === undefined)\n \t\tA = utils.calculateED25519Public(k);\n\n \tvar key = {\n \t\ttype: 'ed25519',\n \t\tparts: [\n \t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) },\n \t\t\t{ name: 'k', data: utils.zeroPadToLength(k, 32) }\n \t\t]\n \t};\n\n \treturn (new PrivateKey(key));\n }\n\n function readPkcs8X25519Private(der) {\n \tif (der.peek() === 0x00)\n \t\tder.readByte();\n\n \tder.readSequence(asn1.Ber.OctetString);\n \tvar k = der.readString(asn1.Ber.OctetString, true);\n \tk = utils.zeroPadToLength(k, 32);\n\n \tvar A = utils.calculateX25519Public(k);\n\n \tvar key = {\n \t\ttype: 'curve25519',\n \t\tparts: [\n \t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) },\n \t\t\t{ name: 'k', data: utils.zeroPadToLength(k, 32) }\n \t\t]\n \t};\n\n \treturn (new PrivateKey(key));\n }\n\n function pkcs8ToBuffer(key) {\n \tvar der = new asn1.BerWriter();\n \twritePkcs8(der, key);\n \treturn (der.buffer);\n }\n\n function writePkcs8(der, key) {\n \tder.startSequence();\n\n \tif (PrivateKey.isPrivateKey(key)) {\n \t\tvar version = 0;\n \t\tif (key.type === 'ed25519')\n \t\t\tversion = 1;\n \t\tvar vbuf = Buffer.from([version]);\n \t\tder.writeBuffer(vbuf, asn1.Ber.Integer);\n \t}\n\n \tder.startSequence();\n \tswitch (key.type) {\n \tcase 'rsa':\n \t\tder.writeOID('1.2.840.113549.1.1.1');\n \t\tif (PrivateKey.isPrivateKey(key))\n \t\t\twritePkcs8RSAPrivate(key, der);\n \t\telse\n \t\t\twritePkcs8RSAPublic(key, der);\n \t\tbreak;\n \tcase 'dsa':\n \t\tder.writeOID('1.2.840.10040.4.1');\n \t\tif (PrivateKey.isPrivateKey(key))\n \t\t\twritePkcs8DSAPrivate(key, der);\n \t\telse\n \t\t\twritePkcs8DSAPublic(key, der);\n \t\tbreak;\n \tcase 'ecdsa':\n \t\tder.writeOID('1.2.840.10045.2.1');\n \t\tif (PrivateKey.isPrivateKey(key))\n \t\t\twritePkcs8ECDSAPrivate(key, der);\n \t\telse\n \t\t\twritePkcs8ECDSAPublic(key, der);\n \t\tbreak;\n \tcase 'ed25519':\n \t\tder.writeOID('1.3.101.112');\n \t\tif (PrivateKey.isPrivateKey(key))\n \t\t\twritePkcs8EdDSAPrivate(key, der);\n \t\telse\n \t\t\twritePkcs8EdDSAPublic(key, der);\n \t\tbreak;\n \tdefault:\n \t\tthrow (new Error('Unsupported key type: ' + key.type));\n \t}\n\n \tder.endSequence();\n }\n\n function writePkcs8RSAPrivate(key, der) {\n \tder.writeNull();\n \tder.endSequence();\n\n \tder.startSequence(asn1.Ber.OctetString);\n \tder.startSequence();\n\n \tvar version = Buffer.from([0]);\n \tder.writeBuffer(version, asn1.Ber.Integer);\n\n \tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n \tif (!key.part.dmodp || !key.part.dmodq)\n \t\tutils.addRSAMissing(key);\n \tder.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n\n \tder.endSequence();\n \tder.endSequence();\n }\n\n function writePkcs8RSAPublic(key, der) {\n \tder.writeNull();\n \tder.endSequence();\n\n \tder.startSequence(asn1.Ber.BitString);\n \tder.writeByte(0x00);\n\n \tder.startSequence();\n \tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n \tder.endSequence();\n\n \tder.endSequence();\n }\n\n function writePkcs8DSAPrivate(key, der) {\n \tder.startSequence();\n \tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n \tder.endSequence();\n\n \tder.endSequence();\n\n \tder.startSequence(asn1.Ber.OctetString);\n \tder.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n \tder.endSequence();\n }\n\n function writePkcs8DSAPublic(key, der) {\n \tder.startSequence();\n \tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n \tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n \tder.endSequence();\n \tder.endSequence();\n\n \tder.startSequence(asn1.Ber.BitString);\n \tder.writeByte(0x00);\n \tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n \tder.endSequence();\n }\n\n function writeECDSACurve(key, der) {\n \tvar curve = algs.curves[key.curve];\n \tif (curve.pkcs8oid) {\n \t\t/* This one has a name in pkcs#8, so just write the oid */\n \t\tder.writeOID(curve.pkcs8oid);\n\n \t} else {\n \t\t// ECParameters sequence\n \t\tder.startSequence();\n\n \t\tvar version = Buffer.from([1]);\n \t\tder.writeBuffer(version, asn1.Ber.Integer);\n\n \t\t// FieldID sequence\n \t\tder.startSequence();\n \t\tder.writeOID('1.2.840.10045.1.1'); // prime-field\n \t\tder.writeBuffer(curve.p, asn1.Ber.Integer);\n \t\tder.endSequence();\n\n \t\t// Curve sequence\n \t\tder.startSequence();\n \t\tvar a = curve.p;\n \t\tif (a[0] === 0x0)\n \t\t\ta = a.slice(1);\n \t\tder.writeBuffer(a, asn1.Ber.OctetString);\n \t\tder.writeBuffer(curve.b, asn1.Ber.OctetString);\n \t\tder.writeBuffer(curve.s, asn1.Ber.BitString);\n \t\tder.endSequence();\n\n \t\tder.writeBuffer(curve.G, asn1.Ber.OctetString);\n \t\tder.writeBuffer(curve.n, asn1.Ber.Integer);\n \t\tvar h = curve.h;\n \t\tif (!h) {\n \t\t\th = Buffer.from([1]);\n \t\t}\n \t\tder.writeBuffer(h, asn1.Ber.Integer);\n\n \t\t// ECParameters\n \t\tder.endSequence();\n \t}\n }\n\n function writePkcs8ECDSAPublic(key, der) {\n \twriteECDSACurve(key, der);\n \tder.endSequence();\n\n \tvar Q = utils.ecNormalize(key.part.Q.data, true);\n \tder.writeBuffer(Q, asn1.Ber.BitString);\n }\n\n function writePkcs8ECDSAPrivate(key, der) {\n \twriteECDSACurve(key, der);\n \tder.endSequence();\n\n \tder.startSequence(asn1.Ber.OctetString);\n \tder.startSequence();\n\n \tvar version = Buffer.from([1]);\n \tder.writeBuffer(version, asn1.Ber.Integer);\n\n \tder.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n\n \tder.startSequence(0xa1);\n \tvar Q = utils.ecNormalize(key.part.Q.data, true);\n \tder.writeBuffer(Q, asn1.Ber.BitString);\n \tder.endSequence();\n\n \tder.endSequence();\n \tder.endSequence();\n }\n\n function writePkcs8EdDSAPublic(key, der) {\n \tder.endSequence();\n\n \tutils.writeBitString(der, key.part.A.data);\n }\n\n function writePkcs8EdDSAPrivate(key, der) {\n \tder.endSequence();\n\n \tder.startSequence(asn1.Ber.OctetString);\n \tvar k = utils.mpNormalize(key.part.k.data);\n \t/* RFCs call for storing exactly 32 bytes, so strip any leading zeros */\n \twhile (k.length > 32 && k[0] === 0x00)\n \t\tk = k.slice(1);\n \tder.writeBuffer(k, asn1.Ber.OctetString);\n \tder.endSequence();\n\n \tutils.writeBitString(der, key.part.A.data, asn1.Ber.Context | 1);\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_read = module.exports.read;\n_readPkcs8 = module.exports.readPkcs8;\n_write = module.exports.write;\n_writePkcs8 = module.exports.writePkcs8;\n_pkcs8ToBuffer = module.exports.pkcs8ToBuffer;\n_readECDSACurve = module.exports.readECDSACurve;\n_writeECDSACurve = module.exports.writeECDSACurve;\n\n}, () => ({\n  'assert-plus': _req,\n  'asn1': _req0,\n  'safer-buffer': _req1,\n  '../algs': _req2,\n  '../utils': _req3,\n  '../key': _req4,\n  '../private-key': _req5,\n  './pem': _req6,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}