System.register(["__unresolved_0", "__unresolved_1", "__unresolved_2"], function (_export, _context) {
  "use strict";

  var _cjsLoader, _req, _req0, _cjsExports, __cjsMetaURL;

  _export("default", void 0);

  return {
    setters: [function (_unresolved_) {
      _cjsLoader = _unresolved_.default;
    }, function (_unresolved_2) {
      _req = _unresolved_2.__cjsMetaURL;
    }, function (_unresolved_3) {
      _req0 = _unresolved_3.__cjsMetaURL;
    }],
    execute: function () {
      _export("__cjsMetaURL", __cjsMetaURL = _context.meta.url);

      _cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        // Generated by CoffeeScript 1.12.7
        (function () {
          var NodeType,
              XMLCharacterData,
              XMLText,
              extend = function extend(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
              this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          },
              hasProp = {}.hasOwnProperty;

          NodeType = require('./NodeType');
          XMLCharacterData = require('./XMLCharacterData');

          module.exports = XMLText = function (superClass) {
            extend(XMLText, superClass);

            function XMLText(parent, text) {
              XMLText.__super__.constructor.call(this, parent);

              if (text == null) {
                throw new Error("Missing element text. " + this.debugInfo());
              }

              this.name = "#text";
              this.type = NodeType.Text;
              this.value = this.stringify.text(text);
            }

            Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {
              get: function get() {
                throw new Error("This DOM method is not implemented." + this.debugInfo());
              }
            });
            Object.defineProperty(XMLText.prototype, 'wholeText', {
              get: function get() {
                var next, prev, str;
                str = '';
                prev = this.previousSibling;

                while (prev) {
                  str = prev.data + str;
                  prev = prev.previousSibling;
                }

                str += this.data;
                next = this.nextSibling;

                while (next) {
                  str = str + next.data;
                  next = next.nextSibling;
                }

                return str;
              }
            });

            XMLText.prototype.clone = function () {
              return Object.create(this);
            };

            XMLText.prototype.toString = function (options) {
              return this.options.writer.text(this, this.options.writer.filterOptions(options));
            };

            XMLText.prototype.splitText = function (offset) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };

            XMLText.prototype.replaceWholeText = function (content) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };

            return XMLText;
          }(XMLCharacterData);
        }).call(this); // #endregion ORIGINAL CODE

        _export("default", _cjsExports = module.exports);
      }, () => ({
        './NodeType': _req,
        './XMLCharacterData': _req0
      }));
    }
  };
});
//# sourceMappingURL=3935942a2f18be75faeaee51df1219eae59dd07a.js.map