{"version":3,"sources":["file:///Users/feiwang/workSpace/AITown/cutepet/node_modules/lodash-es/omit.js"],"names":["arrayMap","baseClone","baseUnset","castPath","copyObject","customOmitClone","flatRest","getAllKeysIn","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","omit","object","paths","result","isDeep","path","length"],"mappings":";;;;;;AAAOA,MAAAA,Q;;AACAC,MAAAA,S;;AACAC,MAAAA,S;;AACAC,MAAAA,Q;;AACAC,MAAAA,U;;AACAC,MAAAA,e;;AACAC,MAAAA,Q;;AACAC,MAAAA,Y;;;AAEP;AACIC,MAAAA,e,GAAkB,C;AAClBC,MAAAA,e,GAAkB,C;AAClBC,MAAAA,kB,GAAqB,C;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACIC,MAAAA,I,GAAOL,QAAQ,CAAC,UAASM,MAAT,EAAiBC,KAAjB,EAAwB;AAC1C,YAAIC,MAAM,GAAG,EAAb;;AACA,YAAIF,MAAM,IAAI,IAAd,EAAoB;AAClB,iBAAOE,MAAP;AACD;;AACD,YAAIC,MAAM,GAAG,KAAb;AACAF,QAAAA,KAAK,GAAGb,QAAQ,CAACa,KAAD,EAAQ,UAASG,IAAT,EAAe;AACrCA,UAAAA,IAAI,GAAGb,QAAQ,CAACa,IAAD,EAAOJ,MAAP,CAAf;AACAG,UAAAA,MAAM,KAAKA,MAAM,GAAGC,IAAI,CAACC,MAAL,GAAc,CAA5B,CAAN;AACA,iBAAOD,IAAP;AACD,SAJe,CAAhB;AAKAZ,QAAAA,UAAU,CAACQ,MAAD,EAASL,YAAY,CAACK,MAAD,CAArB,EAA+BE,MAA/B,CAAV;;AACA,YAAIC,MAAJ,EAAY;AACVD,UAAAA,MAAM,GAAGb,SAAS,CAACa,MAAD,EAASN,eAAe,GAAGC,eAAlB,GAAoCC,kBAA7C,EAAiEL,eAAjE,CAAlB;AACD;;AACD,YAAIY,MAAM,GAAGJ,KAAK,CAACI,MAAnB;;AACA,eAAOA,MAAM,EAAb,EAAiB;AACff,UAAAA,SAAS,CAACY,MAAD,EAASD,KAAK,CAACI,MAAD,CAAd,CAAT;AACD;;AACD,eAAOH,MAAP;AACD,OApBkB,C;;yBAsBJH,I","sourcesContent":["import arrayMap from './_arrayMap.js';\nimport baseClone from './_baseClone.js';\nimport baseUnset from './_baseUnset.js';\nimport castPath from './_castPath.js';\nimport copyObject from './_copyObject.js';\nimport customOmitClone from './_customOmitClone.js';\nimport flatRest from './_flatRest.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nexport default omit;\n"]}