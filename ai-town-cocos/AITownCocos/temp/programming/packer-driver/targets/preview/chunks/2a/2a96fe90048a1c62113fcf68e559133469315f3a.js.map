{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/rds/signer.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","AWS","service","api","signatureVersion","signingName","operations","requiredAuthTokenOptions","region","hostname","port","username","RDS","Signer","util","inherit","constructor","options","convertUrlToAuthToken","protocol","indexOf","substring","length","getAuthToken","callback","undefined","self","hasCallback","merge","optionsValidation","validateAuthTokenOptions","expires","serviceOptions","endpoint","Endpoint","paramValidation","credentials","Service","request","makeRequest","modifyRequestForAuthToken","presign","err","on","buildAsGet","httpRequest","body","queryParamsToString","Action","DBUser","message","key","Object","prototype","hasOwnProperty","call","error","Error","code","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n\n /**\n  * @api private\n  */\n var service = null;\n\n /**\n  * @api private\n  */\n var api = {\n     signatureVersion: 'v4',\n     signingName: 'rds-db',\n     operations: {}\n };\n\n /**\n  * @api private\n  */\n var requiredAuthTokenOptions = {\n     region: 'string',\n     hostname: 'string',\n     port: 'number',\n     username: 'string'\n };\n\n /**\n  * A signer object can be used to generate an auth token to a database.\n  */\n AWS.RDS.Signer = AWS.util.inherit({\n     /**\n      * Creates a signer object can be used to generate an auth token.\n      *\n      * @option options credentials [AWS.Credentials] the AWS credentials\n      *   to sign requests with. Uses the default credential provider chain\n      *   if not specified.\n      * @option options hostname [String] the hostname of the database to connect to.\n      * @option options port [Number] the port number the database is listening on.\n      * @option options region [String] the region the database is located in.\n      * @option options username [String] the username to login as.\n      * @example Passing in options to constructor\n      *   var signer = new AWS.RDS.Signer({\n      *     credentials: new AWS.SharedIniFileCredentials({profile: 'default'}),\n      *     region: 'us-east-1',\n      *     hostname: 'db.us-east-1.rds.amazonaws.com',\n      *     port: 8000,\n      *     username: 'name'\n      *   });\n      */\n     constructor: function Signer(options) {\n         this.options = options || {};\n     },\n\n     /**\n      * @api private\n      * Strips the protocol from a url.\n      */\n     convertUrlToAuthToken: function convertUrlToAuthToken(url) {\n         // we are always using https as the protocol\n         var protocol = 'https://';\n         if (url.indexOf(protocol) === 0) {\n             return url.substring(protocol.length);\n         }\n     },\n\n     /**\n      * @overload getAuthToken(options = {}, [callback])\n      *   Generate an auth token to a database.\n      *   @note You must ensure that you have static or previously resolved\n      *     credentials if you call this method synchronously (with no callback),\n      *     otherwise it may not properly sign the request. If you cannot guarantee\n      *     this (you are using an asynchronous credential provider, i.e., EC2\n      *     IAM roles), you should always call this method with an asynchronous\n      *     callback.\n      *\n      *   @param options [map] The fields to use when generating an auth token.\n      *     Any options specified here will be merged on top of any options passed\n      *     to AWS.RDS.Signer:\n      *\n      *     * **credentials** (AWS.Credentials) &mdash; the AWS credentials\n      *         to sign requests with. Uses the default credential provider chain\n      *         if not specified.\n      *     * **hostname** (String) &mdash; the hostname of the database to connect to.\n      *     * **port** (Number) &mdash; the port number the database is listening on.\n      *     * **region** (String) &mdash; the region the database is located in.\n      *     * **username** (String) &mdash; the username to login as.\n      *   @return [String] if called synchronously (with no callback), returns the\n      *     auth token.\n      *   @return [null] nothing is returned if a callback is provided.\n      *   @callback callback function (err, token)\n      *     If a callback is supplied, it is called when an auth token has been generated.\n      *     @param err [Error] the error object returned from the signer.\n      *     @param token [String] the auth token.\n      *\n      *   @example Generating an auth token synchronously\n      *     var signer = new AWS.RDS.Signer({\n      *       // configure options\n      *       region: 'us-east-1',\n      *       username: 'default',\n      *       hostname: 'db.us-east-1.amazonaws.com',\n      *       port: 8000\n      *     });\n      *     var token = signer.getAuthToken({\n      *       // these options are merged with those defined when creating the signer, overriding in the case of a duplicate option\n      *       // credentials are not specified here or when creating the signer, so default credential provider will be used\n      *       username: 'test' // overriding username\n      *     });\n      *   @example Generating an auth token asynchronously\n      *     var signer = new AWS.RDS.Signer({\n      *       // configure options\n      *       region: 'us-east-1',\n      *       username: 'default',\n      *       hostname: 'db.us-east-1.amazonaws.com',\n      *       port: 8000\n      *     });\n      *     signer.getAuthToken({\n      *       // these options are merged with those defined when creating the signer, overriding in the case of a duplicate option\n      *       // credentials are not specified here or when creating the signer, so default credential provider will be used\n      *       username: 'test' // overriding username\n      *     }, function(err, token) {\n      *       if (err) {\n      *         // handle error\n      *       } else {\n      *         // use token\n      *       }\n      *     });\n      *\n      */\n     getAuthToken: function getAuthToken(options, callback) {\n         if (typeof options === 'function' && callback === undefined) {\n             callback = options;\n             options = {};\n         }\n         var self = this;\n         var hasCallback = typeof callback === 'function';\n         // merge options with existing options\n         options = AWS.util.merge(this.options, options);\n         // validate options\n         var optionsValidation = this.validateAuthTokenOptions(options);\n         if (optionsValidation !== true) {\n             if (hasCallback) {\n                 return callback(optionsValidation, null);\n             }\n             throw optionsValidation;\n         }\n\n         // 15 minutes\n         var expires = 900;\n         // create service to generate a request from\n         var serviceOptions = {\n             region: options.region,\n             endpoint: new AWS.Endpoint(options.hostname + ':' + options.port),\n             paramValidation: false,\n             signatureVersion: 'v4'\n         };\n         if (options.credentials) {\n             serviceOptions.credentials = options.credentials;\n         }\n         service = new AWS.Service(serviceOptions);\n         // ensure the SDK is using sigv4 signing (config is not enough)\n         service.api = api;\n\n         var request = service.makeRequest();\n         // add listeners to request to properly build auth token\n         this.modifyRequestForAuthToken(request, options);\n\n         if (hasCallback) {\n             request.presign(expires, function(err, url) {\n                 if (url) {\n                     url = self.convertUrlToAuthToken(url);\n                 }\n                 callback(err, url);\n             });\n         } else {\n             var url = request.presign(expires);\n             return this.convertUrlToAuthToken(url);\n         }\n     },\n\n     /**\n      * @api private\n      * Modifies a request to allow the presigner to generate an auth token.\n      */\n     modifyRequestForAuthToken: function modifyRequestForAuthToken(request, options) {\n         request.on('build', request.buildAsGet);\n         var httpRequest = request.httpRequest;\n         httpRequest.body = AWS.util.queryParamsToString({\n             Action: 'connect',\n             DBUser: options.username\n         });\n     },\n\n     /**\n      * @api private\n      * Validates that the options passed in contain all the keys with values of the correct type that\n      *   are needed to generate an auth token.\n      */\n     validateAuthTokenOptions: function validateAuthTokenOptions(options) {\n         // iterate over all keys in options\n         var message = '';\n         options = options || {};\n         for (var key in requiredAuthTokenOptions) {\n             if (!Object.prototype.hasOwnProperty.call(requiredAuthTokenOptions, key)) {\n                 continue;\n             }\n             if (typeof options[key] !== requiredAuthTokenOptions[key]) {\n                 message += 'option \\'' + key + '\\' should have been type \\'' + requiredAuthTokenOptions[key] + '\\', was \\'' + typeof options[key] + '\\'.\\n';\n             }\n         }\n         if (message.length) {\n             return AWS.util.error(new Error(), {\n                 code: 'InvalidParameter',\n                 message: message\n             });\n         }\n         return true;\n     }\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}