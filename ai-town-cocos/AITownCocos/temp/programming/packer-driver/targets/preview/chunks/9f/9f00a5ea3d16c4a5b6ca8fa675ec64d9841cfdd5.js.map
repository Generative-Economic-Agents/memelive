{"version":3,"sources":["file:///Users/feiwang/workSpace/AITown/cutepet/assets/src/module/main/GundongTxtComponent.ts"],"names":["_decorator","Component","Label","Node","ScrollingText","ccclass","property","GundongTxtComponent","start","onDestroy","update","deltaTime","finishHandler","Sprite_bg","active","taskchangeHandler","da","last","data","cur","status","sct","Label_tishi","getComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,I,OAAAA,I;;AAI9BC,MAAAA,a,iBAAAA,a;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;qCAGjBO,mB,WADZF,OAAO,CAAC,qBAAD,C,UAEHC,QAAQ,CAACH,IAAD,C,UAERG,QAAQ,CAACJ,KAAD,C,2BAJb,MACaK,mBADb,SACyCN,SADzC,CACmD;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAK/CO,QAAAA,KAAK,GAAG,CAEP;;AACSC,QAAAA,SAAS,GAAS,CACxB;AAEH;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AAEOC,QAAAA,aAAa,GAAE;AACnB,eAAKC,SAAL,CAAeC,MAAf,GAAwB,KAAxB;AACH;;AACOC,QAAAA,iBAAiB,CAACC,EAAD,EAAI;AACzB,cAAIC,IAAa,GAAGD,EAAE,CAACE,IAAH,CAAQD,IAA5B;AACA,cAAIE,GAAY,GAAGH,EAAE,CAACE,IAAH,CAAQC,GAA3B;;AACA,cAAGF,IAAI,CAACG,MAAL,IAAa,CAAb,IAAgBD,GAAG,CAACC,MAAJ,IAAY,CAA/B,EAAiC;AAC7B,gBAAIC,GAAG,GAAG,KAAKC,WAAL,CAAiBC,YAAjB;AAAA;AAAA,+CAAV,CAD6B,CAE7B;AACA;AACH;AACJ;;AA5B8C,O;;;;;iBAEtB,I;;;;;;;iBAEG,I","sourcesContent":["import { _decorator, Component, Label, Node } from 'cc';\nimport { EventType } from '../../EventType';\nimport { modelMgr, observer } from '../../game/App';\nimport { taskcell } from '../../game/config/DataStruct';\nimport { ScrollingText } from './ScrollingText';\nimport StaticConfigModel from '../../model/StaticConfig/StaticConfigModel';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GundongTxtComponent')\nexport class GundongTxtComponent extends Component {\n    @property(Node)\n    public Sprite_bg: Node = null;\n    @property(Label)\n    public Label_tishi: Label = null;\n    start() {\n\n    }\n    protected onDestroy(): void {\n        // observer.on(EventType.SOCKET_TASK_CHANGE, this.taskchangeHandler,this);\n\n    }\n\n    update(deltaTime: number) {\n        \n    }\n\n    private finishHandler(){\n        this.Sprite_bg.active = false;\n    }\n    private taskchangeHandler(da){\n        let last:taskcell = da.data.last;\n        let cur:taskcell = da.data.cur;\n        if(last.status!=2&&cur.status==2){\n            let sct = this.Label_tishi.getComponent(ScrollingText);\n            // let txt = modelMgr.configModel.getconfigByGrpAId(StaticConfigModel.TaskCfg,cur.taskId);\n            // sct.startScroll(txt);\n        }\n    }\n}\n\n\n"]}