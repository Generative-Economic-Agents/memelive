System.register(["__unresolved_0"], function (_export, _context) {
  "use strict";

  var _cjsLoader, _cjsExports, _assign, _isFunction, _isObject, _isArray, _isEmpty, _isPlainObject, _getValue, __cjsMetaURL;

  _export("default", void 0);

  return {
    setters: [function (_unresolved_) {
      _cjsLoader = _unresolved_.default;
    }],
    execute: function () {
      _export("__cjsMetaURL", __cjsMetaURL = _context.meta.url);

      _cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        // Generated by CoffeeScript 1.12.7
        (function () {
          var assign,
              getValue,
              isArray,
              isEmpty,
              isFunction,
              isObject,
              isPlainObject,
              slice = [].slice,
              hasProp = {}.hasOwnProperty;

          assign = function assign() {
            var i, key, len, source, sources, target;
            target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];

            if (isFunction(Object.assign)) {
              Object.assign.apply(null, arguments);
            } else {
              for (i = 0, len = sources.length; i < len; i++) {
                source = sources[i];

                if (source != null) {
                  for (key in source) {
                    if (!hasProp.call(source, key)) continue;
                    target[key] = source[key];
                  }
                }
              }
            }

            return target;
          };

          isFunction = function isFunction(val) {
            return !!val && Object.prototype.toString.call(val) === '[object Function]';
          };

          isObject = function isObject(val) {
            var ref;
            return !!val && ((ref = typeof val) === 'function' || ref === 'object');
          };

          isArray = function isArray(val) {
            if (isFunction(Array.isArray)) {
              return Array.isArray(val);
            } else {
              return Object.prototype.toString.call(val) === '[object Array]';
            }
          };

          isEmpty = function isEmpty(val) {
            var key;

            if (isArray(val)) {
              return !val.length;
            } else {
              for (key in val) {
                if (!hasProp.call(val, key)) continue;
                return false;
              }

              return true;
            }
          };

          isPlainObject = function isPlainObject(val) {
            var ctor, proto;
            return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === 'function' && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);
          };

          getValue = function getValue(obj) {
            if (isFunction(obj.valueOf)) {
              return obj.valueOf();
            } else {
              return obj;
            }
          };

          module.exports.assign = assign;
          module.exports.isFunction = isFunction;
          module.exports.isObject = isObject;
          module.exports.isArray = isArray;
          module.exports.isEmpty = isEmpty;
          module.exports.isPlainObject = isPlainObject;
          module.exports.getValue = getValue;
        }).call(this); // #endregion ORIGINAL CODE

        _export("default", _cjsExports = module.exports);

        _assign = module.exports.assign;
        _isFunction = module.exports.isFunction;
        _isObject = module.exports.isObject;
        _isArray = module.exports.isArray;
        _isEmpty = module.exports.isEmpty;
        _isPlainObject = module.exports.isPlainObject;
        _getValue = module.exports.getValue;
      }, {});
    }
  };
});
//# sourceMappingURL=6ba7a9b754cec27e0a7cc31fc35df3ddbf458ca4.js.map