{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/apis/payment-cryptography-2021-09-14.min.json"],"names":["version","metadata","apiVersion","endpointPrefix","jsonVersion","protocol","serviceFullName","serviceId","signatureVersion","signingName","targetPrefix","uid","operations","CreateAlias","input","type","required","members","AliasName","KeyArn","output","Alias","shape","idempotent","CreateKey","KeyAttributes","KeyCheckValueAlgorithm","Exportable","Enabled","Tags","Key","DeleteAlias","DeleteKey","KeyIdentifier","DeleteKeyInDays","ExportKey","KeyMaterial","Tr31KeyBlock","WrappingKeyIdentifier","KeyBlockHeaders","Tr34KeyBlock","CertificateAuthorityPublicKeyIdentifier","WrappingKeyCertificate","ExportToken","KeyBlockFormat","RandomNonce","KeyCryptogram","WrappingSpec","union","ExportKeyIdentifier","ExportAttributes","ExportDukptInitialKey","KeySerialNumber","WrappedKey","WrappingKeyArn","WrappedKeyMaterialFormat","sensitive","KeyCheckValue","GetAlias","GetKey","GetParametersForExport","KeyMaterialType","SigningKeyAlgorithm","SigningKeyCertificate","SigningKeyCertificateChain","ParametersValidUntilTimestamp","GetParametersForImport","WrappingKeyAlgorithm","WrappingKeyCertificateChain","ImportToken","GetPublicKeyCertificate","KeyCertificate","KeyCertificateChain","ImportKey","RootCertificatePublicKey","PublicKeyCertificate","TrustedCertificatePublicKey","WrappedKeyBlock","WrappedKeyCryptogram","ListAliases","NextToken","MaxResults","Aliases","member","ListKeys","KeyState","Keys","ListTagsForResource","ResourceArn","RestoreKey","StartKeyUsage","StopKeyUsage","TagResource","UntagResource","TagKeys","UpdateAlias","shapes","S5","S7","KeyUsage","KeyClass","KeyAlgorithm","KeyModesOfUse","Sb","Encrypt","Decrypt","Wrap","Unwrap","Generate","Sign","Verify","DeriveKey","NoRestrictions","Sf","Value","Sk","KeyOrigin","CreateTimestamp","UsageStartTimestamp","UsageStopTimestamp","DeletePendingTimestamp","DeleteTimestamp","Sy","KeyExportability","KeyVersion","OptionalBlocks","key","value","S15"],"mappings":"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","sourcesContent":["export default {\n  version: '2.0',\n  metadata: {\n    apiVersion: '2021-09-14',\n    endpointPrefix: 'controlplane.payment-cryptography',\n    jsonVersion: '1.0',\n    protocol: 'json',\n    serviceFullName: 'Payment Cryptography Control Plane',\n    serviceId: 'Payment Cryptography',\n    signatureVersion: 'v4',\n    signingName: 'payment-cryptography',\n    targetPrefix: 'PaymentCryptographyControlPlane',\n    uid: 'payment-cryptography-2021-09-14'\n  },\n  operations: {\n    CreateAlias: {\n      input: {\n        type: 'structure',\n        required: [\n          'AliasName'\n        ],\n        members: {\n          AliasName: {},\n          KeyArn: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'Alias'\n        ],\n        members: {\n          Alias: {\n            shape: 'S5'\n          }\n        }\n      },\n      idempotent: true\n    },\n    CreateKey: {\n      input: {\n        type: 'structure',\n        required: [\n          'KeyAttributes',\n          'Exportable'\n        ],\n        members: {\n          KeyAttributes: {\n            shape: 'S7'\n          },\n          KeyCheckValueAlgorithm: {},\n          Exportable: {\n            type: 'boolean'\n          },\n          Enabled: {\n            type: 'boolean'\n          },\n          Tags: {\n            shape: 'Sf'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'Key'\n        ],\n        members: {\n          Key: {\n            shape: 'Sk'\n          }\n        }\n      }\n    },\n    DeleteAlias: {\n      input: {\n        type: 'structure',\n        required: [\n          'AliasName'\n        ],\n        members: {\n          AliasName: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      },\n      idempotent: true\n    },\n    DeleteKey: {\n      input: {\n        type: 'structure',\n        required: [\n          'KeyIdentifier'\n        ],\n        members: {\n          KeyIdentifier: {},\n          DeleteKeyInDays: {\n            type: 'integer'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'Key'\n        ],\n        members: {\n          Key: {\n            shape: 'Sk'\n          }\n        }\n      },\n      idempotent: true\n    },\n    ExportKey: {\n      input: {\n        type: 'structure',\n        required: [\n          'KeyMaterial',\n          'ExportKeyIdentifier'\n        ],\n        members: {\n          KeyMaterial: {\n            type: 'structure',\n            members: {\n              Tr31KeyBlock: {\n                type: 'structure',\n                required: [\n                  'WrappingKeyIdentifier'\n                ],\n                members: {\n                  WrappingKeyIdentifier: {},\n                  KeyBlockHeaders: {\n                    shape: 'Sy'\n                  }\n                }\n              },\n              Tr34KeyBlock: {\n                type: 'structure',\n                required: [\n                  'CertificateAuthorityPublicKeyIdentifier',\n                  'WrappingKeyCertificate',\n                  'ExportToken',\n                  'KeyBlockFormat'\n                ],\n                members: {\n                  CertificateAuthorityPublicKeyIdentifier: {},\n                  WrappingKeyCertificate: {\n                    shape: 'S15'\n                  },\n                  ExportToken: {},\n                  KeyBlockFormat: {},\n                  RandomNonce: {},\n                  KeyBlockHeaders: {\n                    shape: 'Sy'\n                  }\n                }\n              },\n              KeyCryptogram: {\n                type: 'structure',\n                required: [\n                  'CertificateAuthorityPublicKeyIdentifier',\n                  'WrappingKeyCertificate'\n                ],\n                members: {\n                  CertificateAuthorityPublicKeyIdentifier: {},\n                  WrappingKeyCertificate: {\n                    shape: 'S15'\n                  },\n                  WrappingSpec: {}\n                }\n              }\n            },\n            union: true\n          },\n          ExportKeyIdentifier: {},\n          ExportAttributes: {\n            type: 'structure',\n            members: {\n              ExportDukptInitialKey: {\n                type: 'structure',\n                required: [\n                  'KeySerialNumber'\n                ],\n                members: {\n                  KeySerialNumber: {}\n                }\n              },\n              KeyCheckValueAlgorithm: {}\n            }\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          WrappedKey: {\n            type: 'structure',\n            required: [\n              'WrappingKeyArn',\n              'WrappedKeyMaterialFormat',\n              'KeyMaterial'\n            ],\n            members: {\n              WrappingKeyArn: {},\n              WrappedKeyMaterialFormat: {},\n              KeyMaterial: {\n                type: 'string',\n                sensitive: true\n              },\n              KeyCheckValue: {},\n              KeyCheckValueAlgorithm: {}\n            }\n          }\n        }\n      }\n    },\n    GetAlias: {\n      input: {\n        type: 'structure',\n        required: [\n          'AliasName'\n        ],\n        members: {\n          AliasName: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'Alias'\n        ],\n        members: {\n          Alias: {\n            shape: 'S5'\n          }\n        }\n      }\n    },\n    GetKey: {\n      input: {\n        type: 'structure',\n        required: [\n          'KeyIdentifier'\n        ],\n        members: {\n          KeyIdentifier: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'Key'\n        ],\n        members: {\n          Key: {\n            shape: 'Sk'\n          }\n        }\n      }\n    },\n    GetParametersForExport: {\n      input: {\n        type: 'structure',\n        required: [\n          'KeyMaterialType',\n          'SigningKeyAlgorithm'\n        ],\n        members: {\n          KeyMaterialType: {},\n          SigningKeyAlgorithm: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'SigningKeyCertificate',\n          'SigningKeyCertificateChain',\n          'SigningKeyAlgorithm',\n          'ExportToken',\n          'ParametersValidUntilTimestamp'\n        ],\n        members: {\n          SigningKeyCertificate: {\n            shape: 'S15'\n          },\n          SigningKeyCertificateChain: {\n            shape: 'S15'\n          },\n          SigningKeyAlgorithm: {},\n          ExportToken: {},\n          ParametersValidUntilTimestamp: {\n            type: 'timestamp'\n          }\n        }\n      }\n    },\n    GetParametersForImport: {\n      input: {\n        type: 'structure',\n        required: [\n          'KeyMaterialType',\n          'WrappingKeyAlgorithm'\n        ],\n        members: {\n          KeyMaterialType: {},\n          WrappingKeyAlgorithm: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'WrappingKeyCertificate',\n          'WrappingKeyCertificateChain',\n          'WrappingKeyAlgorithm',\n          'ImportToken',\n          'ParametersValidUntilTimestamp'\n        ],\n        members: {\n          WrappingKeyCertificate: {\n            shape: 'S15'\n          },\n          WrappingKeyCertificateChain: {\n            shape: 'S15'\n          },\n          WrappingKeyAlgorithm: {},\n          ImportToken: {},\n          ParametersValidUntilTimestamp: {\n            type: 'timestamp'\n          }\n        }\n      }\n    },\n    GetPublicKeyCertificate: {\n      input: {\n        type: 'structure',\n        required: [\n          'KeyIdentifier'\n        ],\n        members: {\n          KeyIdentifier: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'KeyCertificate',\n          'KeyCertificateChain'\n        ],\n        members: {\n          KeyCertificate: {\n            shape: 'S15'\n          },\n          KeyCertificateChain: {\n            shape: 'S15'\n          }\n        }\n      }\n    },\n    ImportKey: {\n      input: {\n        type: 'structure',\n        required: [\n          'KeyMaterial'\n        ],\n        members: {\n          KeyMaterial: {\n            type: 'structure',\n            members: {\n              RootCertificatePublicKey: {\n                type: 'structure',\n                required: [\n                  'KeyAttributes',\n                  'PublicKeyCertificate'\n                ],\n                members: {\n                  KeyAttributes: {\n                    shape: 'S7'\n                  },\n                  PublicKeyCertificate: {\n                    shape: 'S15'\n                  }\n                }\n              },\n              TrustedCertificatePublicKey: {\n                type: 'structure',\n                required: [\n                  'KeyAttributes',\n                  'PublicKeyCertificate',\n                  'CertificateAuthorityPublicKeyIdentifier'\n                ],\n                members: {\n                  KeyAttributes: {\n                    shape: 'S7'\n                  },\n                  PublicKeyCertificate: {\n                    shape: 'S15'\n                  },\n                  CertificateAuthorityPublicKeyIdentifier: {}\n                }\n              },\n              Tr31KeyBlock: {\n                type: 'structure',\n                required: [\n                  'WrappingKeyIdentifier',\n                  'WrappedKeyBlock'\n                ],\n                members: {\n                  WrappingKeyIdentifier: {},\n                  WrappedKeyBlock: {}\n                }\n              },\n              Tr34KeyBlock: {\n                type: 'structure',\n                required: [\n                  'CertificateAuthorityPublicKeyIdentifier',\n                  'SigningKeyCertificate',\n                  'ImportToken',\n                  'WrappedKeyBlock',\n                  'KeyBlockFormat'\n                ],\n                members: {\n                  CertificateAuthorityPublicKeyIdentifier: {},\n                  SigningKeyCertificate: {\n                    shape: 'S15'\n                  },\n                  ImportToken: {},\n                  WrappedKeyBlock: {},\n                  KeyBlockFormat: {},\n                  RandomNonce: {}\n                }\n              },\n              KeyCryptogram: {\n                type: 'structure',\n                required: [\n                  'KeyAttributes',\n                  'Exportable',\n                  'WrappedKeyCryptogram',\n                  'ImportToken'\n                ],\n                members: {\n                  KeyAttributes: {\n                    shape: 'S7'\n                  },\n                  Exportable: {\n                    type: 'boolean'\n                  },\n                  WrappedKeyCryptogram: {},\n                  ImportToken: {},\n                  WrappingSpec: {}\n                }\n              }\n            },\n            union: true\n          },\n          KeyCheckValueAlgorithm: {},\n          Enabled: {\n            type: 'boolean'\n          },\n          Tags: {\n            shape: 'Sf'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'Key'\n        ],\n        members: {\n          Key: {\n            shape: 'Sk'\n          }\n        }\n      }\n    },\n    ListAliases: {\n      input: {\n        type: 'structure',\n        members: {\n          NextToken: {},\n          MaxResults: {\n            type: 'integer'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'Aliases'\n        ],\n        members: {\n          Aliases: {\n            type: 'list',\n            member: {\n              shape: 'S5'\n            }\n          },\n          NextToken: {}\n        }\n      }\n    },\n    ListKeys: {\n      input: {\n        type: 'structure',\n        members: {\n          KeyState: {},\n          NextToken: {},\n          MaxResults: {\n            type: 'integer'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'Keys'\n        ],\n        members: {\n          Keys: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'KeyArn',\n                'KeyState',\n                'KeyAttributes',\n                'KeyCheckValue',\n                'Exportable',\n                'Enabled'\n              ],\n              members: {\n                KeyArn: {},\n                KeyState: {},\n                KeyAttributes: {\n                  shape: 'S7'\n                },\n                KeyCheckValue: {},\n                Exportable: {\n                  type: 'boolean'\n                },\n                Enabled: {\n                  type: 'boolean'\n                }\n              }\n            }\n          },\n          NextToken: {}\n        }\n      }\n    },\n    ListTagsForResource: {\n      input: {\n        type: 'structure',\n        required: [\n          'ResourceArn'\n        ],\n        members: {\n          ResourceArn: {},\n          NextToken: {},\n          MaxResults: {\n            type: 'integer'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'Tags'\n        ],\n        members: {\n          Tags: {\n            shape: 'Sf'\n          },\n          NextToken: {}\n        }\n      }\n    },\n    RestoreKey: {\n      input: {\n        type: 'structure',\n        required: [\n          'KeyIdentifier'\n        ],\n        members: {\n          KeyIdentifier: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'Key'\n        ],\n        members: {\n          Key: {\n            shape: 'Sk'\n          }\n        }\n      }\n    },\n    StartKeyUsage: {\n      input: {\n        type: 'structure',\n        required: [\n          'KeyIdentifier'\n        ],\n        members: {\n          KeyIdentifier: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'Key'\n        ],\n        members: {\n          Key: {\n            shape: 'Sk'\n          }\n        }\n      }\n    },\n    StopKeyUsage: {\n      input: {\n        type: 'structure',\n        required: [\n          'KeyIdentifier'\n        ],\n        members: {\n          KeyIdentifier: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'Key'\n        ],\n        members: {\n          Key: {\n            shape: 'Sk'\n          }\n        }\n      }\n    },\n    TagResource: {\n      input: {\n        type: 'structure',\n        required: [\n          'ResourceArn',\n          'Tags'\n        ],\n        members: {\n          ResourceArn: {},\n          Tags: {\n            shape: 'Sf'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      }\n    },\n    UntagResource: {\n      input: {\n        type: 'structure',\n        required: [\n          'ResourceArn',\n          'TagKeys'\n        ],\n        members: {\n          ResourceArn: {},\n          TagKeys: {\n            type: 'list',\n            member: {}\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      }\n    },\n    UpdateAlias: {\n      input: {\n        type: 'structure',\n        required: [\n          'AliasName'\n        ],\n        members: {\n          AliasName: {},\n          KeyArn: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'Alias'\n        ],\n        members: {\n          Alias: {\n            shape: 'S5'\n          }\n        }\n      }\n    }\n  },\n  shapes: {\n    S5: {\n      type: 'structure',\n      required: [\n        'AliasName'\n      ],\n      members: {\n        AliasName: {},\n        KeyArn: {}\n      }\n    },\n    S7: {\n      type: 'structure',\n      required: [\n        'KeyUsage',\n        'KeyClass',\n        'KeyAlgorithm',\n        'KeyModesOfUse'\n      ],\n      members: {\n        KeyUsage: {},\n        KeyClass: {},\n        KeyAlgorithm: {},\n        KeyModesOfUse: {\n          shape: 'Sb'\n        }\n      }\n    },\n    Sb: {\n      type: 'structure',\n      members: {\n        Encrypt: {\n          type: 'boolean'\n        },\n        Decrypt: {\n          type: 'boolean'\n        },\n        Wrap: {\n          type: 'boolean'\n        },\n        Unwrap: {\n          type: 'boolean'\n        },\n        Generate: {\n          type: 'boolean'\n        },\n        Sign: {\n          type: 'boolean'\n        },\n        Verify: {\n          type: 'boolean'\n        },\n        DeriveKey: {\n          type: 'boolean'\n        },\n        NoRestrictions: {\n          type: 'boolean'\n        }\n      }\n    },\n    Sf: {\n      type: 'list',\n      member: {\n        type: 'structure',\n        required: [\n          'Key'\n        ],\n        members: {\n          Key: {},\n          Value: {}\n        }\n      }\n    },\n    Sk: {\n      type: 'structure',\n      required: [\n        'KeyArn',\n        'KeyAttributes',\n        'KeyCheckValue',\n        'KeyCheckValueAlgorithm',\n        'Enabled',\n        'Exportable',\n        'KeyState',\n        'KeyOrigin',\n        'CreateTimestamp'\n      ],\n      members: {\n        KeyArn: {},\n        KeyAttributes: {\n          shape: 'S7'\n        },\n        KeyCheckValue: {},\n        KeyCheckValueAlgorithm: {},\n        Enabled: {\n          type: 'boolean'\n        },\n        Exportable: {\n          type: 'boolean'\n        },\n        KeyState: {},\n        KeyOrigin: {},\n        CreateTimestamp: {\n          type: 'timestamp'\n        },\n        UsageStartTimestamp: {\n          type: 'timestamp'\n        },\n        UsageStopTimestamp: {\n          type: 'timestamp'\n        },\n        DeletePendingTimestamp: {\n          type: 'timestamp'\n        },\n        DeleteTimestamp: {\n          type: 'timestamp'\n        }\n      }\n    },\n    Sy: {\n      type: 'structure',\n      members: {\n        KeyModesOfUse: {\n          shape: 'Sb'\n        },\n        KeyExportability: {},\n        KeyVersion: {},\n        OptionalBlocks: {\n          type: 'map',\n          key: {\n            type: 'string',\n            sensitive: true\n          },\n          value: {\n            type: 'string',\n            sensitive: true\n          }\n        }\n      }\n    },\n    S15: {\n      type: 'string',\n      sensitive: true\n    }\n  }\n}"]}