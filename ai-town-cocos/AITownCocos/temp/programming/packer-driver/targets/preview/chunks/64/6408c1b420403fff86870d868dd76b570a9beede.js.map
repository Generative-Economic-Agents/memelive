{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/token.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","AWS","Token","util","inherit","constructor","options","hideProperties","expired","expireTime","refreshCallbacks","arguments","length","token","expiryWindow","needsRefresh","currentTime","date","getDate","getTime","adjustedTime","Date","get","callback","self","refresh","err","coalesceRefresh","sync","push","load","onLoad","arrayEach","defer","addPromisesToClass","PromiseDependency","prototype","getPromise","promisifyMethod","refreshPromise","deletePromisesFromClass","addPromises","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './core';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('./core');\n\n /**\n  * Represents AWS token object, which contains {token}, and optional\n  * {expireTime}.\n  * Creating a `Token` object allows you to pass around your\n  * token to configuration and service objects.\n  *\n  * Note that this class typically does not need to be constructed manually,\n  * as the {AWS.Config} and {AWS.Service} classes both accept simple\n  * options hashes with the two keys. The token from this object will be used\n  * automatically in operations which require them.\n  *\n  * ## Expiring and Refreshing Token\n  *\n  * Occasionally token can expire in the middle of a long-running\n  * application. In this case, the SDK will automatically attempt to\n  * refresh the token from the storage location if the Token\n  * class implements the {refresh} method.\n  *\n  * If you are implementing a token storage location, you\n  * will want to create a subclass of the `Token` class and\n  * override the {refresh} method. This method allows token to be\n  * retrieved from the backing store, be it a file system, database, or\n  * some network storage. The method should reset the token attributes\n  * on the object.\n  *\n  * @!attribute token\n  *   @return [String] represents the literal token string. This will typically\n  *     be a base64 encoded string.\n  * @!attribute expireTime\n  *   @return [Date] a time when token should be considered expired. Used\n  *     in conjunction with {expired}.\n  * @!attribute expired\n  *   @return [Boolean] whether the token is expired and require a refresh. Used\n  *     in conjunction with {expireTime}.\n  */\n AWS.Token = AWS.util.inherit({\n   /**\n    * Creates a Token object with a given set of information in options hash.\n    * @option options token [String] represents the literal token string.\n    * @option options expireTime [Date] field representing the time at which\n    *   the token expires.\n    * @example Create a token object\n    *   var token = new AWS.Token({ token: 'token' });\n    */\n   constructor: function Token(options) {\n     // hide token from being displayed with util.inspect\n     AWS.util.hideProperties(this, ['token']);\n\n     this.expired = false;\n     this.expireTime = null;\n     this.refreshCallbacks = [];\n     if (arguments.length === 1) {\n       var options = arguments[0];\n       this.token = options.token;\n       this.expireTime = options.expireTime;\n     }\n   },\n\n   /**\n    * @return [Integer] the number of seconds before {expireTime} during which\n    *   the token will be considered expired.\n    */\n   expiryWindow: 15,\n\n   /**\n    * @return [Boolean] whether the Token object should call {refresh}\n    * @note Subclasses should override this method to provide custom refresh\n    *   logic.\n    */\n   needsRefresh: function needsRefresh() {\n     var currentTime = AWS.util.date.getDate().getTime();\n     var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);\n\n     if (this.expireTime && adjustedTime > this.expireTime)\n       return true;\n\n     return this.expired || !this.token;\n   },\n\n   /**\n    * Gets the existing token, refreshing them if they are not yet loaded\n    * or have expired. Users should call this method before using {refresh},\n    * as this will not attempt to reload token when they are already\n    * loaded into the object.\n    *\n    * @callback callback function(err)\n    *   When this callback is called with no error, it means either token\n    *   do not need to be refreshed or refreshed token information has\n    *   been loaded into the object (as the `token` property).\n    *   @param err [Error] if an error occurred, this value will be filled\n    */\n   get: function get(callback) {\n     var self = this;\n     if (this.needsRefresh()) {\n       this.refresh(function(err) {\n         if (!err) self.expired = false; // reset expired flag\n         if (callback) callback(err);\n       });\n     } else if (callback) {\n       callback();\n     }\n   },\n\n   /**\n    * @!method  getPromise()\n    *   Returns a 'thenable' promise.\n    *   Gets the existing token, refreshing it if it's not yet loaded\n    *   or have expired. Users should call this method before using {refresh},\n    *   as this will not attempt to reload token when it's already\n    *   loaded into the object.\n    *\n    *   Two callbacks can be provided to the `then` method on the returned promise.\n    *   The first callback will be called if the promise is fulfilled, and the second\n    *   callback will be called if the promise is rejected.\n    *   @callback fulfilledCallback function()\n    *     Called if the promise is fulfilled. When this callback is called, it means\n    *     either token does not need to be refreshed or refreshed token information\n    *     has been loaded into the object (as the `token` property).\n    *   @callback rejectedCallback function(err)\n    *     Called if the promise is rejected.\n    *     @param err [Error] if an error occurred, this value will be filled.\n    *   @return [Promise] A promise that represents the state of the `get` call.\n    *   @example Calling the `getPromise` method.\n    *     var promise = tokenProvider.getPromise();\n    *     promise.then(function() { ... }, function(err) { ... });\n    */\n\n   /**\n    * @!method  refreshPromise()\n    *   Returns a 'thenable' promise.\n    *   Refreshes the token. Users should call {get} before attempting\n    *   to forcibly refresh token.\n    *\n    *   Two callbacks can be provided to the `then` method on the returned promise.\n    *   The first callback will be called if the promise is fulfilled, and the second\n    *   callback will be called if the promise is rejected.\n    *   @callback fulfilledCallback function()\n    *     Called if the promise is fulfilled. When this callback is called, it\n    *     means refreshed token information has been loaded into the object\n    *     (as the `token` property).\n    *   @callback rejectedCallback function(err)\n    *     Called if the promise is rejected.\n    *     @param err [Error] if an error occurred, this value will be filled.\n    *   @return [Promise] A promise that represents the state of the `refresh` call.\n    *   @example Calling the `refreshPromise` method.\n    *     var promise = tokenProvider.refreshPromise();\n    *     promise.then(function() { ... }, function(err) { ... });\n    */\n\n   /**\n    * Refreshes the token. Users should call {get} before attempting\n    * to forcibly refresh token.\n    *\n    * @callback callback function(err)\n    *   When this callback is called with no error, it means refreshed\n    *   token information has been loaded into the object (as the\n    *   `token` property).\n    *   @param err [Error] if an error occurred, this value will be filled\n    * @note Subclasses should override this class to reset the\n    *   {token} on the token object and then call the callback with\n    *   any error information.\n    * @see get\n    */\n   refresh: function refresh(callback) {\n     this.expired = false;\n     callback();\n   },\n\n   /**\n    * @api private\n    * @param callback\n    */\n   coalesceRefresh: function coalesceRefresh(callback, sync) {\n     var self = this;\n     if (self.refreshCallbacks.push(callback) === 1) {\n       self.load(function onLoad(err) {\n         AWS.util.arrayEach(self.refreshCallbacks, function(callback) {\n           if (sync) {\n             callback(err);\n           } else {\n             // callback could throw, so defer to ensure all callbacks are notified\n             AWS.util.defer(function () {\n               callback(err);\n             });\n           }\n         });\n         self.refreshCallbacks.length = 0;\n       });\n     }\n   },\n\n   /**\n    * @api private\n    * @param callback\n    */\n   load: function load(callback) {\n     callback();\n   }\n });\n\n /**\n  * @api private\n  */\n AWS.Token.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n   this.prototype.getPromise = AWS.util.promisifyMethod('get', PromiseDependency);\n   this.prototype.refreshPromise = AWS.util.promisifyMethod('refresh', PromiseDependency);\n };\n\n /**\n  * @api private\n  */\n AWS.Token.deletePromisesFromClass = function deletePromisesFromClass() {\n   delete this.prototype.getPromise;\n   delete this.prototype.refreshPromise;\n };\n\n AWS.util.addPromises(AWS.Token);\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './core': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}