{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/lodash-es/trimEnd.js"],"names":["trimEnd","string","chars","guard","toString","undefined","slice","trimmedEndIndex","baseToString","strSymbols","stringToArray","end","charsEndIndex","castSlice","join"],"mappings":";;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,OAAT,CAAiBC,MAAjB,EAAyBC,KAAzB,EAAgCC,KAAhC,EAAuC;AACrCF,IAAAA,MAAM,GAAGG,QAAQ,CAACH,MAAD,CAAjB;;AACA,QAAIA,MAAM,KAAKE,KAAK,IAAID,KAAK,KAAKG,SAAxB,CAAV,EAA8C;AAC5C,aAAOJ,MAAM,CAACK,KAAP,CAAa,CAAb,EAAgBC,eAAe,CAACN,MAAD,CAAf,GAA0B,CAA1C,CAAP;AACD;;AACD,QAAI,CAACA,MAAD,IAAW,EAAEC,KAAK,GAAGM,YAAY,CAACN,KAAD,CAAtB,CAAf,EAA+C;AAC7C,aAAOD,MAAP;AACD;;AACD,QAAIQ,UAAU,GAAGC,aAAa,CAACT,MAAD,CAA9B;AAAA,QACIU,GAAG,GAAGC,aAAa,CAACH,UAAD,EAAaC,aAAa,CAACR,KAAD,CAA1B,CAAb,GAAkD,CAD5D;AAGA,WAAOW,SAAS,CAACJ,UAAD,EAAa,CAAb,EAAgBE,GAAhB,CAAT,CAA8BG,IAA9B,CAAmC,EAAnC,CAAP;AACD;;;;AAtCMN,MAAAA,Y;;AACAK,MAAAA,S;;AACAD,MAAAA,a;;AACAF,MAAAA,a;;AACAN,MAAAA,Q;;AACAG,MAAAA,e;;;yBAmCQP,O","sourcesContent":["import baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport charsEndIndex from './_charsEndIndex.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\nimport trimmedEndIndex from './_trimmedEndIndex.js';\n\n/**\n * Removes trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimEnd('  abc  ');\n * // => '  abc'\n *\n * _.trimEnd('-_-abc-_-', '_-');\n * // => '-_-abc'\n */\nfunction trimEnd(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.slice(0, trimmedEndIndex(string) + 1);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n  return castSlice(strSymbols, 0, end).join('');\n}\n\nexport default trimEnd;\n"]}