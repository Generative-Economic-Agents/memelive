{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/any-promise/register.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","global","loadImplementation","implementation","impl","shouldPreferGlobalPromise","Promise","lib","tryAutoDetect","Error","version","exec","process","libs","i","len","length","e","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;;8BAEHA,Y,GAAe,cAAYC,G;;AACjCH,MAAAA,UAAU,CAACI,MAAX,CAAkBF,YAAlB,EAAgC,UAAUG,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC;;AACAF,QAAAA,MAAM,CAACF,OAAP,GAAiBC,OAAO,CAAC,UAAD,CAAP,CAAoBI,MAApB,EAA4BC,kBAA5B,CAAjB;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,iBAASA,kBAAT,CAA4BC,cAA5B,EAA2C;AACzC,cAAIC,IAAI,GAAG,IAAX;;AAEA,cAAGC,yBAAyB,CAACF,cAAD,CAA5B,EAA6C;AAC3C;AACAC,YAAAA,IAAI,GAAG;AACLE,cAAAA,OAAO,EAAEL,MAAM,CAACK,OADX;AAELH,cAAAA,cAAc,EAAE;AAFX,aAAP;AAID,WAND,MAMO,IAAGA,cAAH,EAAkB;AACvB;AACA,gBAAII,GAAG,GAAGV,OAAO,CAACM,cAAD,CAAjB;;AACAC,YAAAA,IAAI,GAAG;AACLE,cAAAA,OAAO,EAAEC,GAAG,CAACD,OAAJ,IAAeC,GADnB;AAELJ,cAAAA,cAAc,EAAEA;AAFX,aAAP;AAID,WAPM,MAOA;AACL;AACA;AACA;AACAC,YAAAA,IAAI,GAAGI,aAAa,EAApB;AACD;;AAED,cAAGJ,IAAI,KAAK,IAAZ,EAAiB;AACf,kBAAM,IAAIK,KAAJ,CAAU,+CACd,oDADc,GAEd,sDAFc,GAGd,gEAHc,GAId,2DAJI,CAAN;AAKD;;AAED,iBAAOL,IAAP;AACD;AAED;AACD;AACA;AACA;;;AACC,iBAASC,yBAAT,CAAmCF,cAAnC,EAAkD;AAChD,cAAGA,cAAH,EAAkB;AAChB,mBAAOA,cAAc,KAAK,gBAA1B;AACD,WAFD,MAEO,IAAG,OAAOF,MAAM,CAACK,OAAd,KAA0B,WAA7B,EAAyC;AAC9C;AACA;AACA;AACA,gBAAII,OAAO,GAAI,sBAAD,CAAyBC,IAAzB,CAA8BC,OAAO,CAACF,OAAtC,CAAd;AACA,mBAAO,EAAEA,OAAO,IAAI,CAACA,OAAO,CAAC,CAAD,CAAR,IAAe,CAA1B,IAA+B,CAACA,OAAO,CAAC,CAAD,CAAR,GAAc,EAA/C,CAAP;AACD,WAT+C,CAWhD;;;AACA,iBAAO,KAAP;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,iBAASF,aAAT,GAAwB;AACtB,cAAIK,IAAI,GAAG,CACP,aADO,EAEP,SAFO,EAGP,qBAHO,EAIP,UAJO,EAKP,MALO,EAMP,MANO,EAOP,GAPO,EAQP,QARO,EASP,KATO,EAUP,KAVO,CAAX;AAWA,cAAIC,CAAC,GAAG,CAAR;AAAA,cAAWC,GAAG,GAAGF,IAAI,CAACG,MAAtB;;AACA,iBAAMF,CAAC,GAAGC,GAAV,EAAeD,CAAC,EAAhB,EAAmB;AACjB,gBAAI;AACF,qBAAOZ,kBAAkB,CAACW,IAAI,CAACC,CAAD,CAAL,CAAzB;AACD,aAFD,CAEE,OAAMG,CAAN,EAAQ,CAAE;AACb;;AACD,iBAAO,IAAP;AACD,SAjGyF,CAoG3F;;;AAEA,2BAAAC,WAAW,GAAGpB,MAAM,CAACF,OAArB;AAGC,OAzGD,EAyGG,OAAO;AACR,oBAAYJ;AADJ,OAAP,CAzGH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './loader';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\"\n module.exports = require('./loader')(global, loadImplementation);\n\n /**\n  * Node.js version of loadImplementation.\n  *\n  * Requires the given implementation and returns the registration\n  * containing {Promise, implementation}\n  *\n  * If implementation is undefined or global.Promise, loads it\n  * Otherwise uses require\n  */\n function loadImplementation(implementation){\n   var impl = null\n\n   if(shouldPreferGlobalPromise(implementation)){\n     // if no implementation or env specified use global.Promise\n     impl = {\n       Promise: global.Promise,\n       implementation: 'global.Promise'\n     }\n   } else if(implementation){\n     // if implementation specified, require it\n     var lib = require(implementation)\n     impl = {\n       Promise: lib.Promise || lib,\n       implementation: implementation\n     }\n   } else {\n     // try to auto detect implementation. This is non-deterministic\n     // and should prefer other branches, but this is our last chance\n     // to load something without throwing error\n     impl = tryAutoDetect()\n   }\n\n   if(impl === null){\n     throw new Error('Cannot find any-promise implementation nor'+\n       ' global.Promise. You must install polyfill or call'+\n       ' require(\"any-promise/register\") with your preferred'+\n       ' implementation, e.g. require(\"any-promise/register/bluebird\")'+\n       ' on application load prior to any require(\"any-promise\").')\n   }\n\n   return impl\n }\n\n /**\n  * Determines if the global.Promise should be preferred if an implementation\n  * has not been registered.\n  */\n function shouldPreferGlobalPromise(implementation){\n   if(implementation){\n     return implementation === 'global.Promise'\n   } else if(typeof global.Promise !== 'undefined'){\n     // Load global promise if implementation not specified\n     // Versions < 0.11 did not have global Promise\n     // Do not use for version < 0.12 as version 0.11 contained buggy versions\n     var version = (/v(\\d+)\\.(\\d+)\\.(\\d+)/).exec(process.version)\n     return !(version && +version[1] == 0 && +version[2] < 12)\n   }\n\n   // do not have global.Promise or another implementation was specified\n   return false\n }\n\n /**\n  * Look for common libs as last resort there is no guarantee that\n  * this will return a desired implementation or even be deterministic.\n  * The priority is also nearly arbitrary. We are only doing this\n  * for older versions of Node.js <0.12 that do not have a reasonable\n  * global.Promise implementation and we the user has not registered\n  * the preference. This preserves the behavior of any-promise <= 0.1\n  * and may be deprecated or removed in the future\n  */\n function tryAutoDetect(){\n   var libs = [\n       \"es6-promise\",\n       \"promise\",\n       \"native-promise-only\",\n       \"bluebird\",\n       \"rsvp\",\n       \"when\",\n       \"q\",\n       \"pinkie\",\n       \"lie\",\n       \"vow\"]\n   var i = 0, len = libs.length\n   for(; i < len; i++){\n     try {\n       return loadImplementation(libs[i])\n     } catch(e){}\n   }\n   return null\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './loader': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}