{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/http-signature/lib/utils.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","url","define","exports","require","module","__filename","__dirname","assert","sshpk","util","HASH_ALGOS","PK_ALGOS","HttpSignatureError","message","caller","Error","captureStackTrace","name","inherits","InvalidAlgorithmError","call","validateAlgorithm","algorithm","alg","toLowerCase","split","length","toUpperCase","sshKeyToPEM","key","string","k","parseKey","toString","fingerprint","pemToRsaSSHKey","pem","comment","equal","_cjsExports","_HASH_ALGOS","_PK_ALGOS","_HttpSignatureError","_InvalidAlgorithmError","_validateAlgorithm","_sshKeyToPEM"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'assert-plus';\nimport { __cjsMetaURL as _req0} from 'sshpk';\nimport { __cjsMetaURL as _req1} from 'util';\nlet _cjsExports;\nlet _HASH_ALGOS;\nlet _PK_ALGOS;\nlet _HttpSignatureError;\nlet _InvalidAlgorithmError;\nlet _validateAlgorithm;\nlet _sshKeyToPEM;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n // Copyright 2012 Joyent, Inc.  All rights reserved.\n\n var assert = require('assert-plus');\n var sshpk = require('sshpk');\n var util = require('util');\n\n var HASH_ALGOS = {\n   'sha1': true,\n   'sha256': true,\n   'sha512': true\n };\n\n var PK_ALGOS = {\n   'rsa': true,\n   'dsa': true,\n   'ecdsa': true\n };\n\n function HttpSignatureError(message, caller) {\n   if (Error.captureStackTrace)\n     Error.captureStackTrace(this, caller || HttpSignatureError);\n\n   this.message = message;\n   this.name = caller.name;\n }\n util.inherits(HttpSignatureError, Error);\n\n function InvalidAlgorithmError(message) {\n   HttpSignatureError.call(this, message, InvalidAlgorithmError);\n }\n util.inherits(InvalidAlgorithmError, HttpSignatureError);\n\n function validateAlgorithm(algorithm) {\n   var alg = algorithm.toLowerCase().split('-');\n\n   if (alg.length !== 2) {\n     throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' is not a ' +\n       'valid algorithm'));\n   }\n\n   if (alg[0] !== 'hmac' && !PK_ALGOS[alg[0]]) {\n     throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' type keys ' +\n       'are not supported'));\n   }\n\n   if (!HASH_ALGOS[alg[1]]) {\n     throw (new InvalidAlgorithmError(alg[1].toUpperCase() + ' is not a ' +\n       'supported hash algorithm'));\n   }\n\n   return (alg);\n }\n\n ///--- API\n\n module.exports = {\n\n   HASH_ALGOS: HASH_ALGOS,\n   PK_ALGOS: PK_ALGOS,\n\n   HttpSignatureError: HttpSignatureError,\n   InvalidAlgorithmError: InvalidAlgorithmError,\n\n   validateAlgorithm: validateAlgorithm,\n\n   /**\n    * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n    *\n    * The intent of this module is to interoperate with OpenSSL only,\n    * specifically the node crypto module's `verify` method.\n    *\n    * @param {String} key an OpenSSH public key.\n    * @return {String} PEM encoded form of the RSA public key.\n    * @throws {TypeError} on bad input.\n    * @throws {Error} on invalid ssh key formatted data.\n    */\n   sshKeyToPEM: function sshKeyToPEM(key) {\n     assert.string(key, 'ssh_key');\n\n     var k = sshpk.parseKey(key, 'ssh');\n     return (k.toString('pem'));\n   },\n\n\n   /**\n    * Generates an OpenSSH fingerprint from an ssh public key.\n    *\n    * @param {String} key an OpenSSH public key.\n    * @return {String} key fingerprint.\n    * @throws {TypeError} on bad input.\n    * @throws {Error} if what you passed doesn't look like an ssh public key.\n    */\n   fingerprint: function fingerprint(key) {\n     assert.string(key, 'ssh_key');\n\n     var k = sshpk.parseKey(key, 'ssh');\n     return (k.fingerprint('md5').toString('hex'));\n   },\n\n   /**\n    * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)\n    *\n    * The reverse of the above function.\n    */\n   pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {\n     assert.equal('string', typeof (pem), 'typeof pem');\n\n     var k = sshpk.parseKey(pem, 'pem');\n     k.comment = comment;\n     return (k.toString('ssh'));\n   }\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_HASH_ALGOS = module.exports.HASH_ALGOS;\n_PK_ALGOS = module.exports.PK_ALGOS;\n_HttpSignatureError = module.exports.HttpSignatureError;\n_InvalidAlgorithmError = module.exports.InvalidAlgorithmError;\n_validateAlgorithm = module.exports.validateAlgorithm;\n_sshKeyToPEM = module.exports.sshKeyToPEM;\n\n}, () => ({\n  'assert-plus': _req,\n  'sshpk': _req0,\n  'util': _req1,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}