{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/_getRawTag.js"],"names":["getRawTag","value","isOwn","hasOwnProperty","call","symToStringTag","tag","undefined","unmasked","e","result","nativeObjectToString","Symbol","objectProto","Object","prototype","toString","toStringTag"],"mappings":";;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,QAAIC,KAAK,GAAGC,cAAc,CAACC,IAAf,CAAoBH,KAApB,EAA2BI,cAA3B,CAAZ;AAAA,QACIC,GAAG,GAAGL,KAAK,CAACI,cAAD,CADf;;AAGA,QAAI;AACFJ,MAAAA,KAAK,CAACI,cAAD,CAAL,GAAwBE,SAAxB;AACA,UAAIC,QAAQ,GAAG,IAAf;AACD,KAHD,CAGE,OAAOC,CAAP,EAAU,CAAE;;AAEd,QAAIC,MAAM,GAAGC,oBAAoB,CAACP,IAArB,CAA0BH,KAA1B,CAAb;;AACA,QAAIO,QAAJ,EAAc;AACZ,UAAIN,KAAJ,EAAW;AACTD,QAAAA,KAAK,CAACI,cAAD,CAAL,GAAwBC,GAAxB;AACD,OAFD,MAEO;AACL,eAAOL,KAAK,CAACI,cAAD,CAAZ;AACD;AACF;;AACD,WAAOK,MAAP;AACD;;;;AA3CME,MAAAA,M;;;AAEP;AACIC,MAAAA,W,GAAcC,MAAM,CAACC,S;AAEzB;;AACIZ,MAAAA,c,GAAiBU,WAAW,CAACV,c;AAEjC;AACA;AACA;AACA;AACA;;AACIQ,MAAAA,oB,GAAuBE,WAAW,CAACG,Q;AAEvC;;AACIX,MAAAA,c,GAAiBO,MAAM,GAAGA,MAAM,CAACK,WAAV,GAAwBV,S;;yBA6BpCP,S","sourcesContent":["import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n"]}