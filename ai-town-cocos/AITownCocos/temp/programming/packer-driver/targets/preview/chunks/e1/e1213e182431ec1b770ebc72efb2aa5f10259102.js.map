{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/services/sts.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","AWS","resolveRegionalEndpointsFlag","ENV_REGIONAL_ENDPOINT_ENABLED","CONFIG_REGIONAL_ENDPOINT_ENABLED","util","update","STS","prototype","credentialsFrom","data","credentials","TemporaryCredentials","expired","accessKeyId","Credentials","AccessKeyId","secretAccessKey","SecretAccessKey","sessionToken","SessionToken","expireTime","Expiration","assumeRoleWithWebIdentity","params","callback","makeUnauthenticatedRequest","assumeRoleWithSAML","setupRequestListeners","request","addListener","optInRegionalEndpoint","req","service","config","stsRegionalEndpoints","_originalConfig","env","sharedConfig","clientConfig","isGlobalEndpoint","region","error","Error","code","message","insertPoint","endpoint","indexOf","regionalEndpoint","substring","httpRequest","updateEndpoint","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from '../config_regional_endpoint';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n var resolveRegionalEndpointsFlag = require('../config_regional_endpoint');\n var ENV_REGIONAL_ENDPOINT_ENABLED = 'AWS_STS_REGIONAL_ENDPOINTS';\n var CONFIG_REGIONAL_ENDPOINT_ENABLED = 'sts_regional_endpoints';\n\n AWS.util.update(AWS.STS.prototype, {\n   /**\n    * @overload credentialsFrom(data, credentials = null)\n    *   Creates a credentials object from STS response data containing\n    *   credentials information. Useful for quickly setting AWS credentials.\n    *\n    *   @note This is a low-level utility function. If you want to load temporary\n    *     credentials into your process for subsequent requests to AWS resources,\n    *     you should use {AWS.TemporaryCredentials} instead.\n    *   @param data [map] data retrieved from a call to {getFederatedToken},\n    *     {getSessionToken}, {assumeRole}, or {assumeRoleWithWebIdentity}.\n    *   @param credentials [AWS.Credentials] an optional credentials object to\n    *     fill instead of creating a new object. Useful when modifying an\n    *     existing credentials object from a refresh call.\n    *   @return [AWS.TemporaryCredentials] the set of temporary credentials\n    *     loaded from a raw STS operation response.\n    *   @example Using credentialsFrom to load global AWS credentials\n    *     var sts = new AWS.STS();\n    *     sts.getSessionToken(function (err, data) {\n    *       if (err) console.log(\"Error getting credentials\");\n    *       else {\n    *         AWS.config.credentials = sts.credentialsFrom(data);\n    *       }\n    *     });\n    *   @see AWS.TemporaryCredentials\n    */\n   credentialsFrom: function credentialsFrom(data, credentials) {\n     if (!data) return null;\n     if (!credentials) credentials = new AWS.TemporaryCredentials();\n     credentials.expired = false;\n     credentials.accessKeyId = data.Credentials.AccessKeyId;\n     credentials.secretAccessKey = data.Credentials.SecretAccessKey;\n     credentials.sessionToken = data.Credentials.SessionToken;\n     credentials.expireTime = data.Credentials.Expiration;\n     return credentials;\n   },\n\n   assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {\n     return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);\n   },\n\n   assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {\n     return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);\n   },\n\n   /**\n    * @api private\n    */\n   setupRequestListeners: function setupRequestListeners(request) {\n     request.addListener('validate', this.optInRegionalEndpoint, true);\n   },\n\n   /**\n    * @api private\n    */\n   optInRegionalEndpoint: function optInRegionalEndpoint(req) {\n     var service = req.service;\n     var config = service.config;\n     config.stsRegionalEndpoints = resolveRegionalEndpointsFlag(service._originalConfig, {\n       env: ENV_REGIONAL_ENDPOINT_ENABLED,\n       sharedConfig: CONFIG_REGIONAL_ENDPOINT_ENABLED,\n       clientConfig: 'stsRegionalEndpoints'\n     });\n     if (\n       config.stsRegionalEndpoints === 'regional' &&\n       service.isGlobalEndpoint\n     ) {\n       //client will throw if region is not supplied; request will be signed with specified region\n       if (!config.region) {\n         throw AWS.util.error(new Error(),\n           {code: 'ConfigError', message: 'Missing region in config'});\n       }\n       var insertPoint = config.endpoint.indexOf('.amazonaws.com');\n       var regionalEndpoint = config.endpoint.substring(0, insertPoint) +\n         '.' + config.region + config.endpoint.substring(insertPoint);\n       req.httpRequest.updateEndpoint(regionalEndpoint);\n       req.httpRequest.region = config.region;\n     }\n   }\n\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n  '../config_regional_endpoint': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}