{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/credentials/token_file_web_identity_credentials.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","url","define","exports","require","module","__filename","__dirname","AWS","fs","STS","iniLoader","util","TokenFileWebIdentityCredentials","inherit","Credentials","constructor","clientConfig","call","data","copy","getParamsFromEnv","ENV_TOKEN_FILE","ENV_ROLE_ARN","process","env","envTokenFile","roleArn","roleSessionName","getParamsFromSharedConfig","profiles","getProfilesFromSharedConfig","profileName","AWS_PROFILE","defaultProfile","profile","Object","keys","length","error","Error","code","paramsArray","unshift","sourceProfile","refresh","callback","coalesceRefresh","fn","assumeRoleChaining","self","service","credentialsFrom","params","shift","config","credentials","assumeRole","RoleArn","RoleSessionName","err","load","oidcToken","readFileSync","encoding","createClients","assumeRoleWithWebIdentity","WebIdentityToken","stsConfig","merge","retryableError","Service","prototype","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from 'fs';\nimport { __cjsMetaURL as _req1} from '../../clients/sts';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n var fs = require('fs');\n var STS = require('../../clients/sts');\n var iniLoader = AWS.util.iniLoader;\n\n /**\n  * Represents OIDC credentials from a file on disk\n  * If the credentials expire, the SDK can {refresh} the credentials\n  * from the file.\n  *\n  * ## Using the web identity token file\n  *\n  * This provider is checked by default in the Node.js environment. To use\n  * the provider simply add your OIDC token to a file (ASCII encoding) and\n  * share the filename in either AWS_WEB_IDENTITY_TOKEN_FILE environment\n  * variable or web_identity_token_file shared config variable\n  *\n  * The file contains encoded OIDC token and the characters are\n  * ASCII encoded. OIDC tokens are JSON Web Tokens (JWT).\n  * JWT's are 3 base64 encoded strings joined by the '.' character.\n  *\n  * This class will read filename from AWS_WEB_IDENTITY_TOKEN_FILE\n  * environment variable or web_identity_token_file shared config variable,\n  * and get the OIDC token from filename.\n  * It will also read IAM role to be assumed from AWS_ROLE_ARN\n  * environment variable or role_arn shared config variable.\n  * This provider gets credetials using the {AWS.STS.assumeRoleWithWebIdentity}\n  * service operation\n  *\n  * @!macro nobrowser\n  */\n AWS.TokenFileWebIdentityCredentials = AWS.util.inherit(AWS.Credentials, {\n\n   /**\n    * @example Creating a new credentials object\n    *  AWS.config.credentials = new AWS.TokenFileWebIdentityCredentials(\n    *   // optionally provide configuration to apply to the underlying AWS.STS service client\n    *   // if configuration is not provided, then configuration will be pulled from AWS.config\n    *   {\n    *     // specify timeout options\n    *     httpOptions: {\n    *       timeout: 100\n    *     }\n    *   });\n    * @see AWS.Config\n    */\n   constructor: function TokenFileWebIdentityCredentials(clientConfig) {\n     AWS.Credentials.call(this);\n     this.data = null;\n     this.clientConfig = AWS.util.copy(clientConfig || {});\n   },\n\n   /**\n    * Returns params from environment variables\n    *\n    * @api private\n    */\n   getParamsFromEnv: function getParamsFromEnv() {\n     var ENV_TOKEN_FILE = 'AWS_WEB_IDENTITY_TOKEN_FILE',\n         ENV_ROLE_ARN = 'AWS_ROLE_ARN';\n     if (process.env[ENV_TOKEN_FILE] && process.env[ENV_ROLE_ARN]) {\n       return [{\n         envTokenFile: process.env[ENV_TOKEN_FILE],\n         roleArn: process.env[ENV_ROLE_ARN],\n         roleSessionName: process.env['AWS_ROLE_SESSION_NAME']\n       }];\n     }\n   },\n\n   /**\n    * Returns params from shared config variables\n    *\n    * @api private\n    */\n   getParamsFromSharedConfig: function getParamsFromSharedConfig() {\n     var profiles = AWS.util.getProfilesFromSharedConfig(iniLoader);\n     var profileName = process.env.AWS_PROFILE || AWS.util.defaultProfile;\n     var profile = profiles[profileName] || {};\n\n     if (Object.keys(profile).length === 0) {\n       throw AWS.util.error(\n         new Error('Profile ' + profileName + ' not found'),\n         { code: 'TokenFileWebIdentityCredentialsProviderFailure' }\n       );\n     }\n\n     var paramsArray = [];\n\n     while (!profile['web_identity_token_file'] && profile['source_profile']) {\n       paramsArray.unshift({\n         roleArn: profile['role_arn'],\n         roleSessionName: profile['role_session_name']\n       });\n       var sourceProfile = profile['source_profile'];\n       profile = profiles[sourceProfile];\n     }\n\n     paramsArray.unshift({\n       envTokenFile: profile['web_identity_token_file'],\n       roleArn: profile['role_arn'],\n       roleSessionName: profile['role_session_name']\n     });\n\n     return paramsArray;\n   },\n\n   /**\n    * Refreshes credentials using {AWS.STS.assumeRoleWithWebIdentity}\n    *\n    * @callback callback function(err)\n    *   Called when the STS service responds (or fails). When\n    *   this callback is called with no error, it means that the credentials\n    *   information has been loaded into the object (as the `accessKeyId`,\n    *   `secretAccessKey`, and `sessionToken` properties).\n    *   @param err [Error] if an error occurred, this value will be filled\n    * @see AWS.Credentials.get\n    */\n   refresh: function refresh(callback) {\n     this.coalesceRefresh(callback || AWS.util.fn.callback);\n   },\n\n   /**\n    * @api private\n   */\n   assumeRoleChaining: function assumeRoleChaining(paramsArray, callback) {\n     var self = this;\n     if (paramsArray.length === 0) {\n       self.service.credentialsFrom(self.data, self);\n       callback();\n     } else {\n       var params = paramsArray.shift();\n       self.service.config.credentials = self.service.credentialsFrom(self.data, self);\n       self.service.assumeRole(\n         {\n           RoleArn: params.roleArn,\n           RoleSessionName: params.roleSessionName || 'token-file-web-identity'\n         },\n         function (err, data) {\n           self.data = null;\n           if (err) {\n             callback(err);\n           } else {\n             self.data = data;\n             self.assumeRoleChaining(paramsArray, callback);\n           }\n         }\n       );\n     }\n   },\n\n   /**\n    * @api private\n    */\n   load: function load(callback) {\n     var self = this;\n     try {\n       var paramsArray = self.getParamsFromEnv();\n       if (!paramsArray) {\n         paramsArray = self.getParamsFromSharedConfig();\n       }\n       if (paramsArray) {\n         var params = paramsArray.shift();\n         var oidcToken = fs.readFileSync(params.envTokenFile, {encoding: 'ascii'});\n         if (!self.service) {\n           self.createClients();\n         }\n         self.service.assumeRoleWithWebIdentity(\n           {\n             WebIdentityToken: oidcToken,\n             RoleArn: params.roleArn,\n             RoleSessionName: params.roleSessionName || 'token-file-web-identity'\n           },\n           function (err, data) {\n             self.data = null;\n             if (err) {\n               callback(err);\n             } else {\n               self.data = data;\n               self.assumeRoleChaining(paramsArray, callback);\n             }\n           }\n         );\n       }\n     } catch (err) {\n       callback(err);\n     }\n   },\n\n   /**\n    * @api private\n    */\n   createClients: function() {\n     if (!this.service) {\n       var stsConfig = AWS.util.merge({}, this.clientConfig);\n       this.service = new STS(stsConfig);\n\n       // Retry in case of IDPCommunicationErrorException or InvalidIdentityToken\n       this.service.retryableError = function(error) {\n         if (error.code === 'IDPCommunicationErrorException' || error.code === 'InvalidIdentityToken') {\n           return true;\n         } else {\n           return AWS.Service.prototype.retryableError.call(this, error);\n         }\n       };\n     }\n   }\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n  'fs': _req0,\n  '../../clients/sts': _req1,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}