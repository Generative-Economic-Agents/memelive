{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/assets/src/game/components/listViewCtrl2H.ts"],"names":["_decorator","Component","Node","ScrollView","Vec3","UITransform","instantiate","error","Vec2","ListItemComponent","ccclass","property","menu","_temp_vec3","ListViewCtrl2H","_content","_items","_updateTimer","_updateInterval","_lastContentPosX","_itemTemplateUITrans","_contentUITrans","_itemdata","onLoad","scrollView","content","initialize","initData","spawnCount","itemdata","reset","totalCount","length","scheduleOnce","i","getComponent","setData","removeAllChildren","itemTemplate","width","spacing","item","addChild","itemUITrans","setPosition","indexlabelComp","index_label","string","push","getPositionInView","worldPos","parent","convertToWorldSpaceAR","position","viewPos","node","convertToNodeSpaceAR","update","dt","addItem","removeItem","moveBottomItemToTop","offset","getItemAtBottom","getPosition","x","y","scrollToFixedPosition","scrollToOffset"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, ScrollView, Label, Button, Vec3, UITransform, instantiate, error, Vec2 } from \"cc\";\nimport { ListItemComponent } from \"./ListItemComponent\";\nconst { ccclass, property, menu } = _decorator;\n\nconst _temp_vec3 = new Vec3();\n/**\n * 调整版本\n */\n@ccclass(\"ListViewCtrl2H\")\nexport class ListViewCtrl2H extends Component {\n    @property(Node)\n    public itemTemplate: Node  = null!;\n    @property(ScrollView)\n    public scrollView: ScrollView  = null!;\n    @property\n    public spawnCount = 0; // 初始化 item 数量\n    @property\n    public totalCount = 0; // 滚动列表里总的 item 数量\n    @property\n    public spacing = 0; // item 水平排布间隔\n    @property\n    public bufferZone = 0; // when item is away from bufferZone, we relocate it\n\n\n    private _content: Node = null!;\n    private _items: Node[] = [];\n    private _updateTimer = 0;\n    private _updateInterval = 0.2;\n    private _lastContentPosX = 0;\n    private _itemTemplateUITrans!: UITransform;\n    private _contentUITrans!: UITransform;\n\n    onLoad() {\n        this._content = this.scrollView.content!;\n        this.initialize();\n        this._updateTimer = 0;\n        this._updateInterval = 0.2;\n        this._lastContentPosX = 0; // use this variable to detect if we are scrolling up or down\n    }\n\n    private _itemdata: any[] = null;\n\n    /**\n     * 设置spwan,itemdata;\n     * \n     */\n        public initData(spawnCount, itemdata) {\n            this.reset();\n            this.spawnCount = spawnCount;\n            this.totalCount = itemdata ? itemdata.length : 0;\n            this._itemdata = itemdata;\n            this.initialize();\n    \n            this.scheduleOnce(() => {//等待初始化完成后，可获取组件\n                for (let i = 0; i < this._items.length; i++) {\n                    this._items[i].getComponent(ListItemComponent).setData(this._itemdata[i]);\n                }\n                // this._content.getComponent(UITransform).height = this._contentUITrans.height;\n            }, 0.1)\n        }\n    \n        public reset() {\n            this.spawnCount = 0;\n            this.totalCount = 0;\n            this._itemdata = [];\n            this._content.removeAllChildren();\n            this._items = [];\n        }\n\n    // 初始化 item\n    initialize() {\n        this._itemTemplateUITrans = this.itemTemplate.getComponent(UITransform);\n        this._contentUITrans = this._content.getComponent(UITransform);\n        this._contentUITrans.width = this.totalCount * (this._itemTemplateUITrans.width + this.spacing) + this.spacing; // get total content height\n        for (let i = 0; i < this.spawnCount; ++i) { // spawn items, we only need to do this once\n            let item = instantiate(this.itemTemplate) as Node;\n            this._content.addChild(item);\n            let itemUITrans = item.getComponent(UITransform);\n            item.setPosition(itemUITrans.width * (0.5 + i) + this.spacing * (i) - 60,0, 0);\n\n            // const labelComp = item.getComponentInChildren(Label)!;\n            // const labelComp = item.getComponent(ListItemComponent)![\"item_label\"];\n            // labelComp.string = `item_${i}`;\n            const indexlabelComp = item.getComponent(ListItemComponent)!.index_label;\n            indexlabelComp.string = i+\"\";\n            this._items.push(item);\n        }\n    }\n\n    getPositionInView(item: Node) {\n        // get item position in scrollview's node space\n        let worldPos = item.parent!.getComponent(UITransform)!.convertToWorldSpaceAR(item.position);\n        let viewPos = this.scrollView.node.getComponent(UITransform)!.convertToNodeSpaceAR(worldPos);\n        return viewPos;\n    }\n\n    update(dt: number) {\n        // this._updateTimer += dt;\n        // if (this._updateTimer < this._updateInterval) return; // we don't need to do the math every frame\n        // this._updateTimer = 0;\n        // let items = this._items;\n        // let buffer = this.bufferZone;\n        // let isDown = this.scrollView.content!.position.x < this._lastContentPosX; // scrolling direction\n        // let offset = (this._itemTemplateUITrans.width + this.spacing) * items.length;\n        // for (let i = 0; i < items.length; ++i) {\n        //     let viewPos = this.getPositionInView(items[i]);\n        //     items[i].getPosition(_temp_vec3);\n        //     if (isDown) {\n        //         // if away from buffer zone and not reaching top of content\n        //         if (viewPos.x < -buffer && _temp_vec3.x + offset < 0) {\n        //             _temp_vec3.x += offset;\n        //             items[i].setPosition(_temp_vec3);\n        //             const indexlabelComp =  items[i].getComponent(ListItemComponent)!.index_label;\n        //             indexlabelComp.string = Math.floor(_temp_vec3.x/this._contentUITrans.width * this.totalCount)+\"\";\n        //             items[i].getComponent(ListItemComponent).setData();\n        //         }\n        //     } else {\n        //         // if away from buffer zone and not reaching bottom of content\n        //         if (viewPos.x > buffer && _temp_vec3.x - offset > -this._contentUITrans.width) {\n        //             _temp_vec3.x -= offset;\n        //             items[i].setPosition(_temp_vec3);\n        //             const indexlabelComp =  items[i].getComponent(ListItemComponent)!.index_label;\n        //             indexlabelComp.string = Math.floor(_temp_vec3.x/this._contentUITrans.width * this.totalCount)+\"\";\n        //             items[i].getComponent(ListItemComponent).setData();\n        //         }\n        //     }\n        // }\n        // // update lastContentPosY\n        // this._lastContentPosX = this.scrollView.content!.position.x;\n        //console.log(\"Total Items: \" + this.totalCount);\n    }\n\n    addItem() {\n        this._contentUITrans.width = (this.totalCount + 1) * (this._itemTemplateUITrans.width + this.spacing) + this.spacing; // get total content height\n        this.totalCount = this.totalCount + 1;\n    }\n\n    removeItem() {\n        if (this.totalCount - 1 < 30) {\n            error(\"can't remove item less than 30!\");\n            return;\n        }\n\n        this._contentUITrans.width = (this.totalCount - 1) * (this._itemTemplateUITrans.width + this.spacing) + this.spacing; // get total content height\n        this.totalCount = this.totalCount - 1;\n\n        this.moveBottomItemToTop();\n    }\n\n    moveBottomItemToTop() {\n        let offset = (this._itemTemplateUITrans.width + this.spacing) * this._items.length;\n        let length = this._items.length;\n        let item = this.getItemAtBottom();\n        item.getPosition(_temp_vec3);\n\n        // whether need to move to top\n        if (_temp_vec3.x + offset < 0) {\n            _temp_vec3.x = _temp_vec3.x + offset;\n            item.setPosition(_temp_vec3);\n        }\n    }\n\n    getItemAtBottom() {\n        let item = this._items[0];\n        for (let i = 1; i < this._items.length; ++i) {\n            if (item.position.x > this._items[i].position.y) {\n                item = this._items[i];\n            }\n        }\n        return item;\n    }\n\n    scrollToFixedPosition() {\n        this.scrollView.scrollToOffset(new Vec2(0, 500), 2, true);\n    }\n}\n\n"]}