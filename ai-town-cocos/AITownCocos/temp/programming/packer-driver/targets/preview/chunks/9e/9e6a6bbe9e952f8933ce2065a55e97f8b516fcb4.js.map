{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/credentials/sso_credentials.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","url","define","exports","require","module","__filename","__dirname","AWS","path","crypto","iniLoader","util","SsoCredentials","inherit","Credentials","constructor","options","call","errorCode","expired","filename","profile","process","env","AWS_PROFILE","defaultProfile","service","ssoClient","httpOptions","get","callback","fn","noop","load","self","profiles","getProfilesFromSharedConfig","Object","keys","length","error","Error","code","sso_session","sso_account_id","sso_role_name","sso_start_url","sso_region","getToken","err","token","request","accessToken","accountId","roleName","config","region","SSO","getRoleCredentials","data","roleCredentials","accessKeyId","secretAccessKey","sessionToken","expiration","expireTime","Date","profileName","_iniLoader","ssoSessions","loadSsoSessionsFrom","ssoSession","assign","ssoTokenProvider","SSOTokenProvider","EXPIRE_WINDOW_MS","hasher","createHash","fileName","update","digest","cachePath","join","getHomeDir","cacheFile","readFileSync","cacheContent","JSON","parse","startUrl","expiresAt","getTime","now","refresh","clearCachedFiles","coalesceRefresh","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from 'path';\nimport { __cjsMetaURL as _req1} from 'crypto';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n var path = require('path');\n var crypto = require('crypto');\n var iniLoader = AWS.util.iniLoader;\n\n /**\n  *  Represents credentials from sso.getRoleCredentials API for\n  * `sso_*` values defined in shared credentials file.\n  *\n  * ## Using SSO credentials\n  *\n  * The credentials file must specify the information below to use sso:\n  *\n  *     [profile sso-profile]\n  *     sso_account_id = 012345678901\n  *     sso_region = **-****-*\n  *     sso_role_name = SampleRole\n  *     sso_start_url = https://d-******.awsapps.com/start\n  *\n  * or using the session format:\n  *\n  *     [profile sso-token]\n  *     sso_session = prod\n  *     sso_account_id = 012345678901\n  *     sso_role_name = SampleRole\n  *\n  *     [sso-session prod]\n  *     sso_region = **-****-*\n  *     sso_start_url = https://d-******.awsapps.com/start\n  *\n  * This information will be automatically added to your shared credentials file by running\n  * `aws configure sso`.\n  *\n  * ## Using custom profiles\n  *\n  * The SDK supports loading credentials for separate profiles. This can be done\n  * in two ways:\n  *\n  * 1. Set the `AWS_PROFILE` environment variable in your process prior to\n  *    loading the SDK.\n  * 2. Directly load the AWS.SsoCredentials provider:\n  *\n  * ```javascript\n  * var creds = new AWS.SsoCredentials({profile: 'myprofile'});\n  * AWS.config.credentials = creds;\n  * ```\n  *\n  * @!macro nobrowser\n  */\n AWS.SsoCredentials = AWS.util.inherit(AWS.Credentials, {\n   /**\n    * Creates a new SsoCredentials object.\n    *\n    * @param options [map] a set of options\n    * @option options profile [String] (AWS_PROFILE env var or 'default')\n    *   the name of the profile to load.\n    * @option options filename [String] ('~/.aws/credentials' or defined by\n    *   AWS_SHARED_CREDENTIALS_FILE process env var)\n    *   the filename to use when loading credentials.\n    * @option options callback [Function] (err) Credentials are eagerly loaded\n    *   by the constructor. When the callback is called with no error, the\n    *   credentials have been loaded successfully.\n    */\n   constructor: function SsoCredentials(options) {\n     AWS.Credentials.call(this);\n\n     options = options || {};\n     this.errorCode = 'SsoCredentialsProviderFailure';\n     this.expired = true;\n\n     this.filename = options.filename;\n     this.profile = options.profile || process.env.AWS_PROFILE || AWS.util.defaultProfile;\n     this.service = options.ssoClient;\n     this.httpOptions = options.httpOptions || null;\n     this.get(options.callback || AWS.util.fn.noop);\n   },\n\n   /**\n    * @api private\n    */\n   load: function load(callback) {\n     var self = this;\n\n     try {\n       var profiles = AWS.util.getProfilesFromSharedConfig(iniLoader, this.filename);\n       var profile = profiles[this.profile] || {};\n\n       if (Object.keys(profile).length === 0) {\n         throw AWS.util.error(\n           new Error('Profile ' + this.profile + ' not found'),\n           { code: self.errorCode }\n         );\n       }\n\n       if (profile.sso_session) {\n         if (!profile.sso_account_id || !profile.sso_role_name) {\n           throw AWS.util.error(\n             new Error('Profile ' + this.profile + ' with session ' + profile.sso_session +\n               ' does not have valid SSO credentials. Required parameters \"sso_account_id\", \"sso_session\", ' +\n               '\"sso_role_name\". Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html'),\n             { code: self.errorCode }\n           );\n         }\n       } else {\n         if (!profile.sso_start_url || !profile.sso_account_id || !profile.sso_region || !profile.sso_role_name) {\n           throw AWS.util.error(\n             new Error('Profile ' + this.profile + ' does not have valid SSO credentials. Required parameters \"sso_account_id\", \"sso_region\", ' +\n             '\"sso_role_name\", \"sso_start_url\". Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html'),\n             { code: self.errorCode }\n           );\n         }\n       }\n\n       this.getToken(this.profile, profile, function (err, token) {\n         if (err) {\n           return callback(err);\n         }\n         var request = {\n           accessToken: token,\n           accountId: profile.sso_account_id,\n           roleName: profile.sso_role_name,\n         };\n\n         if (!self.service || self.service.config.region !== profile.sso_region) {\n           self.service = new AWS.SSO({\n             region: profile.sso_region,\n             httpOptions: self.httpOptions,\n           });\n         }\n\n         self.service.getRoleCredentials(request, function(err, data) {\n           if (err || !data || !data.roleCredentials) {\n             callback(AWS.util.error(\n               err || new Error('Please log in using \"aws sso login\"'),\n               { code: self.errorCode }\n             ), null);\n           } else if (!data.roleCredentials.accessKeyId || !data.roleCredentials.secretAccessKey || !data.roleCredentials.sessionToken || !data.roleCredentials.expiration) {\n             throw AWS.util.error(new Error(\n               'SSO returns an invalid temporary credential.'\n             ));\n           } else {\n             self.expired = false;\n             self.accessKeyId = data.roleCredentials.accessKeyId;\n             self.secretAccessKey = data.roleCredentials.secretAccessKey;\n             self.sessionToken = data.roleCredentials.sessionToken;\n             self.expireTime = new Date(data.roleCredentials.expiration);\n             callback(null);\n           }\n         });\n       });\n     } catch (err) {\n       callback(err);\n     }\n   },\n\n   /**\n    * @private\n    * Uses legacy file system retrieval or if sso-session is set,\n    * use the SSOTokenProvider.\n    *\n    * @param {string} profileName - name of the profile.\n    * @param {object} profile - profile data containing sso_session or sso_start_url etc.\n    * @param {function} callback - called with (err, (string) token).\n    *\n    * @returns {void}\n    */\n   getToken: function getToken(profileName, profile, callback) {\n     var self = this;\n\n     if (profile.sso_session) {\n       var _iniLoader = AWS.util.iniLoader;\n       var ssoSessions = _iniLoader.loadSsoSessionsFrom();\n       var ssoSession = ssoSessions[profile.sso_session];\n       Object.assign(profile, ssoSession);\n\n       var ssoTokenProvider = new AWS.SSOTokenProvider({\n         profile: profileName,\n       });\n       ssoTokenProvider.get(function (err) {\n         if (err) {\n           return callback(err);\n         }\n         return callback(null, ssoTokenProvider.token);\n       });\n       return;\n     }\n\n     try {\n       /**\n        * The time window (15 mins) that SDK will treat the SSO token expires in before the defined expiration date in token.\n        * This is needed because server side may have invalidated the token before the defined expiration date.\n        */\n       var EXPIRE_WINDOW_MS = 15 * 60 * 1000;\n       var hasher = crypto.createHash('sha1');\n       var fileName = hasher.update(profile.sso_start_url).digest('hex') + '.json';\n       var cachePath = path.join(\n         iniLoader.getHomeDir(),\n         '.aws',\n         'sso',\n         'cache',\n         fileName\n       );\n       var cacheFile = AWS.util.readFileSync(cachePath);\n       var cacheContent = null;\n       if (cacheFile) {\n         cacheContent = JSON.parse(cacheFile);\n       }\n       if (!cacheContent) {\n         throw AWS.util.error(\n           new Error('Cached credentials not found under ' + this.profile + ' profile. Please make sure you log in with aws sso login first'),\n           { code: self.errorCode }\n         );\n       }\n\n       if (!cacheContent.startUrl || !cacheContent.region || !cacheContent.accessToken || !cacheContent.expiresAt) {\n         throw AWS.util.error(\n           new Error('Cached credentials are missing required properties. Try running aws sso login.')\n         );\n       }\n\n       if (new Date(cacheContent.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {\n         throw AWS.util.error(new Error(\n           'The SSO session associated with this profile has expired. To refresh this SSO session run aws sso login with the corresponding profile.'\n         ));\n       }\n\n       return callback(null, cacheContent.accessToken);\n     } catch (err) {\n       return callback(err, null);\n     }\n   },\n\n   /**\n    * Loads the credentials from the AWS SSO process\n    *\n    * @callback callback function(err)\n    *   Called after the AWS SSO process has been executed. When this\n    *   callback is called with no error, it means that the credentials\n    *   information has been loaded into the object (as the `accessKeyId`,\n    *   `secretAccessKey`, and `sessionToken` properties).\n    *   @param err [Error] if an error occurred, this value will be filled\n    * @see get\n    */\n   refresh: function refresh(callback) {\n     iniLoader.clearCachedFiles();\n     this.coalesceRefresh(callback || AWS.util.fn.callback);\n   },\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n  'path': _req0,\n  'crypto': _req1,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}