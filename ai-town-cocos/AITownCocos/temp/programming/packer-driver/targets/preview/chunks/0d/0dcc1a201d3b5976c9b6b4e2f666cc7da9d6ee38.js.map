{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/event-stream/event-message-chunker.js"],"names":["_cjsLoader","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","eventMessageChunker","buffer","messages","offset","length","totalLength","readInt32BE","message","slice","push","_cjsExports","_eventMessageChunker"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;;8BAGDC,Y,GAAe,cAAYC,G;;AACjCF,MAAAA,UAAU,CAACG,MAAX,CAAkBF,YAAlB,EAAgC,UAAUG,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;;AAGC;AACD;AACA;AACA;AACA;AACC,iBAASC,mBAAT,CAA6BC,MAA7B,EAAqC;AACjC;AACA,cAAIC,QAAQ,GAAG,EAAf;AACA,cAAIC,MAAM,GAAG,CAAb;;AAEA,iBAAOA,MAAM,GAAGF,MAAM,CAACG,MAAvB,EAA+B;AAC3B,gBAAIC,WAAW,GAAGJ,MAAM,CAACK,WAAP,CAAmBH,MAAnB,CAAlB,CAD2B,CAG3B;;AACA,gBAAII,OAAO,GAAGN,MAAM,CAACO,KAAP,CAAaL,MAAb,EAAqBE,WAAW,GAAGF,MAAnC,CAAd,CAJ2B,CAK3B;;AACAA,YAAAA,MAAM,IAAIE,WAAV;AAEAH,YAAAA,QAAQ,CAACO,IAAT,CAAcF,OAAd;AACH;;AAED,iBAAOL,QAAP;AACH;AAED;AACD;AACA;;;AACCL,QAAAA,MAAM,CAACF,OAAP,GAAiB;AACbK,UAAAA,mBAAmB,EAAEA;AADR,SAAjB,CA/B0F,CAoC3F;;AAEA,2BAAAU,WAAW,GAAGb,MAAM,CAACF,OAArB;;AACAgB,QAAAA,oBAAoB,GAAGd,MAAM,CAACF,OAAP,CAAeK,mBAAtC;AAEC,OAzCD,EAyCG,EAzCH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nlet _cjsExports;\nlet _eventMessageChunker;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n /**\n  * Takes in a buffer of event messages and splits them into individual messages.\n  * @param {Buffer} buffer\n  * @api private\n  */\n function eventMessageChunker(buffer) {\n     /** @type Buffer[] */\n     var messages = [];\n     var offset = 0;\n\n     while (offset < buffer.length) {\n         var totalLength = buffer.readInt32BE(offset);\n\n         // create new buffer for individual message (shares memory with original)\n         var message = buffer.slice(offset, totalLength + offset);\n         // increment offset to it starts at the next message\n         offset += totalLength;\n\n         messages.push(message);\n     }\n\n     return messages;\n }\n\n /**\n  * @api private\n  */\n module.exports = {\n     eventMessageChunker: eventMessageChunker\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_eventMessageChunker = module.exports.eventMessageChunker;\n\n}, {});\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}