{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/node_modules/lodash-es/_arrayAggregator.js"],"names":["arrayAggregator","array","setter","iteratee","accumulator","index","length","value"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,eAAT,CAAyBC,KAAzB,EAAgCC,MAAhC,EAAwCC,QAAxC,EAAkDC,WAAlD,EAA+D;AAC7D,QAAIC,KAAK,GAAG,CAAC,CAAb;AAAA,QACIC,MAAM,GAAGL,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoBA,KAAK,CAACK,MADvC;;AAGA,WAAO,EAAED,KAAF,GAAUC,MAAjB,EAAyB;AACvB,UAAIC,KAAK,GAAGN,KAAK,CAACI,KAAD,CAAjB;AACAH,MAAAA,MAAM,CAACE,WAAD,EAAcG,KAAd,EAAqBJ,QAAQ,CAACI,KAAD,CAA7B,EAAsCN,KAAtC,CAAN;AACD;;AACD,WAAOG,WAAP;AACD;;;;;yBAEcJ,e","sourcesContent":["/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nexport default arrayAggregator;\n"]}