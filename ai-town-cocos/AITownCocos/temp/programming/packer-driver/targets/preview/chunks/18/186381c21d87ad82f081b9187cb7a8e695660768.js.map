{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/credentials/shared_ini_file_credentials.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","AWS","STS","iniLoader","util","ASSUME_ROLE_DEFAULT_REGION","SharedIniFileCredentials","inherit","Credentials","constructor","options","call","filename","profile","process","env","AWS_PROFILE","defaultProfile","disableAssumeRole","Boolean","preferStaticCredentials","tokenCodeFn","httpOptions","get","callback","fn","noop","load","self","profiles","getProfilesFromSharedConfig","Object","keys","length","error","Error","code","preferStaticCredentialsToRoleArn","loadRoleProfile","err","data","expired","accessKeyId","AccessKeyId","secretAccessKey","SecretAccessKey","sessionToken","SessionToken","expireTime","Expiration","refresh","clearCachedFiles","coalesceRefresh","creds","roleProfile","roleArn","roleSessionName","externalId","mfaSerial","sourceProfileName","durationSeconds","parseInt","undefined","profileRegion","sourceProfileExistanceTest","sourceCredentials","merge","sts","credentials","region","roleParams","DurationSeconds","RoleArn","RoleSessionName","Date","now","ExternalId","SerialNumber","token","message","TokenCode","assumeRole","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from '../../clients/sts';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n var STS = require('../../clients/sts');\n var iniLoader = AWS.util.iniLoader;\n\n var ASSUME_ROLE_DEFAULT_REGION = 'us-east-1';\n\n /**\n  * Represents credentials loaded from shared credentials file\n  * (defaulting to ~/.aws/credentials or defined by the\n  * `AWS_SHARED_CREDENTIALS_FILE` environment variable).\n  *\n  * ## Using the shared credentials file\n  *\n  * This provider is checked by default in the Node.js environment. To use the\n  * credentials file provider, simply add your access and secret keys to the\n  * ~/.aws/credentials file in the following format:\n  *\n  *     [default]\n  *     aws_access_key_id = AKID...\n  *     aws_secret_access_key = YOUR_SECRET_KEY\n  *\n  * ## Using custom profiles\n  *\n  * The SDK supports loading credentials for separate profiles. This can be done\n  * in two ways:\n  *\n  * 1. Set the `AWS_PROFILE` environment variable in your process prior to\n  *    loading the SDK.\n  * 2. Directly load the AWS.SharedIniFileCredentials provider:\n  *\n  * ```javascript\n  * var creds = new AWS.SharedIniFileCredentials({profile: 'myprofile'});\n  * AWS.config.credentials = creds;\n  * ```\n  *\n  * @!macro nobrowser\n  */\n AWS.SharedIniFileCredentials = AWS.util.inherit(AWS.Credentials, {\n   /**\n    * Creates a new SharedIniFileCredentials object.\n    *\n    * @param options [map] a set of options\n    * @option options profile [String] (AWS_PROFILE env var or 'default')\n    *   the name of the profile to load.\n    * @option options filename [String] ('~/.aws/credentials' or defined by\n    *   AWS_SHARED_CREDENTIALS_FILE process env var)\n    *   the filename to use when loading credentials.\n    * @option options disableAssumeRole [Boolean] (false) True to disable\n    *   support for profiles that assume an IAM role. If true, and an assume\n    *   role profile is selected, an error is raised.\n    * @option options preferStaticCredentials [Boolean] (false) True to\n    *   prefer static credentials to role_arn if both are present.\n    * @option options tokenCodeFn [Function] (null) Function to provide\n    *   STS Assume Role TokenCode, if mfa_serial is provided for profile in ini\n    *   file. Function is called with value of mfa_serial and callback, and\n    *   should provide the TokenCode or an error to the callback in the format\n    *   callback(err, token)\n    * @option options callback [Function] (err) Credentials are eagerly loaded\n    *   by the constructor. When the callback is called with no error, the\n    *   credentials have been loaded successfully.\n    * @option options httpOptions [map] A set of options to pass to the low-level\n    *   HTTP request. Currently supported options are:\n    *   * **proxy** [String] &mdash; the URL to proxy requests through\n    *   * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform\n    *     HTTP requests with. Used for connection pooling. Defaults to the global\n    *     agent (`http.globalAgent`) for non-SSL connections. Note that for\n    *     SSL connections, a special Agent object is used in order to enable\n    *     peer certificate verification. This feature is only available in the\n    *     Node.js environment.\n    *   * **connectTimeout** [Integer] &mdash; Sets the socket to timeout after\n    *     failing to establish a connection with the server after\n    *     `connectTimeout` milliseconds. This timeout has no effect once a socket\n    *     connection has been established.\n    *   * **timeout** [Integer] &mdash; The number of milliseconds a request can\n    *     take before automatically being terminated.\n    *     Defaults to two minutes (120000).\n    */\n   constructor: function SharedIniFileCredentials(options) {\n     AWS.Credentials.call(this);\n\n     options = options || {};\n\n     this.filename = options.filename;\n     this.profile = options.profile || process.env.AWS_PROFILE || AWS.util.defaultProfile;\n     this.disableAssumeRole = Boolean(options.disableAssumeRole);\n     this.preferStaticCredentials = Boolean(options.preferStaticCredentials);\n     this.tokenCodeFn = options.tokenCodeFn || null;\n     this.httpOptions = options.httpOptions || null;\n     this.get(options.callback || AWS.util.fn.noop);\n   },\n\n   /**\n    * @api private\n    */\n   load: function load(callback) {\n     var self = this;\n     try {\n       var profiles = AWS.util.getProfilesFromSharedConfig(iniLoader, this.filename);\n       var profile = profiles[this.profile] || {};\n\n       if (Object.keys(profile).length === 0) {\n         throw AWS.util.error(\n           new Error('Profile ' + this.profile + ' not found'),\n           { code: 'SharedIniFileCredentialsProviderFailure' }\n         );\n       }\n\n       /*\n       In the CLI, the presence of both a role_arn and static credentials have\n       different meanings depending on how many profiles have been visited. For\n       the first profile processed, role_arn takes precedence over any static\n       credentials, but for all subsequent profiles, static credentials are\n       used if present, and only in their absence will the profile's\n       source_profile and role_arn keys be used to load another set of\n       credentials. This var is intended to yield compatible behaviour in this\n       sdk.\n       */\n       var preferStaticCredentialsToRoleArn = Boolean(\n         this.preferStaticCredentials\n         && profile['aws_access_key_id']\n         && profile['aws_secret_access_key']\n       );\n\n       if (profile['role_arn'] && !preferStaticCredentialsToRoleArn) {\n         this.loadRoleProfile(profiles, profile, function(err, data) {\n           if (err) {\n             callback(err);\n           } else {\n             self.expired = false;\n             self.accessKeyId = data.Credentials.AccessKeyId;\n             self.secretAccessKey = data.Credentials.SecretAccessKey;\n             self.sessionToken = data.Credentials.SessionToken;\n             self.expireTime = data.Credentials.Expiration;\n             callback(null);\n           }\n         });\n         return;\n       }\n\n       this.accessKeyId = profile['aws_access_key_id'];\n       this.secretAccessKey = profile['aws_secret_access_key'];\n       this.sessionToken = profile['aws_session_token'];\n\n       if (!this.accessKeyId || !this.secretAccessKey) {\n         throw AWS.util.error(\n           new Error('Credentials not set for profile ' + this.profile),\n           { code: 'SharedIniFileCredentialsProviderFailure' }\n         );\n       }\n       this.expired = false;\n       callback(null);\n     } catch (err) {\n       callback(err);\n     }\n   },\n\n   /**\n    * Loads the credentials from the shared credentials file\n    *\n    * @callback callback function(err)\n    *   Called after the shared INI file on disk is read and parsed. When this\n    *   callback is called with no error, it means that the credentials\n    *   information has been loaded into the object (as the `accessKeyId`,\n    *   `secretAccessKey`, and `sessionToken` properties).\n    *   @param err [Error] if an error occurred, this value will be filled\n    * @see get\n    */\n   refresh: function refresh(callback) {\n     iniLoader.clearCachedFiles();\n     this.coalesceRefresh(\n       callback || AWS.util.fn.callback,\n       this.disableAssumeRole\n     );\n   },\n\n   /**\n    * @api private\n    */\n   loadRoleProfile: function loadRoleProfile(creds, roleProfile, callback) {\n     if (this.disableAssumeRole) {\n       throw AWS.util.error(\n         new Error('Role assumption profiles are disabled. ' +\n                   'Failed to load profile ' + this.profile +\n                   ' from ' + creds.filename),\n         { code: 'SharedIniFileCredentialsProviderFailure' }\n       );\n     }\n\n     var self = this;\n     var roleArn = roleProfile['role_arn'];\n     var roleSessionName = roleProfile['role_session_name'];\n     var externalId = roleProfile['external_id'];\n     var mfaSerial = roleProfile['mfa_serial'];\n     var sourceProfileName = roleProfile['source_profile'];\n     var durationSeconds = parseInt(roleProfile['duration_seconds'], 10) || undefined;\n\n     // From experimentation, the following behavior mimics the AWS CLI:\n     //\n     // 1. Use region from the profile if present.\n     // 2. Otherwise fall back to N. Virginia (global endpoint).\n     //\n     // It is necessary to do the fallback explicitly, because if\n     // 'AWS_STS_REGIONAL_ENDPOINTS=regional', the underlying STS client will\n     // otherwise throw an error if region is left 'undefined'.\n     //\n     // Experimentation shows that the AWS CLI (tested at version 1.18.136)\n     // ignores the following potential sources of a region for the purposes of\n     // this AssumeRole call:\n     //\n     // - The [default] profile\n     // - The AWS_REGION environment variable\n     //\n     // Ignoring the [default] profile for the purposes of AssumeRole is arguably\n     // a bug in the CLI since it does use the [default] region for service\n     // calls... but right now we're matching behavior of the other tool.\n     var profileRegion = roleProfile['region'] || ASSUME_ROLE_DEFAULT_REGION;\n\n     if (!sourceProfileName) {\n       throw AWS.util.error(\n         new Error('source_profile is not set using profile ' + this.profile),\n         { code: 'SharedIniFileCredentialsProviderFailure' }\n       );\n     }\n\n     var sourceProfileExistanceTest = creds[sourceProfileName];\n\n     if (typeof sourceProfileExistanceTest !== 'object') {\n       throw AWS.util.error(\n         new Error('source_profile ' + sourceProfileName + ' using profile '\n           + this.profile + ' does not exist'),\n         { code: 'SharedIniFileCredentialsProviderFailure' }\n       );\n     }\n\n     var sourceCredentials = new AWS.SharedIniFileCredentials(\n       AWS.util.merge(this.options || {}, {\n         profile: sourceProfileName,\n         preferStaticCredentials: true\n       })\n     );\n\n     this.roleArn = roleArn;\n     var sts = new STS({\n       credentials: sourceCredentials,\n       region: profileRegion,\n       httpOptions: this.httpOptions\n     });\n\n     var roleParams = {\n       DurationSeconds: durationSeconds,\n       RoleArn: roleArn,\n       RoleSessionName: roleSessionName || 'aws-sdk-js-' + Date.now()\n     };\n\n     if (externalId) {\n       roleParams.ExternalId = externalId;\n     }\n\n     if (mfaSerial && self.tokenCodeFn) {\n       roleParams.SerialNumber = mfaSerial;\n       self.tokenCodeFn(mfaSerial, function(err, token) {\n         if (err) {\n           var message;\n           if (err instanceof Error) {\n             message = err.message;\n           } else {\n             message = err;\n           }\n           callback(\n             AWS.util.error(\n               new Error('Error fetching MFA token: ' + message),\n               { code: 'SharedIniFileCredentialsProviderFailure' }\n             ));\n           return;\n         }\n\n         roleParams.TokenCode = token;\n         sts.assumeRole(roleParams, callback);\n       });\n       return;\n     }\n     sts.assumeRole(roleParams, callback);\n   }\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n  '../../clients/sts': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}