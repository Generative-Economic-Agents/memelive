{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/sshpk/lib/formats/putty.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","_req4","_req5","_req6","url","define","exports","require","module","__filename","__dirname","read","write","assert","Buffer","rfc4253","Key","SSHBuffer","crypto","PrivateKey","errors","buf","options","lines","toString","split","found","parts","si","formatVersion","length","splitHeader","toLowerCase","Error","alg","equal","encryption","comment","publicLines","parseInt","isFinite","publicBuf","from","slice","join","keyType","algToKeyType","key","type","privateLines","privateBuf","passphrase","KeyEncryptedError","filename","iv","alloc","decipher","createDecipheriv","derivePPK2EncryptionKey","setAutoPadding","concat","update","final","sshbuf","buffer","privateKeyParts","name","data","readBuffer","match","hash1","createHash","digest","hash2","line","idx","indexOf","header","rest","object","isKey","keyTypeToAlg","b64","wrap","unshift","txt","len","pos","push","_cjsExports","_read","_write"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'assert-plus';\nimport { __cjsMetaURL as _req0} from 'safer-buffer';\nimport { __cjsMetaURL as _req1} from './rfc4253';\nimport { __cjsMetaURL as _req2} from '../key';\nimport { __cjsMetaURL as _req3} from '../ssh-buffer';\nimport { __cjsMetaURL as _req4} from 'crypto';\nimport { __cjsMetaURL as _req5} from '../private-key';\nimport { __cjsMetaURL as _req6} from '../errors';\nlet _cjsExports;\nlet _read;\nlet _write;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n // Copyright 2018 Joyent, Inc.\n\n module.exports = {\n \tread: read,\n \twrite: write\n };\n\n var assert = require('assert-plus');\n var Buffer = require('safer-buffer').Buffer;\n var rfc4253 = require('./rfc4253');\n var Key = require('../key');\n var SSHBuffer = require('../ssh-buffer');\n var crypto = require('crypto');\n var PrivateKey = require('../private-key');\n\n var errors = require('../errors');\n\n // https://tartarus.org/~simon/putty-prerel-snapshots/htmldoc/AppendixC.html\n function read(buf, options) {\n \tvar lines = buf.toString('ascii').split(/[\\r\\n]+/);\n \tvar found = false;\n \tvar parts;\n \tvar si = 0;\n \tvar formatVersion;\n \twhile (si < lines.length) {\n \t\tparts = splitHeader(lines[si++]);\n \t\tif (parts) {\n \t\t\tformatVersion = {\n \t\t\t\t'putty-user-key-file-2': 2,\n \t\t\t\t'putty-user-key-file-3': 3\n \t\t\t}[parts[0].toLowerCase()];\n \t\t\tif (formatVersion) {\n \t\t\t\tfound = true;\n \t\t\t\tbreak;\n \t\t\t}\n \t\t}\n \t}\n \tif (!found) {\n \t\tthrow (new Error('No PuTTY format first line found'));\n \t}\n \tvar alg = parts[1];\n\n \tparts = splitHeader(lines[si++]);\n \tassert.equal(parts[0].toLowerCase(), 'encryption');\n \tvar encryption = parts[1];\n\n \tparts = splitHeader(lines[si++]);\n \tassert.equal(parts[0].toLowerCase(), 'comment');\n \tvar comment = parts[1];\n\n \tparts = splitHeader(lines[si++]);\n \tassert.equal(parts[0].toLowerCase(), 'public-lines');\n \tvar publicLines = parseInt(parts[1], 10);\n \tif (!isFinite(publicLines) || publicLines < 0 ||\n \t    publicLines > lines.length) {\n \t\tthrow (new Error('Invalid public-lines count'));\n \t}\n\n \tvar publicBuf = Buffer.from(\n \t    lines.slice(si, si + publicLines).join(''), 'base64');\n \tvar keyType = rfc4253.algToKeyType(alg);\n \tvar key = rfc4253.read(publicBuf);\n \tif (key.type !== keyType) {\n \t\tthrow (new Error('Outer key algorithm mismatch'));\n \t}\n\n \tsi += publicLines;\n \tif (lines[si]) {\n \t\tparts = splitHeader(lines[si++]);\n \t\tassert.equal(parts[0].toLowerCase(), 'private-lines');\n \t\tvar privateLines = parseInt(parts[1], 10);\n \t\tif (!isFinite(privateLines) || privateLines < 0 ||\n \t\t    privateLines > lines.length) {\n \t\t\tthrow (new Error('Invalid private-lines count'));\n \t\t}\n\n \t\tvar privateBuf = Buffer.from(\n \t\t\tlines.slice(si, si + privateLines).join(''), 'base64');\n\n \t\tif (encryption !== 'none' && formatVersion === 3) {\n \t\t\tthrow new Error('Encrypted keys arenot supported for' +\n \t\t\t' PuTTY format version 3');\n \t\t}\n\n \t\tif (encryption === 'aes256-cbc') {\n \t\t\tif (!options.passphrase) {\n \t\t\t\tthrow (new errors.KeyEncryptedError(\n \t\t\t\t\toptions.filename, 'PEM'));\n \t\t\t}\n\n \t\t\tvar iv = Buffer.alloc(16, 0);\n \t\t\tvar decipher = crypto.createDecipheriv(\n \t\t\t\t'aes-256-cbc',\n \t\t\t\tderivePPK2EncryptionKey(options.passphrase),\n \t\t\t\tiv);\n \t\t\tdecipher.setAutoPadding(false);\n \t\t\tprivateBuf = Buffer.concat([\n \t\t\t\tdecipher.update(privateBuf), decipher.final()]);\n \t\t}\n\n \t\tkey = new PrivateKey(key);\n \t\tif (key.type !== keyType) {\n \t\t\tthrow (new Error('Outer key algorithm mismatch'));\n \t\t}\n\n \t\tvar sshbuf = new SSHBuffer({buffer: privateBuf});\n \t\tvar privateKeyParts;\n \t\tif (alg === 'ssh-dss') {\n \t\t\tprivateKeyParts = [ {\n \t\t\t\tname: 'x',\n \t\t\t\tdata: sshbuf.readBuffer()\n \t\t\t}];\n \t\t} else if (alg === 'ssh-rsa') {\n \t\t\tprivateKeyParts = [\n \t\t\t\t{ name: 'd', data: sshbuf.readBuffer() },\n \t\t\t\t{ name: 'p', data: sshbuf.readBuffer() },\n \t\t\t\t{ name: 'q', data: sshbuf.readBuffer() },\n \t\t\t\t{ name: 'iqmp', data: sshbuf.readBuffer() }\n \t\t\t];\n \t\t} else if (alg.match(/^ecdsa-sha2-nistp/)) {\n \t\t\tprivateKeyParts = [ {\n \t\t\t\tname: 'd', data: sshbuf.readBuffer()\n \t\t\t} ];\n \t\t} else if (alg === 'ssh-ed25519') {\n \t\t\tprivateKeyParts = [ {\n \t\t\t\tname: 'k', data: sshbuf.readBuffer()\n \t\t\t} ];\n \t\t} else {\n \t\t\tthrow new Error('Unsupported PPK key type: ' + alg);\n \t\t}\n\n \t\tkey = new PrivateKey({\n \t\t\ttype: key.type,\n \t\t\tparts: key.parts.concat(privateKeyParts)\n \t\t});\n \t}\n\n \tkey.comment = comment;\n \treturn (key);\n }\n\n function derivePPK2EncryptionKey(passphrase) {\n \tvar hash1 = crypto.createHash('sha1').update(Buffer.concat([\n \t\tBuffer.from([0, 0, 0, 0]),\n \t\tBuffer.from(passphrase)\n \t])).digest();\n \tvar hash2 = crypto.createHash('sha1').update(Buffer.concat([\n \t\tBuffer.from([0, 0, 0, 1]),\n \t\tBuffer.from(passphrase)\n \t])).digest();\n \treturn (Buffer.concat([hash1, hash2]).slice(0, 32));\n }\n\n function splitHeader(line) {\n \tvar idx = line.indexOf(':');\n \tif (idx === -1)\n \t\treturn (null);\n \tvar header = line.slice(0, idx);\n \t++idx;\n \twhile (line[idx] === ' ')\n \t\t++idx;\n \tvar rest = line.slice(idx);\n \treturn ([header, rest]);\n }\n\n function write(key, options) {\n \tassert.object(key);\n \tif (!Key.isKey(key))\n \t\tthrow (new Error('Must be a public key'));\n\n \tvar alg = rfc4253.keyTypeToAlg(key);\n \tvar buf = rfc4253.write(key);\n \tvar comment = key.comment || '';\n\n \tvar b64 = buf.toString('base64');\n \tvar lines = wrap(b64, 64);\n\n \tlines.unshift('Public-Lines: ' + lines.length);\n \tlines.unshift('Comment: ' + comment);\n \tlines.unshift('Encryption: none');\n \tlines.unshift('PuTTY-User-Key-File-2: ' + alg);\n\n \treturn (Buffer.from(lines.join('\\n') + '\\n'));\n }\n\n function wrap(txt, len) {\n \tvar lines = [];\n \tvar pos = 0;\n \twhile (pos < txt.length) {\n \t\tlines.push(txt.slice(pos, pos + 64));\n \t\tpos += 64;\n \t}\n \treturn (lines);\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_read = module.exports.read;\n_write = module.exports.write;\n\n}, () => ({\n  'assert-plus': _req,\n  'safer-buffer': _req0,\n  './rfc4253': _req1,\n  '../key': _req2,\n  '../ssh-buffer': _req3,\n  'crypto': _req4,\n  '../private-key': _req5,\n  '../errors': _req6,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}