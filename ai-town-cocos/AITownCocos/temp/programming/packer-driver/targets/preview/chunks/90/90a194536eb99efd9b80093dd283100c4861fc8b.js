System.register(["__unresolved_0", "__unresolved_1", "__unresolved_2", "__unresolved_3"], function (_export, _context) {
  "use strict";

  var _cjsLoader, _req, _req0, _req1, _cjsExports, __cjsMetaURL;

  _export("default", void 0);

  return {
    setters: [function (_unresolved_) {
      _cjsLoader = _unresolved_.default;
    }, function (_unresolved_2) {
      _req = _unresolved_2.__cjsMetaURL;
    }, function (_unresolved_3) {
      _req0 = _unresolved_3.__cjsMetaURL;
    }, function (_unresolved_4) {
      _req1 = _unresolved_4.__cjsMetaURL;
    }],
    execute: function () {
      _export("__cjsMetaURL", __cjsMetaURL = _context.meta.url);

      _cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        // Generated by CoffeeScript 1.12.7
        (function () {
          var NodeType,
              XMLDeclaration,
              XMLNode,
              isObject,
              extend = function extend(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
              this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          },
              hasProp = {}.hasOwnProperty;

          isObject = require('./Utility').isObject;
          XMLNode = require('./XMLNode');
          NodeType = require('./NodeType');

          module.exports = XMLDeclaration = function (superClass) {
            extend(XMLDeclaration, superClass);

            function XMLDeclaration(parent, version, encoding, standalone) {
              var ref;

              XMLDeclaration.__super__.constructor.call(this, parent);

              if (isObject(version)) {
                ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
              }

              if (!version) {
                version = '1.0';
              }

              this.type = NodeType.Declaration;
              this.version = this.stringify.xmlVersion(version);

              if (encoding != null) {
                this.encoding = this.stringify.xmlEncoding(encoding);
              }

              if (standalone != null) {
                this.standalone = this.stringify.xmlStandalone(standalone);
              }
            }

            XMLDeclaration.prototype.toString = function (options) {
              return this.options.writer.declaration(this, this.options.writer.filterOptions(options));
            };

            return XMLDeclaration;
          }(XMLNode);
        }).call(this); // #endregion ORIGINAL CODE

        _export("default", _cjsExports = module.exports);
      }, () => ({
        './Utility': _req,
        './XMLNode': _req0,
        './NodeType': _req1
      }));
    }
  };
});
//# sourceMappingURL=90a194536eb99efd9b80093dd283100c4861fc8b.js.map