System.register(["__unresolved_0", "__unresolved_1", "__unresolved_2", "__unresolved_3", "__unresolved_4", "__unresolved_5", "__unresolved_6", "__unresolved_7", "__unresolved_8", "__unresolved_9", "__unresolved_10", "__unresolved_11", "__unresolved_12", "__unresolved_13", "__unresolved_14", "__unresolved_15", "__unresolved_16", "__unresolved_17", "__unresolved_18", "__unresolved_19"], function (_export, _context) {
  "use strict";

  var _cjsLoader, _req, _req0, _req1, _req2, _req3, _req4, _req5, _req6, _req7, _req8, _req9, _req10, _req11, _req12, _req13, _req14, _req15, _req16, _req17, _cjsExports, __cjsMetaURL;

  _export("default", void 0);

  return {
    setters: [function (_unresolved_) {
      _cjsLoader = _unresolved_.default;
    }, function (_unresolved_2) {
      _req = _unresolved_2.__cjsMetaURL;
    }, function (_unresolved_3) {
      _req0 = _unresolved_3.__cjsMetaURL;
    }, function (_unresolved_4) {
      _req1 = _unresolved_4.__cjsMetaURL;
    }, function (_unresolved_5) {
      _req2 = _unresolved_5.__cjsMetaURL;
    }, function (_unresolved_6) {
      _req3 = _unresolved_6.__cjsMetaURL;
    }, function (_unresolved_7) {
      _req4 = _unresolved_7.__cjsMetaURL;
    }, function (_unresolved_8) {
      _req5 = _unresolved_8.__cjsMetaURL;
    }, function (_unresolved_9) {
      _req6 = _unresolved_9.__cjsMetaURL;
    }, function (_unresolved_10) {
      _req7 = _unresolved_10.__cjsMetaURL;
    }, function (_unresolved_11) {
      _req8 = _unresolved_11.__cjsMetaURL;
    }, function (_unresolved_12) {
      _req9 = _unresolved_12.__cjsMetaURL;
    }, function (_unresolved_13) {
      _req10 = _unresolved_13.__cjsMetaURL;
    }, function (_unresolved_14) {
      _req11 = _unresolved_14.__cjsMetaURL;
    }, function (_unresolved_15) {
      _req12 = _unresolved_15.__cjsMetaURL;
    }, function (_unresolved_16) {
      _req13 = _unresolved_16.__cjsMetaURL;
    }, function (_unresolved_17) {
      _req14 = _unresolved_17.__cjsMetaURL;
    }, function (_unresolved_18) {
      _req15 = _unresolved_18.__cjsMetaURL;
    }, function (_unresolved_19) {
      _req16 = _unresolved_19.__cjsMetaURL;
    }, function (_unresolved_20) {
      _req17 = _unresolved_20.__cjsMetaURL;
    }],
    execute: function () {
      _export("__cjsMetaURL", __cjsMetaURL = _context.meta.url);

      _cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        // Generated by CoffeeScript 1.12.7
        (function () {
          var NodeType,
              WriterState,
              XMLAttribute,
              XMLCData,
              XMLComment,
              XMLDTDAttList,
              XMLDTDElement,
              XMLDTDEntity,
              XMLDTDNotation,
              XMLDeclaration,
              XMLDocType,
              XMLDocument,
              XMLDocumentCB,
              XMLElement,
              XMLProcessingInstruction,
              XMLRaw,
              XMLStringWriter,
              XMLStringifier,
              XMLText,
              getValue,
              isFunction,
              isObject,
              isPlainObject,
              ref,
              hasProp = {}.hasOwnProperty;
          ref = require('./Utility'), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;
          NodeType = require('./NodeType');
          XMLDocument = require('./XMLDocument');
          XMLElement = require('./XMLElement');
          XMLCData = require('./XMLCData');
          XMLComment = require('./XMLComment');
          XMLRaw = require('./XMLRaw');
          XMLText = require('./XMLText');
          XMLProcessingInstruction = require('./XMLProcessingInstruction');
          XMLDeclaration = require('./XMLDeclaration');
          XMLDocType = require('./XMLDocType');
          XMLDTDAttList = require('./XMLDTDAttList');
          XMLDTDEntity = require('./XMLDTDEntity');
          XMLDTDElement = require('./XMLDTDElement');
          XMLDTDNotation = require('./XMLDTDNotation');
          XMLAttribute = require('./XMLAttribute');
          XMLStringifier = require('./XMLStringifier');
          XMLStringWriter = require('./XMLStringWriter');
          WriterState = require('./WriterState');

          module.exports = XMLDocumentCB = function () {
            function XMLDocumentCB(options, onData, onEnd) {
              var writerOptions;
              this.name = "?xml";
              this.type = NodeType.Document;
              options || (options = {});
              writerOptions = {};

              if (!options.writer) {
                options.writer = new XMLStringWriter();
              } else if (isPlainObject(options.writer)) {
                writerOptions = options.writer;
                options.writer = new XMLStringWriter();
              }

              this.options = options;
              this.writer = options.writer;
              this.writerOptions = this.writer.filterOptions(writerOptions);
              this.stringify = new XMLStringifier(options);

              this.onDataCallback = onData || function () {};

              this.onEndCallback = onEnd || function () {};

              this.currentNode = null;
              this.currentLevel = -1;
              this.openTags = {};
              this.documentStarted = false;
              this.documentCompleted = false;
              this.root = null;
            }

            XMLDocumentCB.prototype.createChildNode = function (node) {
              var att, attName, attributes, child, i, len, ref1, ref2;

              switch (node.type) {
                case NodeType.CData:
                  this.cdata(node.value);
                  break;

                case NodeType.Comment:
                  this.comment(node.value);
                  break;

                case NodeType.Element:
                  attributes = {};
                  ref1 = node.attribs;

                  for (attName in ref1) {
                    if (!hasProp.call(ref1, attName)) continue;
                    att = ref1[attName];
                    attributes[attName] = att.value;
                  }

                  this.node(node.name, attributes);
                  break;

                case NodeType.Dummy:
                  this.dummy();
                  break;

                case NodeType.Raw:
                  this.raw(node.value);
                  break;

                case NodeType.Text:
                  this.text(node.value);
                  break;

                case NodeType.ProcessingInstruction:
                  this.instruction(node.target, node.value);
                  break;

                default:
                  throw new Error("This XML node type is not supported in a JS object: " + node.constructor.name);
              }

              ref2 = node.children;

              for (i = 0, len = ref2.length; i < len; i++) {
                child = ref2[i];
                this.createChildNode(child);

                if (child.type === NodeType.Element) {
                  this.up();
                }
              }

              return this;
            };

            XMLDocumentCB.prototype.dummy = function () {
              return this;
            };

            XMLDocumentCB.prototype.node = function (name, attributes, text) {
              var ref1;

              if (name == null) {
                throw new Error("Missing node name.");
              }

              if (this.root && this.currentLevel === -1) {
                throw new Error("Document can only have one root node. " + this.debugInfo(name));
              }

              this.openCurrent();
              name = getValue(name);

              if (attributes == null) {
                attributes = {};
              }

              attributes = getValue(attributes);

              if (!isObject(attributes)) {
                ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
              }

              this.currentNode = new XMLElement(this, name, attributes);
              this.currentNode.children = false;
              this.currentLevel++;
              this.openTags[this.currentLevel] = this.currentNode;

              if (text != null) {
                this.text(text);
              }

              return this;
            };

            XMLDocumentCB.prototype.element = function (name, attributes, text) {
              var child, i, len, oldValidationFlag, ref1, root;

              if (this.currentNode && this.currentNode.type === NodeType.DocType) {
                this.dtdElement.apply(this, arguments);
              } else {
                if (Array.isArray(name) || isObject(name) || isFunction(name)) {
                  oldValidationFlag = this.options.noValidation;
                  this.options.noValidation = true;
                  root = new XMLDocument(this.options).element('TEMP_ROOT');
                  root.element(name);
                  this.options.noValidation = oldValidationFlag;
                  ref1 = root.children;

                  for (i = 0, len = ref1.length; i < len; i++) {
                    child = ref1[i];
                    this.createChildNode(child);

                    if (child.type === NodeType.Element) {
                      this.up();
                    }
                  }
                } else {
                  this.node(name, attributes, text);
                }
              }

              return this;
            };

            XMLDocumentCB.prototype.attribute = function (name, value) {
              var attName, attValue;

              if (!this.currentNode || this.currentNode.children) {
                throw new Error("att() can only be used immediately after an ele() call in callback mode. " + this.debugInfo(name));
              }

              if (name != null) {
                name = getValue(name);
              }

              if (isObject(name)) {
                for (attName in name) {
                  if (!hasProp.call(name, attName)) continue;
                  attValue = name[attName];
                  this.attribute(attName, attValue);
                }
              } else {
                if (isFunction(value)) {
                  value = value.apply();
                }

                if (this.options.keepNullAttributes && value == null) {
                  this.currentNode.attribs[name] = new XMLAttribute(this, name, "");
                } else if (value != null) {
                  this.currentNode.attribs[name] = new XMLAttribute(this, name, value);
                }
              }

              return this;
            };

            XMLDocumentCB.prototype.text = function (value) {
              var node;
              this.openCurrent();
              node = new XMLText(this, value);
              this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };

            XMLDocumentCB.prototype.cdata = function (value) {
              var node;
              this.openCurrent();
              node = new XMLCData(this, value);
              this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };

            XMLDocumentCB.prototype.comment = function (value) {
              var node;
              this.openCurrent();
              node = new XMLComment(this, value);
              this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };

            XMLDocumentCB.prototype.raw = function (value) {
              var node;
              this.openCurrent();
              node = new XMLRaw(this, value);
              this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };

            XMLDocumentCB.prototype.instruction = function (target, value) {
              var i, insTarget, insValue, len, node;
              this.openCurrent();

              if (target != null) {
                target = getValue(target);
              }

              if (value != null) {
                value = getValue(value);
              }

              if (Array.isArray(target)) {
                for (i = 0, len = target.length; i < len; i++) {
                  insTarget = target[i];
                  this.instruction(insTarget);
                }
              } else if (isObject(target)) {
                for (insTarget in target) {
                  if (!hasProp.call(target, insTarget)) continue;
                  insValue = target[insTarget];
                  this.instruction(insTarget, insValue);
                }
              } else {
                if (isFunction(value)) {
                  value = value.apply();
                }

                node = new XMLProcessingInstruction(this, target, value);
                this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              }

              return this;
            };

            XMLDocumentCB.prototype.declaration = function (version, encoding, standalone) {
              var node;
              this.openCurrent();

              if (this.documentStarted) {
                throw new Error("declaration() must be the first node.");
              }

              node = new XMLDeclaration(this, version, encoding, standalone);
              this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };

            XMLDocumentCB.prototype.doctype = function (root, pubID, sysID) {
              this.openCurrent();

              if (root == null) {
                throw new Error("Missing root node name.");
              }

              if (this.root) {
                throw new Error("dtd() must come before the root node.");
              }

              this.currentNode = new XMLDocType(this, pubID, sysID);
              this.currentNode.rootNodeName = root;
              this.currentNode.children = false;
              this.currentLevel++;
              this.openTags[this.currentLevel] = this.currentNode;
              return this;
            };

            XMLDocumentCB.prototype.dtdElement = function (name, value) {
              var node;
              this.openCurrent();
              node = new XMLDTDElement(this, name, value);
              this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };

            XMLDocumentCB.prototype.attList = function (elementName, attributeName, attributeType, defaultValueType, defaultValue) {
              var node;
              this.openCurrent();
              node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
              this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };

            XMLDocumentCB.prototype.entity = function (name, value) {
              var node;
              this.openCurrent();
              node = new XMLDTDEntity(this, false, name, value);
              this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };

            XMLDocumentCB.prototype.pEntity = function (name, value) {
              var node;
              this.openCurrent();
              node = new XMLDTDEntity(this, true, name, value);
              this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };

            XMLDocumentCB.prototype.notation = function (name, value) {
              var node;
              this.openCurrent();
              node = new XMLDTDNotation(this, name, value);
              this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };

            XMLDocumentCB.prototype.up = function () {
              if (this.currentLevel < 0) {
                throw new Error("The document node has no parent.");
              }

              if (this.currentNode) {
                if (this.currentNode.children) {
                  this.closeNode(this.currentNode);
                } else {
                  this.openNode(this.currentNode);
                }

                this.currentNode = null;
              } else {
                this.closeNode(this.openTags[this.currentLevel]);
              }

              delete this.openTags[this.currentLevel];
              this.currentLevel--;
              return this;
            };

            XMLDocumentCB.prototype.end = function () {
              while (this.currentLevel >= 0) {
                this.up();
              }

              return this.onEnd();
            };

            XMLDocumentCB.prototype.openCurrent = function () {
              if (this.currentNode) {
                this.currentNode.children = true;
                return this.openNode(this.currentNode);
              }
            };

            XMLDocumentCB.prototype.openNode = function (node) {
              var att, chunk, name, ref1;

              if (!node.isOpen) {
                if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {
                  this.root = node;
                }

                chunk = '';

                if (node.type === NodeType.Element) {
                  this.writerOptions.state = WriterState.OpenTag;
                  chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<' + node.name;
                  ref1 = node.attribs;

                  for (name in ref1) {
                    if (!hasProp.call(ref1, name)) continue;
                    att = ref1[name];
                    chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);
                  }

                  chunk += (node.children ? '>' : '/>') + this.writer.endline(node, this.writerOptions, this.currentLevel);
                  this.writerOptions.state = WriterState.InsideTag;
                } else {
                  this.writerOptions.state = WriterState.OpenTag;
                  chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<!DOCTYPE ' + node.rootNodeName;

                  if (node.pubID && node.sysID) {
                    chunk += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
                  } else if (node.sysID) {
                    chunk += ' SYSTEM "' + node.sysID + '"';
                  }

                  if (node.children) {
                    chunk += ' [';
                    this.writerOptions.state = WriterState.InsideTag;
                  } else {
                    this.writerOptions.state = WriterState.CloseTag;
                    chunk += '>';
                  }

                  chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);
                }

                this.onData(chunk, this.currentLevel);
                return node.isOpen = true;
              }
            };

            XMLDocumentCB.prototype.closeNode = function (node) {
              var chunk;

              if (!node.isClosed) {
                chunk = '';
                this.writerOptions.state = WriterState.CloseTag;

                if (node.type === NodeType.Element) {
                  chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '</' + node.name + '>' + this.writer.endline(node, this.writerOptions, this.currentLevel);
                } else {
                  chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + ']>' + this.writer.endline(node, this.writerOptions, this.currentLevel);
                }

                this.writerOptions.state = WriterState.None;
                this.onData(chunk, this.currentLevel);
                return node.isClosed = true;
              }
            };

            XMLDocumentCB.prototype.onData = function (chunk, level) {
              this.documentStarted = true;
              return this.onDataCallback(chunk, level + 1);
            };

            XMLDocumentCB.prototype.onEnd = function () {
              this.documentCompleted = true;
              return this.onEndCallback();
            };

            XMLDocumentCB.prototype.debugInfo = function (name) {
              if (name == null) {
                return "";
              } else {
                return "node: <" + name + ">";
              }
            };

            XMLDocumentCB.prototype.ele = function () {
              return this.element.apply(this, arguments);
            };

            XMLDocumentCB.prototype.nod = function (name, attributes, text) {
              return this.node(name, attributes, text);
            };

            XMLDocumentCB.prototype.txt = function (value) {
              return this.text(value);
            };

            XMLDocumentCB.prototype.dat = function (value) {
              return this.cdata(value);
            };

            XMLDocumentCB.prototype.com = function (value) {
              return this.comment(value);
            };

            XMLDocumentCB.prototype.ins = function (target, value) {
              return this.instruction(target, value);
            };

            XMLDocumentCB.prototype.dec = function (version, encoding, standalone) {
              return this.declaration(version, encoding, standalone);
            };

            XMLDocumentCB.prototype.dtd = function (root, pubID, sysID) {
              return this.doctype(root, pubID, sysID);
            };

            XMLDocumentCB.prototype.e = function (name, attributes, text) {
              return this.element(name, attributes, text);
            };

            XMLDocumentCB.prototype.n = function (name, attributes, text) {
              return this.node(name, attributes, text);
            };

            XMLDocumentCB.prototype.t = function (value) {
              return this.text(value);
            };

            XMLDocumentCB.prototype.d = function (value) {
              return this.cdata(value);
            };

            XMLDocumentCB.prototype.c = function (value) {
              return this.comment(value);
            };

            XMLDocumentCB.prototype.r = function (value) {
              return this.raw(value);
            };

            XMLDocumentCB.prototype.i = function (target, value) {
              return this.instruction(target, value);
            };

            XMLDocumentCB.prototype.att = function () {
              if (this.currentNode && this.currentNode.type === NodeType.DocType) {
                return this.attList.apply(this, arguments);
              } else {
                return this.attribute.apply(this, arguments);
              }
            };

            XMLDocumentCB.prototype.a = function () {
              if (this.currentNode && this.currentNode.type === NodeType.DocType) {
                return this.attList.apply(this, arguments);
              } else {
                return this.attribute.apply(this, arguments);
              }
            };

            XMLDocumentCB.prototype.ent = function (name, value) {
              return this.entity(name, value);
            };

            XMLDocumentCB.prototype.pent = function (name, value) {
              return this.pEntity(name, value);
            };

            XMLDocumentCB.prototype.not = function (name, value) {
              return this.notation(name, value);
            };

            return XMLDocumentCB;
          }();
        }).call(this); // #endregion ORIGINAL CODE

        _export("default", _cjsExports = module.exports);
      }, () => ({
        './Utility': _req,
        './NodeType': _req0,
        './XMLDocument': _req1,
        './XMLElement': _req2,
        './XMLCData': _req3,
        './XMLComment': _req4,
        './XMLRaw': _req5,
        './XMLText': _req6,
        './XMLProcessingInstruction': _req7,
        './XMLDeclaration': _req8,
        './XMLDocType': _req9,
        './XMLDTDAttList': _req10,
        './XMLDTDEntity': _req11,
        './XMLDTDElement': _req12,
        './XMLDTDNotation': _req13,
        './XMLAttribute': _req14,
        './XMLStringifier': _req15,
        './XMLStringWriter': _req16,
        './WriterState': _req17
      }));
    }
  };
});
//# sourceMappingURL=6778aec3b42bbaa5e133c0842ee678fab9462f69.js.map