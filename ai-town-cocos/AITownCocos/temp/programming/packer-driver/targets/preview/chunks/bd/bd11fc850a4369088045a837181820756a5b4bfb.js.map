{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/http-signature/lib/signer.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req6","_req3","_req4","_req5","url","define","exports","require","module","__filename","__dirname","assert","crypto","http","util","sshpk","jsprim","utils","sprintf","format","HASH_ALGOS","PK_ALGOS","InvalidAlgorithmError","HttpSignatureError","validateAlgorithm","AUTHZ_FMT","MissingHeaderError","message","call","inherits","StrictParsingError","RequestSigner","options","object","alg","algorithm","undefined","string","rs_alg","sign","func","rs_signFunc","key","keyId","rs_keyId","Buffer","isBuffer","TypeError","rs_signer","createHmac","toUpperCase","digest","hashAlgorithm","toString","parsePrivateKey","ok","PrivateKey","isPrivateKey","rs_key","type","createSign","rs_headers","rs_lines","prototype","writeHeader","header","value","toLowerCase","push","line","length","update","writeDateHeader","rfc1123","Date","writeTarget","method","path","cb","Error","authz","data","join","self","err","sig","signature","e","sigObj","isSigner","obj","createSigner","signRequest","request","optionalString","optionalArrayOfString","headers","httpVersion","getHeader","setHeader","i","stringToSign","h","strict","hasOwnProperty","_stringToSign","hmac","signer","notStrictEqual","authzHeaderName","authorizationHeaderName","_cjsExports","_isSigner"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'assert-plus';\nimport { __cjsMetaURL as _req0} from 'crypto';\nimport { __cjsMetaURL as _req1} from 'http';\nimport { __cjsMetaURL as _req2} from 'util';\nimport { __cjsMetaURL as _req3} from 'sshpk';\nimport { __cjsMetaURL as _req4} from 'jsprim';\nimport { __cjsMetaURL as _req5} from './utils';\nimport { __cjsMetaURL as _req6} from 'util';\nlet _cjsExports;\nlet _isSigner;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n // Copyright 2012 Joyent, Inc.  All rights reserved.\n\n var assert = require('assert-plus');\n var crypto = require('crypto');\n var http = require('http');\n var util = require('util');\n var sshpk = require('sshpk');\n var jsprim = require('jsprim');\n var utils = require('./utils');\n\n var sprintf = require('util').format;\n\n var HASH_ALGOS = utils.HASH_ALGOS;\n var PK_ALGOS = utils.PK_ALGOS;\n var InvalidAlgorithmError = utils.InvalidAlgorithmError;\n var HttpSignatureError = utils.HttpSignatureError;\n var validateAlgorithm = utils.validateAlgorithm;\n\n ///--- Globals\n\n var AUTHZ_FMT =\n   'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n\n ///--- Specific Errors\n\n function MissingHeaderError(message) {\n   HttpSignatureError.call(this, message, MissingHeaderError);\n }\n util.inherits(MissingHeaderError, HttpSignatureError);\n\n function StrictParsingError(message) {\n   HttpSignatureError.call(this, message, StrictParsingError);\n }\n util.inherits(StrictParsingError, HttpSignatureError);\n\n /* See createSigner() */\n function RequestSigner(options) {\n   assert.object(options, 'options');\n\n   var alg = [];\n   if (options.algorithm !== undefined) {\n     assert.string(options.algorithm, 'options.algorithm');\n     alg = validateAlgorithm(options.algorithm);\n   }\n   this.rs_alg = alg;\n\n   /*\n    * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n    * with an rs_signer.\n    *\n    * rs_signFunc-based RequestSigners have to build up their entire signing\n    * string within the rs_lines array and give it to rs_signFunc as a single\n    * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n    * their signing state by using rs_signer.update(), thus only needing to\n    * buffer the hash function state and one line at a time.\n    */\n   if (options.sign !== undefined) {\n     assert.func(options.sign, 'options.sign');\n     this.rs_signFunc = options.sign;\n\n   } else if (alg[0] === 'hmac' && options.key !== undefined) {\n     assert.string(options.keyId, 'options.keyId');\n     this.rs_keyId = options.keyId;\n\n     if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n       throw (new TypeError('options.key for HMAC must be a string or Buffer'));\n\n     /*\n      * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n      * data in chunks rather than requiring it all to be given in one go\n      * at the end, so they are more similar to signers than signFuncs.\n      */\n     this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n     this.rs_signer.sign = function () {\n       var digest = this.digest('base64');\n       return ({\n         hashAlgorithm: alg[1],\n         toString: function () { return (digest); }\n       });\n     };\n\n   } else if (options.key !== undefined) {\n     var key = options.key;\n     if (typeof (key) === 'string' || Buffer.isBuffer(key))\n       key = sshpk.parsePrivateKey(key);\n\n     assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n       'options.key must be a sshpk.PrivateKey');\n     this.rs_key = key;\n\n     assert.string(options.keyId, 'options.keyId');\n     this.rs_keyId = options.keyId;\n\n     if (!PK_ALGOS[key.type]) {\n       throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n         'keys are not supported'));\n     }\n\n     if (alg[0] !== undefined && key.type !== alg[0]) {\n       throw (new InvalidAlgorithmError('options.key must be a ' +\n         alg[0].toUpperCase() + ' key, was given a ' +\n         key.type.toUpperCase() + ' key instead'));\n     }\n\n     this.rs_signer = key.createSign(alg[1]);\n\n   } else {\n     throw (new TypeError('options.sign (func) or options.key is required'));\n   }\n\n   this.rs_headers = [];\n   this.rs_lines = [];\n }\n\n /**\n  * Adds a header to be signed, with its value, into this signer.\n  *\n  * @param {String} header\n  * @param {String} value\n  * @return {String} value written\n  */\n RequestSigner.prototype.writeHeader = function (header, value) {\n   assert.string(header, 'header');\n   header = header.toLowerCase();\n   assert.string(value, 'value');\n\n   this.rs_headers.push(header);\n\n   if (this.rs_signFunc) {\n     this.rs_lines.push(header + ': ' + value);\n\n   } else {\n     var line = header + ': ' + value;\n     if (this.rs_headers.length > 0)\n       line = '\\n' + line;\n     this.rs_signer.update(line);\n   }\n\n   return (value);\n };\n\n /**\n  * Adds a default Date header, returning its value.\n  *\n  * @return {String}\n  */\n RequestSigner.prototype.writeDateHeader = function () {\n   return (this.writeHeader('date', jsprim.rfc1123(new Date())));\n };\n\n /**\n  * Adds the request target line to be signed.\n  *\n  * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n  * @param {String} path\n  */\n RequestSigner.prototype.writeTarget = function (method, path) {\n   assert.string(method, 'method');\n   assert.string(path, 'path');\n   method = method.toLowerCase();\n   this.writeHeader('(request-target)', method + ' ' + path);\n };\n\n /**\n  * Calculate the value for the Authorization header on this request\n  * asynchronously.\n  *\n  * @param {Func} callback (err, authz)\n  */\n RequestSigner.prototype.sign = function (cb) {\n   assert.func(cb, 'callback');\n\n   if (this.rs_headers.length < 1)\n     throw (new Error('At least one header must be signed'));\n\n   var alg, authz;\n   if (this.rs_signFunc) {\n     var data = this.rs_lines.join('\\n');\n     var self = this;\n     this.rs_signFunc(data, function (err, sig) {\n       if (err) {\n         cb(err);\n         return;\n       }\n       try {\n         assert.object(sig, 'signature');\n         assert.string(sig.keyId, 'signature.keyId');\n         assert.string(sig.algorithm, 'signature.algorithm');\n         assert.string(sig.signature, 'signature.signature');\n         alg = validateAlgorithm(sig.algorithm);\n\n         authz = sprintf(AUTHZ_FMT,\n           sig.keyId,\n           sig.algorithm,\n           self.rs_headers.join(' '),\n           sig.signature);\n       } catch (e) {\n         cb(e);\n         return;\n       }\n       cb(null, authz);\n     });\n\n   } else {\n     try {\n       var sigObj = this.rs_signer.sign();\n     } catch (e) {\n       cb(e);\n       return;\n     }\n     alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\n     var signature = sigObj.toString();\n     authz = sprintf(AUTHZ_FMT,\n       this.rs_keyId,\n       alg,\n       this.rs_headers.join(' '),\n       signature);\n     cb(null, authz);\n   }\n };\n\n ///--- Exported API\n\n module.exports = {\n   /**\n    * Identifies whether a given object is a request signer or not.\n    *\n    * @param {Object} object, the object to identify\n    * @returns {Boolean}\n    */\n   isSigner: function (obj) {\n     if (typeof (obj) === 'object' && obj instanceof RequestSigner)\n       return (true);\n     return (false);\n   },\n\n   /**\n    * Creates a request signer, used to asynchronously build a signature\n    * for a request (does not have to be an http.ClientRequest).\n    *\n    * @param {Object} options, either:\n    *                   - {String} keyId\n    *                   - {String|Buffer} key\n    *                   - {String} algorithm (optional, required for HMAC)\n    *                 or:\n    *                   - {Func} sign (data, cb)\n    * @return {RequestSigner}\n    */\n   createSigner: function createSigner(options) {\n     return (new RequestSigner(options));\n   },\n\n   /**\n    * Adds an 'Authorization' header to an http.ClientRequest object.\n    *\n    * Note that this API will add a Date header if it's not already set. Any\n    * other headers in the options.headers array MUST be present, or this\n    * will throw.\n    *\n    * You shouldn't need to check the return type; it's just there if you want\n    * to be pedantic.\n    *\n    * The optional flag indicates whether parsing should use strict enforcement\n    * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n    * The default is to be loose and support\n    * older versions for compatibility.\n    *\n    * @param {Object} request an instance of http.ClientRequest.\n    * @param {Object} options signing parameters object:\n    *                   - {String} keyId required.\n    *                   - {String} key required (either a PEM or HMAC key).\n    *                   - {Array} headers optional; defaults to ['date'].\n    *                   - {String} algorithm optional (unless key is HMAC);\n    *                              default is the same as the sshpk default\n    *                              signing algorithm for the type of key given\n    *                   - {String} httpVersion optional; defaults to '1.1'.\n    *                   - {Boolean} strict optional; defaults to 'false'.\n    * @return {Boolean} true if Authorization (and optionally Date) were added.\n    * @throws {TypeError} on bad parameter types (input).\n    * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n    *                                 the given key.\n    * @throws {sshpk.KeyParseError} if key was bad.\n    * @throws {MissingHeaderError} if a header to be signed was specified but\n    *                              was not present.\n    */\n   signRequest: function signRequest(request, options) {\n     assert.object(request, 'request');\n     assert.object(options, 'options');\n     assert.optionalString(options.algorithm, 'options.algorithm');\n     assert.string(options.keyId, 'options.keyId');\n     assert.optionalArrayOfString(options.headers, 'options.headers');\n     assert.optionalString(options.httpVersion, 'options.httpVersion');\n\n     if (!request.getHeader('Date'))\n       request.setHeader('Date', jsprim.rfc1123(new Date()));\n     if (!options.headers)\n       options.headers = ['date'];\n     if (!options.httpVersion)\n       options.httpVersion = '1.1';\n\n     var alg = [];\n     if (options.algorithm) {\n       options.algorithm = options.algorithm.toLowerCase();\n       alg = validateAlgorithm(options.algorithm);\n     }\n\n     var i;\n     var stringToSign = '';\n     for (i = 0; i < options.headers.length; i++) {\n       if (typeof (options.headers[i]) !== 'string')\n         throw new TypeError('options.headers must be an array of Strings');\n\n       var h = options.headers[i].toLowerCase();\n\n       if (h === 'request-line') {\n         if (!options.strict) {\n           /**\n            * We allow headers from the older spec drafts if strict parsing isn't\n            * specified in options.\n            */\n           stringToSign +=\n             request.method + ' ' + request.path + ' HTTP/' +\n             options.httpVersion;\n         } else {\n           /* Strict parsing doesn't allow older draft headers. */\n           throw (new StrictParsingError('request-line is not a valid header ' +\n             'with strict parsing enabled.'));\n         }\n       } else if (h === '(request-target)') {\n         stringToSign +=\n           '(request-target): ' + request.method.toLowerCase() + ' ' +\n           request.path;\n       } else {\n         var value = request.getHeader(h);\n         if (value === undefined || value === '') {\n           throw new MissingHeaderError(h + ' was not in the request');\n         }\n         stringToSign += h + ': ' + value;\n       }\n\n       if ((i + 1) < options.headers.length)\n         stringToSign += '\\n';\n     }\n\n     /* This is just for unit tests. */\n     if (request.hasOwnProperty('_stringToSign')) {\n       request._stringToSign = stringToSign;\n     }\n\n     var signature;\n     if (alg[0] === 'hmac') {\n       if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n         throw (new TypeError('options.key must be a string or Buffer'));\n\n       var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\n       hmac.update(stringToSign);\n       signature = hmac.digest('base64');\n\n     } else {\n       var key = options.key;\n       if (typeof (key) === 'string' || Buffer.isBuffer(key))\n         key = sshpk.parsePrivateKey(options.key);\n\n       assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n         'options.key must be a sshpk.PrivateKey');\n\n       if (!PK_ALGOS[key.type]) {\n         throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n           'keys are not supported'));\n       }\n\n       if (alg[0] !== undefined && key.type !== alg[0]) {\n         throw (new InvalidAlgorithmError('options.key must be a ' +\n           alg[0].toUpperCase() + ' key, was given a ' +\n           key.type.toUpperCase() + ' key instead'));\n       }\n\n       var signer = key.createSign(alg[1]);\n       signer.update(stringToSign);\n       var sigObj = signer.sign();\n       if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n         throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() +\n           ' is not a supported hash algorithm'));\n       }\n       options.algorithm = key.type + '-' + sigObj.hashAlgorithm;\n       signature = sigObj.toString();\n       assert.notStrictEqual(signature, '', 'empty signature produced');\n     }\n\n     var authzHeaderName = options.authorizationHeaderName || 'Authorization';\n\n     request.setHeader(authzHeaderName, sprintf(AUTHZ_FMT,\n                                                options.keyId,\n                                                options.algorithm,\n                                                options.headers.join(' '),\n                                                signature));\n\n     return true;\n   }\n\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_isSigner = module.exports.isSigner;\n\n}, () => ({\n  'assert-plus': _req,\n  'crypto': _req0,\n  'http': _req1,\n  'util': _req2,\n  'sshpk': _req3,\n  'jsprim': _req4,\n  './utils': _req5,\n  'util': _req6,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}