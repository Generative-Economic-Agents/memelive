{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/credentials/temporary_credentials.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","AWS","STS","TemporaryCredentials","util","inherit","Credentials","constructor","params","masterCredentials","call","loadMasterCredentials","expired","RoleArn","RoleSessionName","refresh","callback","coalesceRefresh","fn","load","self","createClients","get","service","config","credentials","operation","assumeRole","getSessionToken","err","data","credentialsFrom","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from '../../clients/sts';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n var STS = require('../../clients/sts');\n\n /**\n  * Represents temporary credentials retrieved from {AWS.STS}. Without any\n  * extra parameters, credentials will be fetched from the\n  * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the\n  * {AWS.STS.assumeRole} operation will be used to fetch credentials for the\n  * role instead.\n  *\n  * @note AWS.TemporaryCredentials is deprecated, but remains available for\n  *   backwards compatibility. {AWS.ChainableTemporaryCredentials} is the\n  *   preferred class for temporary credentials.\n  *\n  * To setup temporary credentials, configure a set of master credentials\n  * using the standard credentials providers (environment, EC2 instance metadata,\n  * or from the filesystem), then set the global credentials to a new\n  * temporary credentials object:\n  *\n  * ```javascript\n  * // Note that environment credentials are loaded by default,\n  * // the following line is shown for clarity:\n  * AWS.config.credentials = new AWS.EnvironmentCredentials('AWS');\n  *\n  * // Now set temporary credentials seeded from the master credentials\n  * AWS.config.credentials = new AWS.TemporaryCredentials();\n  *\n  * // subsequent requests will now use temporary credentials from AWS STS.\n  * new AWS.S3().listBucket(function(err, data) { ... });\n  * ```\n  *\n  * @!attribute masterCredentials\n  *   @return [AWS.Credentials] the master (non-temporary) credentials used to\n  *     get and refresh temporary credentials from AWS STS.\n  * @note (see constructor)\n  */\n AWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {\n   /**\n    * Creates a new temporary credentials object.\n    *\n    * @note In order to create temporary credentials, you first need to have\n    *   \"master\" credentials configured in {AWS.Config.credentials}. These\n    *   master credentials are necessary to retrieve the temporary credentials,\n    *   as well as refresh the credentials when they expire.\n    * @param params [map] a map of options that are passed to the\n    *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.\n    *   If a `RoleArn` parameter is passed in, credentials will be based on the\n    *   IAM role.\n    * @param masterCredentials [AWS.Credentials] the master (non-temporary) credentials\n    *  used to get and refresh temporary credentials from AWS STS.\n    * @example Creating a new credentials object for generic temporary credentials\n    *   AWS.config.credentials = new AWS.TemporaryCredentials();\n    * @example Creating a new credentials object for an IAM role\n    *   AWS.config.credentials = new AWS.TemporaryCredentials({\n    *     RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials',\n    *   });\n    * @see AWS.STS.assumeRole\n    * @see AWS.STS.getSessionToken\n    */\n   constructor: function TemporaryCredentials(params, masterCredentials) {\n     AWS.Credentials.call(this);\n     this.loadMasterCredentials(masterCredentials);\n     this.expired = true;\n\n     this.params = params || {};\n     if (this.params.RoleArn) {\n       this.params.RoleSessionName =\n         this.params.RoleSessionName || 'temporary-credentials';\n     }\n   },\n\n   /**\n    * Refreshes credentials using {AWS.STS.assumeRole} or\n    * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed\n    * to the credentials {constructor}.\n    *\n    * @callback callback function(err)\n    *   Called when the STS service responds (or fails). When\n    *   this callback is called with no error, it means that the credentials\n    *   information has been loaded into the object (as the `accessKeyId`,\n    *   `secretAccessKey`, and `sessionToken` properties).\n    *   @param err [Error] if an error occurred, this value will be filled\n    * @see get\n    */\n   refresh: function refresh (callback) {\n     this.coalesceRefresh(callback || AWS.util.fn.callback);\n   },\n\n   /**\n    * @api private\n    */\n   load: function load (callback) {\n     var self = this;\n     self.createClients();\n     self.masterCredentials.get(function () {\n       self.service.config.credentials = self.masterCredentials;\n       var operation = self.params.RoleArn ?\n         self.service.assumeRole : self.service.getSessionToken;\n       operation.call(self.service, function (err, data) {\n         if (!err) {\n           self.service.credentialsFrom(data, self);\n         }\n         callback(err);\n       });\n     });\n   },\n\n   /**\n    * @api private\n    */\n   loadMasterCredentials: function loadMasterCredentials (masterCredentials) {\n     this.masterCredentials = masterCredentials || AWS.config.credentials;\n     while (this.masterCredentials.masterCredentials) {\n       this.masterCredentials = this.masterCredentials.masterCredentials;\n     }\n\n     if (typeof this.masterCredentials.get !== 'function') {\n       this.masterCredentials = new AWS.Credentials(this.masterCredentials);\n     }\n   },\n\n   /**\n    * @api private\n    */\n   createClients: function () {\n     this.service = this.service || new STS({params: this.params});\n   }\n\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n  '../../clients/sts': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}