{"version":3,"sources":["file:///Users/feiwang/AITown/AITownCocos/assets/src/core/message/MaskToastManager.ts"],"names":["MessageManager","showMsg","msg","_par","_showMsg","showMassage","showMsgWithMask","delMsg","showMsgPanel","director","instantiate","isValid","Label","Prefab","resources","uiMgr","ShowMsgPanelComponent","Log","TAG","constructor","showGroup","_recovertest","_msgpanel","recovMessage","self","str","type","s","removeFromParent","loadtoast","CONTENT","getScene","getChildByName","popToParent","load","loadcom","bind","addmmessage","err","prefab","lab","getComponent","string","addChild","log","_instance"],"mappings":"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","sourcesContent":["import { director, instantiate, isValid, Label, Node, Prefab, resources, Script } from \"cc\";\nimport { uiMgr } from \"../../game/App\";\nimport { ShowMsg2Component } from \"../../game/components/ShowMsg2Component\";\nimport { ShowMsgPanelComponent } from \"../../game/components/ShowMsgPanelComponent\";\nimport SingleMessage from \"./SingleMessage\";\nimport Log from '../../../../assets/src/utils/LogUtils'\nconst TAG = 'MaskToastManger'\nvar _showMsg: MessageManager;\n/**\n * 累加消息样式\n * @param msg \n */\nexport function showMsg(msg: string, _par: Node): void {\n    if (!_showMsg) _showMsg = new MessageManager();\n\n    _showMsg.showMassage(msg, \"add\", _par);\n}\n/**\n * 覆盖提示消息样式\n * @param msg \n */\nexport function showMsgWithMask(msg: string, _par: Node = null): void {\n    if (!_showMsg) _showMsg = new MessageManager();\n    _showMsg.showMassage(msg, \"recover\", _par);\n}\nexport function delMsg(msg: any): void {\n    if (!_showMsg) _showMsg = new MessageManager();\n    // _showMsg.deletemsg(msg);\n}\n\nexport function showMsgPanel(msg: string, _par: Node = null) {\n    if (!_showMsg) _showMsg = new MessageManager();\n    _showMsg.showMsgPanel(msg, _par);\n}\n/**\n * MessageManager \n * @usage 通用提示框\n */\nexport default class MessageManager {\n    private showGroup: Node;\n    private static _instance: MessageManager;\n    constructor() {\n        let self = this;\n    }\n\n    private _recovertest: string = \"\";\n    /**显示提示文本*/\n    public showMassage(str: string, type: string = \"add\", _par: Node): void {\n        let s = this;\n        s._recovertest = str;\n        s.showGroup = _par; \n        switch (type) {\n            case \"add\":\n                break;\n            case \"recover\":\n                if (s.recovMessage && isValid(s.recovMessage)) {\n                    s.recovMessage.removeFromParent();\n                }\n                s.loadtoast();\n                break;\n        }\n\n    }\n\n    private _msgpanel: Node = null;\n    /**\n     * \n     * @param str \n     */\n    public showMsgPanel(str: string, _par: Node) {\n        let s = this;\n        ShowMsgPanelComponent.CONTENT = str;\n        s.showGroup = director.getScene().getChildByName('Canvas') as unknown as Node;\n        uiMgr.popToParent(\"prefabs/rewards/pre_showMsg\", s.showGroup);\n\n    }\n\n\n    private recovMessage: any;\n    private loadtoast() {\n        // director.loadScene(\"sign\");\n        let s = this;\n        if (!s.recovMessage) {\n            resources.load(\"prefabs/pre_mask\", Prefab, s.loadcom.bind(s));\n        } else {\n            s.addmmessage();\n        }\n    }\n    loadcom(err, prefab) {\n        let s = this;\n        s.recovMessage = instantiate(prefab);\n        s.addmmessage();\n    }\n\n    private addmmessage() {\n        let s = this;\n        try {\n            let lab: Label = s.recovMessage.getChildByName(\"spr_bg\").getChildByName(\"label_desc\");\n            lab.getComponent(Label).string = s._recovertest;\n            if (!s.showGroup || !s.showGroup.isValid) {\n                s.showGroup = director.getScene().getChildByName('Canvas') as unknown as Node;\n                s.showGroup.addChild(s.recovMessage);\n            } else {\n                s.showGroup.addChild(s.recovMessage);\n            }\n        } catch (err) {\n            Log.log(TAG, err)\n            \n        }\n\n    }\n\n    // private addMessage2(str: string): void {\n    //     let s = this;\n    //     if(s.recovMessage){\n    //         TweenMax.killTweensOf(s.recovMessage);\n    //     }else{\n    //         s.recovMessage = new SingleMessage2(s.showGroup, s.wordGroup);\n    //     }\n\n    //     s.recovMessage.messageStr = str;\n    //     s.recovMessage.x = (Laya.stage.width - s.recovMessage.img_bg.width) / 2;\n    //     s.recovMessage.y = Laya.stage.height / 2 - s.recovMessage.img_bg.height ;\n    //     TweenMax.to(s.recovMessage,0.1,{delay:1.4,onComplete:()=>{\n    //         TweenMax.killTweensOf(s.recovMessage);\n    //         s.recovMessage.remove();\n    //         s.recovMessage = null;\n\n    //     }})\n    // }\n    // private _timer: Laya.Timer;\n    // /**添加提示信息 */\n    // private addMessage(str: string): void {\n    //     let self = this;\n    //     let len = self._msgs.length + self._msgArr.length;\n    //     if (len >= self.max_num) {\n    //         self._msgs.shift();\n    //         self._msgs.push(str);\n    //     } else {\n    //         self._msgs.push(str);\n    //     }\n    //     loopMgr.addToFrame(self.doNextFrame, self);\n    // }\n\n    // private doNextFrame() {\n    //     let self = this;\n    //     if (self._msgs.length == 0) {\n    //         loopMgr.removeFromFrame(self.doNextFrame, self);\n    //         return;\n    //     }\n    //     if (self._msgArr.length > self.max_num) {\n    //         self._msgs.shift();\n    //         return;\n    //     }\n    //     let str = self._msgs.shift();\n    //     let message = self.getSingleMessage();\n    //     self._msgArr.push(message);\n    //     message.messageStr = str;\n    //     message.x = (Laya.stage.width - message.img_bg.width) / 2;\n    //     message.y = (Laya.stage.height) / 2;\n    //     message.startTweenAlpha();\n    //     self.refreshShow();\n    // }\n\n    // private refreshShow(): void {\n    //     let self = this;\n    //     let len = self._msgArr.length;\n    //     for (let i: number = 0; i < len; i++) {\n    //         let per = self._msgArr[i];\n    //         let moveY = Laya.stage.height / 2 - per.img_bg.height * (len - i);\n    //        TweenMax.killTweensOf(per);\n    //         if (per.y > moveY) {\n    //             TweenMax.to(per,0.4,{ y: moveY });\n    //         }\n    //     }\n    // }\n\n    // public deletemsg(msg: SingleMessage): void {\n    //     let self = this;\n    //     let dex = self._msgArr.indexOf(msg);\n    //     TweenMax.killTweensOf(msg);\n    //     if (dex != -1) {\n    //         self._msgArr.splice(dex, 1);\n    //     }\n    //     self._pools.push(msg);\n    // }\n\n    // private _msgs: string[] = [];\n    // private _msgArr: SingleMessage[] = [];\n    // private _pools: SingleMessage[] = [];\n    // private max_num: number = 5;\n    // /**获取单个消息显示对象 */\n    // private getSingleMessage(): SingleMessage {\n    //     let self = this;\n    //     let message: SingleMessage;\n    //     if (self._pools.length > 0) {\n    //         let replace = self._pools.shift();\n    //         message = replace;\n    //     }\n    //     else {\n    //         message = new SingleMessage(self.showGroup, self.wordGroup);\n    //     }\n    //     return message;\n    // }\n}"]}