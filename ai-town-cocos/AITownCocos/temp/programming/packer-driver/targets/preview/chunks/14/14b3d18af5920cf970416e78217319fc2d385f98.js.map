{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/credentials/saml_credentials.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","AWS","STS","SAMLCredentials","util","inherit","Credentials","constructor","params","call","expired","refresh","callback","coalesceRefresh","fn","load","self","createClients","service","assumeRoleWithSAML","err","data","credentialsFrom","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;AACgBC,MAAAA,K,iBAAhBD,Y;;;8BAEHA,Y,GAAe,cAAYE,G;;AACjCJ,MAAAA,UAAU,CAACK,MAAX,CAAkBH,YAAlB,EAAgC,UAAUI,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC,YAAIC,GAAG,GAAGJ,OAAO,CAAC,SAAD,CAAjB;;AACA,YAAIK,GAAG,GAAGL,OAAO,CAAC,mBAAD,CAAjB;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCI,QAAAA,GAAG,CAACE,eAAJ,GAAsBF,GAAG,CAACG,IAAJ,CAASC,OAAT,CAAiBJ,GAAG,CAACK,WAArB,EAAkC;AACtD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGC,UAAAA,WAAW,EAAE,SAASJ,eAAT,CAAyBK,MAAzB,EAAiC;AAC5CP,YAAAA,GAAG,CAACK,WAAJ,CAAgBG,IAAhB,CAAqB,IAArB;AACA,iBAAKC,OAAL,GAAe,IAAf;AACA,iBAAKF,MAAL,GAAcA,MAAd;AACD,WAhBqD;;AAkBtD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGG,UAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClC,iBAAKC,eAAL,CAAqBD,QAAQ,IAAIX,GAAG,CAACG,IAAJ,CAASU,EAAT,CAAYF,QAA7C;AACD,WA/BqD;;AAiCtD;AACH;AACA;AACGG,UAAAA,IAAI,EAAE,SAASA,IAAT,CAAcH,QAAd,EAAwB;AAC5B,gBAAII,IAAI,GAAG,IAAX;AACAA,YAAAA,IAAI,CAACC,aAAL;AACAD,YAAAA,IAAI,CAACE,OAAL,CAAaC,kBAAb,CAAgC,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACnD,kBAAI,CAACD,GAAL,EAAU;AACRJ,gBAAAA,IAAI,CAACE,OAAL,CAAaI,eAAb,CAA6BD,IAA7B,EAAmCL,IAAnC;AACD;;AACDJ,cAAAA,QAAQ,CAACQ,GAAD,CAAR;AACD,aALD;AAMD,WA7CqD;;AA+CtD;AACH;AACA;AACGH,UAAAA,aAAa,EAAE,yBAAW;AACxB,iBAAKC,OAAL,GAAe,KAAKA,OAAL,IAAgB,IAAIhB,GAAJ,CAAQ;AAACM,cAAAA,MAAM,EAAE,KAAKA;AAAd,aAAR,CAA/B;AACD;AApDqD,SAAlC,CAAtB,CA3C0F,CAoG3F;;AAEA,2BAAAe,WAAW,GAAGzB,MAAM,CAACF,OAArB;AAGC,OAzGD,EAyGG,OAAO;AACR,mBAAWL,IADH;AAER,6BAAqBE;AAFb,OAAP,CAzGH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nimport { __cjsMetaURL as _req0} from '../../clients/sts';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n var STS = require('../../clients/sts');\n\n /**\n  * Represents credentials retrieved from STS SAML support.\n  *\n  * By default this provider gets credentials using the\n  * {AWS.STS.assumeRoleWithSAML} service operation. This operation\n  * requires a `RoleArn` containing the ARN of the IAM trust policy for the\n  * application for which credentials will be given, as well as a `PrincipalArn`\n  * representing the ARN for the SAML identity provider. In addition, the\n  * `SAMLAssertion` must be set to the token provided by the identity\n  * provider. See {constructor} for an example on creating a credentials\n  * object with proper `RoleArn`, `PrincipalArn`, and `SAMLAssertion` values.\n  *\n  * ## Refreshing Credentials from Identity Service\n  *\n  * In addition to AWS credentials expiring after a given amount of time, the\n  * login token from the identity provider will also expire. Once this token\n  * expires, it will not be usable to refresh AWS credentials, and another\n  * token will be needed. The SDK does not manage refreshing of the token value,\n  * but this can be done through a \"refresh token\" supported by most identity\n  * providers. Consult the documentation for the identity provider for refreshing\n  * tokens. Once the refreshed token is acquired, you should make sure to update\n  * this new token in the credentials object's {params} property. The following\n  * code will update the SAMLAssertion, assuming you have retrieved an updated\n  * token from the identity provider:\n  *\n  * ```javascript\n  * AWS.config.credentials.params.SAMLAssertion = updatedToken;\n  * ```\n  *\n  * Future calls to `credentials.refresh()` will now use the new token.\n  *\n  * @!attribute params\n  *   @return [map] the map of params passed to\n  *     {AWS.STS.assumeRoleWithSAML}. To update the token, set the\n  *     `params.SAMLAssertion` property.\n  */\n AWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {\n   /**\n    * Creates a new credentials object.\n    * @param (see AWS.STS.assumeRoleWithSAML)\n    * @example Creating a new credentials object\n    *   AWS.config.credentials = new AWS.SAMLCredentials({\n    *     RoleArn: 'arn:aws:iam::1234567890:role/SAMLRole',\n    *     PrincipalArn: 'arn:aws:iam::1234567890:role/SAMLPrincipal',\n    *     SAMLAssertion: 'base64-token', // base64-encoded token from IdP\n    *   });\n    * @see AWS.STS.assumeRoleWithSAML\n    */\n   constructor: function SAMLCredentials(params) {\n     AWS.Credentials.call(this);\n     this.expired = true;\n     this.params = params;\n   },\n\n   /**\n    * Refreshes credentials using {AWS.STS.assumeRoleWithSAML}\n    *\n    * @callback callback function(err)\n    *   Called when the STS service responds (or fails). When\n    *   this callback is called with no error, it means that the credentials\n    *   information has been loaded into the object (as the `accessKeyId`,\n    *   `secretAccessKey`, and `sessionToken` properties).\n    *   @param err [Error] if an error occurred, this value will be filled\n    * @see get\n    */\n   refresh: function refresh(callback) {\n     this.coalesceRefresh(callback || AWS.util.fn.callback);\n   },\n\n   /**\n    * @api private\n    */\n   load: function load(callback) {\n     var self = this;\n     self.createClients();\n     self.service.assumeRoleWithSAML(function (err, data) {\n       if (!err) {\n         self.service.credentialsFrom(data, self);\n       }\n       callback(err);\n     });\n   },\n\n   /**\n    * @api private\n    */\n   createClients: function() {\n     this.service = this.service || new STS({params: this.params});\n   }\n\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n  '../../clients/sts': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}