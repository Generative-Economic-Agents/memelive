{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/apis/kinesis-video-archived-media-2017-09-30.min.json"],"names":["version","metadata","apiVersion","endpointPrefix","protocol","serviceAbbreviation","serviceFullName","serviceId","signatureVersion","uid","operations","GetClip","http","requestUri","input","type","required","members","StreamName","StreamARN","ClipFragmentSelector","FragmentSelectorType","TimestampRange","StartTimestamp","EndTimestamp","output","ContentType","location","locationName","Payload","shape","payload","GetDASHStreamingSessionURL","PlaybackMode","DisplayFragmentTimestamp","DisplayFragmentNumber","DASHFragmentSelector","Expires","MaxManifestFragmentResults","DASHStreamingSessionURL","GetHLSStreamingSessionURL","HLSFragmentSelector","ContainerFormat","DiscontinuityMode","MaxMediaPlaylistFragmentResults","HLSStreamingSessionURL","GetImages","ImageSelectorType","SamplingInterval","Format","FormatConfig","key","value","WidthPixels","HeightPixels","MaxResults","NextToken","Images","member","TimeStamp","Error","ImageContent","GetMediaForFragmentList","Fragments","ListFragments","FragmentSelector","FragmentNumber","FragmentSizeInBytes","ProducerTimestamp","ServerTimestamp","FragmentLengthInMilliseconds","shapes","Sa","streaming"],"mappings":";;;;;;yBAAe;AACbA,QAAAA,OAAO,EAAE,KADI;AAEbC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,UAAU,EAAE,YADJ;AAERC,UAAAA,cAAc,EAAE,cAFR;AAGRC,UAAAA,QAAQ,EAAE,WAHF;AAIRC,UAAAA,mBAAmB,EAAE,8BAJb;AAKRC,UAAAA,eAAe,EAAE,6CALT;AAMRC,UAAAA,SAAS,EAAE,8BANH;AAORC,UAAAA,gBAAgB,EAAE,IAPV;AAQRC,UAAAA,GAAG,EAAE;AARG,SAFG;AAYbC,QAAAA,UAAU,EAAE;AACVC,UAAAA,OAAO,EAAE;AACPC,YAAAA,IAAI,EAAE;AACJC,cAAAA,UAAU,EAAE;AADR,aADC;AAIPC,YAAAA,KAAK,EAAE;AACLC,cAAAA,IAAI,EAAE,WADD;AAELC,cAAAA,QAAQ,EAAE,CACR,sBADQ,CAFL;AAKLC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,UAAU,EAAE,EADL;AAEPC,gBAAAA,SAAS,EAAE,EAFJ;AAGPC,gBAAAA,oBAAoB,EAAE;AACpBL,kBAAAA,IAAI,EAAE,WADc;AAEpBC,kBAAAA,QAAQ,EAAE,CACR,sBADQ,EAER,gBAFQ,CAFU;AAMpBC,kBAAAA,OAAO,EAAE;AACPI,oBAAAA,oBAAoB,EAAE,EADf;AAEPC,oBAAAA,cAAc,EAAE;AACdP,sBAAAA,IAAI,EAAE,WADQ;AAEdC,sBAAAA,QAAQ,EAAE,CACR,gBADQ,EAER,cAFQ,CAFI;AAMdC,sBAAAA,OAAO,EAAE;AACPM,wBAAAA,cAAc,EAAE;AACdR,0BAAAA,IAAI,EAAE;AADQ,yBADT;AAIPS,wBAAAA,YAAY,EAAE;AACZT,0BAAAA,IAAI,EAAE;AADM;AAJP;AANK;AAFT;AANW;AAHf;AALJ,aAJA;AAuCPU,YAAAA,MAAM,EAAE;AACNV,cAAAA,IAAI,EAAE,WADA;AAENE,cAAAA,OAAO,EAAE;AACPS,gBAAAA,WAAW,EAAE;AACXC,kBAAAA,QAAQ,EAAE,QADC;AAEXC,kBAAAA,YAAY,EAAE;AAFH,iBADN;AAKPC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,KAAK,EAAE;AADA;AALF,eAFH;AAWNC,cAAAA,OAAO,EAAE;AAXH;AAvCD,WADC;AAsDVC,UAAAA,0BAA0B,EAAE;AAC1BpB,YAAAA,IAAI,EAAE;AACJC,cAAAA,UAAU,EAAE;AADR,aADoB;AAI1BC,YAAAA,KAAK,EAAE;AACLC,cAAAA,IAAI,EAAE,WADD;AAELE,cAAAA,OAAO,EAAE;AACPC,gBAAAA,UAAU,EAAE,EADL;AAEPC,gBAAAA,SAAS,EAAE,EAFJ;AAGPc,gBAAAA,YAAY,EAAE,EAHP;AAIPC,gBAAAA,wBAAwB,EAAE,EAJnB;AAKPC,gBAAAA,qBAAqB,EAAE,EALhB;AAMPC,gBAAAA,oBAAoB,EAAE;AACpBrB,kBAAAA,IAAI,EAAE,WADc;AAEpBE,kBAAAA,OAAO,EAAE;AACPI,oBAAAA,oBAAoB,EAAE,EADf;AAEPC,oBAAAA,cAAc,EAAE;AACdP,sBAAAA,IAAI,EAAE,WADQ;AAEdE,sBAAAA,OAAO,EAAE;AACPM,wBAAAA,cAAc,EAAE;AACdR,0BAAAA,IAAI,EAAE;AADQ,yBADT;AAIPS,wBAAAA,YAAY,EAAE;AACZT,0BAAAA,IAAI,EAAE;AADM;AAJP;AAFK;AAFT;AAFW,iBANf;AAuBPsB,gBAAAA,OAAO,EAAE;AACPtB,kBAAAA,IAAI,EAAE;AADC,iBAvBF;AA0BPuB,gBAAAA,0BAA0B,EAAE;AAC1BvB,kBAAAA,IAAI,EAAE;AADoB;AA1BrB;AAFJ,aAJmB;AAqC1BU,YAAAA,MAAM,EAAE;AACNV,cAAAA,IAAI,EAAE,WADA;AAENE,cAAAA,OAAO,EAAE;AACPsB,gBAAAA,uBAAuB,EAAE;AADlB;AAFH;AArCkB,WAtDlB;AAkGVC,UAAAA,yBAAyB,EAAE;AACzB5B,YAAAA,IAAI,EAAE;AACJC,cAAAA,UAAU,EAAE;AADR,aADmB;AAIzBC,YAAAA,KAAK,EAAE;AACLC,cAAAA,IAAI,EAAE,WADD;AAELE,cAAAA,OAAO,EAAE;AACPC,gBAAAA,UAAU,EAAE,EADL;AAEPC,gBAAAA,SAAS,EAAE,EAFJ;AAGPc,gBAAAA,YAAY,EAAE,EAHP;AAIPQ,gBAAAA,mBAAmB,EAAE;AACnB1B,kBAAAA,IAAI,EAAE,WADa;AAEnBE,kBAAAA,OAAO,EAAE;AACPI,oBAAAA,oBAAoB,EAAE,EADf;AAEPC,oBAAAA,cAAc,EAAE;AACdP,sBAAAA,IAAI,EAAE,WADQ;AAEdE,sBAAAA,OAAO,EAAE;AACPM,wBAAAA,cAAc,EAAE;AACdR,0BAAAA,IAAI,EAAE;AADQ,yBADT;AAIPS,wBAAAA,YAAY,EAAE;AACZT,0BAAAA,IAAI,EAAE;AADM;AAJP;AAFK;AAFT;AAFU,iBAJd;AAqBP2B,gBAAAA,eAAe,EAAE,EArBV;AAsBPC,gBAAAA,iBAAiB,EAAE,EAtBZ;AAuBPT,gBAAAA,wBAAwB,EAAE,EAvBnB;AAwBPG,gBAAAA,OAAO,EAAE;AACPtB,kBAAAA,IAAI,EAAE;AADC,iBAxBF;AA2BP6B,gBAAAA,+BAA+B,EAAE;AAC/B7B,kBAAAA,IAAI,EAAE;AADyB;AA3B1B;AAFJ,aAJkB;AAsCzBU,YAAAA,MAAM,EAAE;AACNV,cAAAA,IAAI,EAAE,WADA;AAENE,cAAAA,OAAO,EAAE;AACP4B,gBAAAA,sBAAsB,EAAE;AADjB;AAFH;AAtCiB,WAlGjB;AA+IVC,UAAAA,SAAS,EAAE;AACTlC,YAAAA,IAAI,EAAE;AACJC,cAAAA,UAAU,EAAE;AADR,aADG;AAITC,YAAAA,KAAK,EAAE;AACLC,cAAAA,IAAI,EAAE,WADD;AAELC,cAAAA,QAAQ,EAAE,CACR,mBADQ,EAER,gBAFQ,EAGR,cAHQ,EAIR,QAJQ,CAFL;AAQLC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,UAAU,EAAE,EADL;AAEPC,gBAAAA,SAAS,EAAE,EAFJ;AAGP4B,gBAAAA,iBAAiB,EAAE,EAHZ;AAIPxB,gBAAAA,cAAc,EAAE;AACdR,kBAAAA,IAAI,EAAE;AADQ,iBAJT;AAOPS,gBAAAA,YAAY,EAAE;AACZT,kBAAAA,IAAI,EAAE;AADM,iBAPP;AAUPiC,gBAAAA,gBAAgB,EAAE;AAChBjC,kBAAAA,IAAI,EAAE;AADU,iBAVX;AAaPkC,gBAAAA,MAAM,EAAE,EAbD;AAcPC,gBAAAA,YAAY,EAAE;AACZnC,kBAAAA,IAAI,EAAE,KADM;AAEZoC,kBAAAA,GAAG,EAAE,EAFO;AAGZC,kBAAAA,KAAK,EAAE;AAHK,iBAdP;AAmBPC,gBAAAA,WAAW,EAAE;AACXtC,kBAAAA,IAAI,EAAE;AADK,iBAnBN;AAsBPuC,gBAAAA,YAAY,EAAE;AACZvC,kBAAAA,IAAI,EAAE;AADM,iBAtBP;AAyBPwC,gBAAAA,UAAU,EAAE;AACVxC,kBAAAA,IAAI,EAAE;AADI,iBAzBL;AA4BPyC,gBAAAA,SAAS,EAAE;AA5BJ;AARJ,aAJE;AA2CT/B,YAAAA,MAAM,EAAE;AACNV,cAAAA,IAAI,EAAE,WADA;AAENE,cAAAA,OAAO,EAAE;AACPwC,gBAAAA,MAAM,EAAE;AACN1C,kBAAAA,IAAI,EAAE,MADA;AAEN2C,kBAAAA,MAAM,EAAE;AACN3C,oBAAAA,IAAI,EAAE,WADA;AAENE,oBAAAA,OAAO,EAAE;AACP0C,sBAAAA,SAAS,EAAE;AACT5C,wBAAAA,IAAI,EAAE;AADG,uBADJ;AAIP6C,sBAAAA,KAAK,EAAE,EAJA;AAKPC,sBAAAA,YAAY,EAAE;AALP;AAFH;AAFF,iBADD;AAcPL,gBAAAA,SAAS,EAAE;AAdJ;AAFH;AA3CC,WA/ID;AA8MVM,UAAAA,uBAAuB,EAAE;AACvBlD,YAAAA,IAAI,EAAE;AACJC,cAAAA,UAAU,EAAE;AADR,aADiB;AAIvBC,YAAAA,KAAK,EAAE;AACLC,cAAAA,IAAI,EAAE,WADD;AAELC,cAAAA,QAAQ,EAAE,CACR,WADQ,CAFL;AAKLC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,UAAU,EAAE,EADL;AAEPC,gBAAAA,SAAS,EAAE,EAFJ;AAGP4C,gBAAAA,SAAS,EAAE;AACThD,kBAAAA,IAAI,EAAE,MADG;AAET2C,kBAAAA,MAAM,EAAE;AAFC;AAHJ;AALJ,aAJgB;AAkBvBjC,YAAAA,MAAM,EAAE;AACNV,cAAAA,IAAI,EAAE,WADA;AAENE,cAAAA,OAAO,EAAE;AACPS,gBAAAA,WAAW,EAAE;AACXC,kBAAAA,QAAQ,EAAE,QADC;AAEXC,kBAAAA,YAAY,EAAE;AAFH,iBADN;AAKPC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,KAAK,EAAE;AADA;AALF,eAFH;AAWNC,cAAAA,OAAO,EAAE;AAXH;AAlBe,WA9Mf;AA8OViC,UAAAA,aAAa,EAAE;AACbpD,YAAAA,IAAI,EAAE;AACJC,cAAAA,UAAU,EAAE;AADR,aADO;AAIbC,YAAAA,KAAK,EAAE;AACLC,cAAAA,IAAI,EAAE,WADD;AAELE,cAAAA,OAAO,EAAE;AACPC,gBAAAA,UAAU,EAAE,EADL;AAEPC,gBAAAA,SAAS,EAAE,EAFJ;AAGPoC,gBAAAA,UAAU,EAAE;AACVxC,kBAAAA,IAAI,EAAE;AADI,iBAHL;AAMPyC,gBAAAA,SAAS,EAAE,EANJ;AAOPS,gBAAAA,gBAAgB,EAAE;AAChBlD,kBAAAA,IAAI,EAAE,WADU;AAEhBC,kBAAAA,QAAQ,EAAE,CACR,sBADQ,EAER,gBAFQ,CAFM;AAMhBC,kBAAAA,OAAO,EAAE;AACPI,oBAAAA,oBAAoB,EAAE,EADf;AAEPC,oBAAAA,cAAc,EAAE;AACdP,sBAAAA,IAAI,EAAE,WADQ;AAEdC,sBAAAA,QAAQ,EAAE,CACR,gBADQ,EAER,cAFQ,CAFI;AAMdC,sBAAAA,OAAO,EAAE;AACPM,wBAAAA,cAAc,EAAE;AACdR,0BAAAA,IAAI,EAAE;AADQ,yBADT;AAIPS,wBAAAA,YAAY,EAAE;AACZT,0BAAAA,IAAI,EAAE;AADM;AAJP;AANK;AAFT;AANO;AAPX;AAFJ,aAJM;AAwCbU,YAAAA,MAAM,EAAE;AACNV,cAAAA,IAAI,EAAE,WADA;AAENE,cAAAA,OAAO,EAAE;AACP8C,gBAAAA,SAAS,EAAE;AACThD,kBAAAA,IAAI,EAAE,MADG;AAET2C,kBAAAA,MAAM,EAAE;AACN3C,oBAAAA,IAAI,EAAE,WADA;AAENE,oBAAAA,OAAO,EAAE;AACPiD,sBAAAA,cAAc,EAAE,EADT;AAEPC,sBAAAA,mBAAmB,EAAE;AACnBpD,wBAAAA,IAAI,EAAE;AADa,uBAFd;AAKPqD,sBAAAA,iBAAiB,EAAE;AACjBrD,wBAAAA,IAAI,EAAE;AADW,uBALZ;AAQPsD,sBAAAA,eAAe,EAAE;AACftD,wBAAAA,IAAI,EAAE;AADS,uBARV;AAWPuD,sBAAAA,4BAA4B,EAAE;AAC5BvD,wBAAAA,IAAI,EAAE;AADsB;AAXvB;AAFH;AAFC,iBADJ;AAsBPyC,gBAAAA,SAAS,EAAE;AAtBJ;AAFH;AAxCK;AA9OL,SAZC;AA+Tbe,QAAAA,MAAM,EAAE;AACNC,UAAAA,EAAE,EAAE;AACFzD,YAAAA,IAAI,EAAE,MADJ;AAEF0D,YAAAA,SAAS,EAAE;AAFT;AADE;AA/TK,O","sourcesContent":["export default {\n  version: '2.0',\n  metadata: {\n    apiVersion: '2017-09-30',\n    endpointPrefix: 'kinesisvideo',\n    protocol: 'rest-json',\n    serviceAbbreviation: 'Kinesis Video Archived Media',\n    serviceFullName: 'Amazon Kinesis Video Streams Archived Media',\n    serviceId: 'Kinesis Video Archived Media',\n    signatureVersion: 'v4',\n    uid: 'kinesis-video-archived-media-2017-09-30'\n  },\n  operations: {\n    GetClip: {\n      http: {\n        requestUri: '/getClip'\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'ClipFragmentSelector'\n        ],\n        members: {\n          StreamName: {},\n          StreamARN: {},\n          ClipFragmentSelector: {\n            type: 'structure',\n            required: [\n              'FragmentSelectorType',\n              'TimestampRange'\n            ],\n            members: {\n              FragmentSelectorType: {},\n              TimestampRange: {\n                type: 'structure',\n                required: [\n                  'StartTimestamp',\n                  'EndTimestamp'\n                ],\n                members: {\n                  StartTimestamp: {\n                    type: 'timestamp'\n                  },\n                  EndTimestamp: {\n                    type: 'timestamp'\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          ContentType: {\n            location: 'header',\n            locationName: 'Content-Type'\n          },\n          Payload: {\n            shape: 'Sa'\n          }\n        },\n        payload: 'Payload'\n      }\n    },\n    GetDASHStreamingSessionURL: {\n      http: {\n        requestUri: '/getDASHStreamingSessionURL'\n      },\n      input: {\n        type: 'structure',\n        members: {\n          StreamName: {},\n          StreamARN: {},\n          PlaybackMode: {},\n          DisplayFragmentTimestamp: {},\n          DisplayFragmentNumber: {},\n          DASHFragmentSelector: {\n            type: 'structure',\n            members: {\n              FragmentSelectorType: {},\n              TimestampRange: {\n                type: 'structure',\n                members: {\n                  StartTimestamp: {\n                    type: 'timestamp'\n                  },\n                  EndTimestamp: {\n                    type: 'timestamp'\n                  }\n                }\n              }\n            }\n          },\n          Expires: {\n            type: 'integer'\n          },\n          MaxManifestFragmentResults: {\n            type: 'long'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          DASHStreamingSessionURL: {}\n        }\n      }\n    },\n    GetHLSStreamingSessionURL: {\n      http: {\n        requestUri: '/getHLSStreamingSessionURL'\n      },\n      input: {\n        type: 'structure',\n        members: {\n          StreamName: {},\n          StreamARN: {},\n          PlaybackMode: {},\n          HLSFragmentSelector: {\n            type: 'structure',\n            members: {\n              FragmentSelectorType: {},\n              TimestampRange: {\n                type: 'structure',\n                members: {\n                  StartTimestamp: {\n                    type: 'timestamp'\n                  },\n                  EndTimestamp: {\n                    type: 'timestamp'\n                  }\n                }\n              }\n            }\n          },\n          ContainerFormat: {},\n          DiscontinuityMode: {},\n          DisplayFragmentTimestamp: {},\n          Expires: {\n            type: 'integer'\n          },\n          MaxMediaPlaylistFragmentResults: {\n            type: 'long'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          HLSStreamingSessionURL: {}\n        }\n      }\n    },\n    GetImages: {\n      http: {\n        requestUri: '/getImages'\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'ImageSelectorType',\n          'StartTimestamp',\n          'EndTimestamp',\n          'Format'\n        ],\n        members: {\n          StreamName: {},\n          StreamARN: {},\n          ImageSelectorType: {},\n          StartTimestamp: {\n            type: 'timestamp'\n          },\n          EndTimestamp: {\n            type: 'timestamp'\n          },\n          SamplingInterval: {\n            type: 'integer'\n          },\n          Format: {},\n          FormatConfig: {\n            type: 'map',\n            key: {},\n            value: {}\n          },\n          WidthPixels: {\n            type: 'integer'\n          },\n          HeightPixels: {\n            type: 'integer'\n          },\n          MaxResults: {\n            type: 'long'\n          },\n          NextToken: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          Images: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              members: {\n                TimeStamp: {\n                  type: 'timestamp'\n                },\n                Error: {},\n                ImageContent: {}\n              }\n            }\n          },\n          NextToken: {}\n        }\n      }\n    },\n    GetMediaForFragmentList: {\n      http: {\n        requestUri: '/getMediaForFragmentList'\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'Fragments'\n        ],\n        members: {\n          StreamName: {},\n          StreamARN: {},\n          Fragments: {\n            type: 'list',\n            member: {}\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          ContentType: {\n            location: 'header',\n            locationName: 'Content-Type'\n          },\n          Payload: {\n            shape: 'Sa'\n          }\n        },\n        payload: 'Payload'\n      }\n    },\n    ListFragments: {\n      http: {\n        requestUri: '/listFragments'\n      },\n      input: {\n        type: 'structure',\n        members: {\n          StreamName: {},\n          StreamARN: {},\n          MaxResults: {\n            type: 'long'\n          },\n          NextToken: {},\n          FragmentSelector: {\n            type: 'structure',\n            required: [\n              'FragmentSelectorType',\n              'TimestampRange'\n            ],\n            members: {\n              FragmentSelectorType: {},\n              TimestampRange: {\n                type: 'structure',\n                required: [\n                  'StartTimestamp',\n                  'EndTimestamp'\n                ],\n                members: {\n                  StartTimestamp: {\n                    type: 'timestamp'\n                  },\n                  EndTimestamp: {\n                    type: 'timestamp'\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          Fragments: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              members: {\n                FragmentNumber: {},\n                FragmentSizeInBytes: {\n                  type: 'long'\n                },\n                ProducerTimestamp: {\n                  type: 'timestamp'\n                },\n                ServerTimestamp: {\n                  type: 'timestamp'\n                },\n                FragmentLengthInMilliseconds: {\n                  type: 'long'\n                }\n              }\n            }\n          },\n          NextToken: {}\n        }\n      }\n    }\n  },\n  shapes: {\n    Sa: {\n      type: 'blob',\n      streaming: true\n    }\n  }\n}"]}