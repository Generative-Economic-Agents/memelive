{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/lodash-es/_memoizeCapped.js"],"names":["memoizeCapped","func","result","memoize","key","cache","size","MAX_MEMOIZE_SIZE","clear"],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,QAAIC,MAAM,GAAGC,OAAO,CAACF,IAAD,EAAO,UAASG,GAAT,EAAc;AACvC,UAAIC,KAAK,CAACC,IAAN,KAAeC,gBAAnB,EAAqC;AACnCF,QAAAA,KAAK,CAACG,KAAN;AACD;;AACD,aAAOJ,GAAP;AACD,KALmB,CAApB;AAOA,QAAIC,KAAK,GAAGH,MAAM,CAACG,KAAnB;AACA,WAAOH,MAAP;AACD;;;;AAvBMC,MAAAA,O;;;AAEP;AACII,MAAAA,gB,GAAmB,G;;yBAsBRP,a","sourcesContent":["import memoize from './memoize.js';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nexport default memoizeCapped;\n"]}