{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/apis/codeguru-security-2018-05-10.min.json"],"names":["version","metadata","apiVersion","endpointPrefix","jsonVersion","protocol","protocols","serviceFullName","serviceId","signatureVersion","signingName","uid","operations","BatchGetFindings","http","requestUri","responseCode","input","type","required","members","findingIdentifiers","member","findingId","scanName","output","failedFindings","errorCode","message","findings","shape","CreateScan","analysisType","clientToken","idempotencyToken","resourceId","scanType","tags","runId","scanNameArn","scanState","CreateUploadUrl","codeArtifactId","requestHeaders","key","value","sensitive","s3Url","GetAccountConfiguration","method","encryptionConfig","GetFindings","maxResults","location","locationName","nextToken","status","GetMetricsSummary","date","metricsSummary","categoriesWithMostFindings","categoryName","findingNumber","openFindings","scansWithMostOpenCriticalFindings","scansWithMostOpenFindings","GetScan","createdAt","errorMessage","numberOfRevisions","updatedAt","ListFindingsMetrics","endDate","startDate","findingsMetrics","closedFindings","meanTimeToClose","newFindings","ListScans","summaries","ListTagsForResource","resourceArn","TagResource","UntagResource","tagKeys","idempotent","UpdateAccountConfiguration","shapes","Sa","description","detectorId","detectorName","detectorTags","generatorId","id","remediation","recommendation","text","url","suggestedFixes","code","resource","subResourceId","ruleId","severity","title","vulnerability","filePath","codeSnippet","content","number","endLine","name","path","startLine","itemCount","deprecated","deprecatedMessage","referenceUrls","relatedVulnerabilities","Sv","union","Sy","S1c","kmsKeyArn","S1n","critical","high","info","low","medium","S1q"],"mappings":"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","sourcesContent":["export default {\n  version: '2.0',\n  metadata: {\n    apiVersion: '2018-05-10',\n    endpointPrefix: 'codeguru-security',\n    jsonVersion: '1.1',\n    protocol: 'rest-json',\n    protocols: [\n      'rest-json'\n    ],\n    serviceFullName: 'Amazon CodeGuru Security',\n    serviceId: 'CodeGuru Security',\n    signatureVersion: 'v4',\n    signingName: 'codeguru-security',\n    uid: 'codeguru-security-2018-05-10'\n  },\n  operations: {\n    BatchGetFindings: {\n      http: {\n        requestUri: '/batchGetFindings',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'findingIdentifiers'\n        ],\n        members: {\n          findingIdentifiers: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'findingId',\n                'scanName'\n              ],\n              members: {\n                findingId: {},\n                scanName: {}\n              }\n            }\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'failedFindings',\n          'findings'\n        ],\n        members: {\n          failedFindings: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'errorCode',\n                'findingId',\n                'message',\n                'scanName'\n              ],\n              members: {\n                errorCode: {},\n                findingId: {},\n                message: {},\n                scanName: {}\n              }\n            }\n          },\n          findings: {\n            shape: 'Sa'\n          }\n        }\n      }\n    },\n    CreateScan: {\n      http: {\n        requestUri: '/scans',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'resourceId',\n          'scanName'\n        ],\n        members: {\n          analysisType: {},\n          clientToken: {\n            idempotencyToken: true\n          },\n          resourceId: {\n            shape: 'Sv'\n          },\n          scanName: {},\n          scanType: {},\n          tags: {\n            shape: 'Sy'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'resourceId',\n          'runId',\n          'scanName',\n          'scanState'\n        ],\n        members: {\n          resourceId: {\n            shape: 'Sv'\n          },\n          runId: {},\n          scanName: {},\n          scanNameArn: {},\n          scanState: {}\n        }\n      }\n    },\n    CreateUploadUrl: {\n      http: {\n        requestUri: '/uploadUrl',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'scanName'\n        ],\n        members: {\n          scanName: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'codeArtifactId',\n          'requestHeaders',\n          's3Url'\n        ],\n        members: {\n          codeArtifactId: {},\n          requestHeaders: {\n            type: 'map',\n            key: {},\n            value: {},\n            sensitive: true\n          },\n          s3Url: {\n            type: 'string',\n            sensitive: true\n          }\n        }\n      }\n    },\n    GetAccountConfiguration: {\n      http: {\n        method: 'GET',\n        requestUri: '/accountConfiguration/get',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        members: {}\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'encryptionConfig'\n        ],\n        members: {\n          encryptionConfig: {\n            shape: 'S1c'\n          }\n        }\n      }\n    },\n    GetFindings: {\n      http: {\n        method: 'GET',\n        requestUri: '/findings/{scanName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'scanName'\n        ],\n        members: {\n          maxResults: {\n            location: 'querystring',\n            locationName: 'maxResults',\n            type: 'integer'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          },\n          scanName: {\n            location: 'uri',\n            locationName: 'scanName'\n          },\n          status: {\n            location: 'querystring',\n            locationName: 'status'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          findings: {\n            shape: 'Sa'\n          },\n          nextToken: {}\n        }\n      }\n    },\n    GetMetricsSummary: {\n      http: {\n        method: 'GET',\n        requestUri: '/metrics/summary',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'date'\n        ],\n        members: {\n          date: {\n            location: 'querystring',\n            locationName: 'date',\n            type: 'timestamp'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          metricsSummary: {\n            type: 'structure',\n            members: {\n              categoriesWithMostFindings: {\n                type: 'list',\n                member: {\n                  type: 'structure',\n                  members: {\n                    categoryName: {},\n                    findingNumber: {\n                      type: 'integer'\n                    }\n                  }\n                }\n              },\n              date: {\n                type: 'timestamp'\n              },\n              openFindings: {\n                shape: 'S1n'\n              },\n              scansWithMostOpenCriticalFindings: {\n                type: 'list',\n                member: {\n                  shape: 'S1q'\n                }\n              },\n              scansWithMostOpenFindings: {\n                type: 'list',\n                member: {\n                  shape: 'S1q'\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    GetScan: {\n      http: {\n        method: 'GET',\n        requestUri: '/scans/{scanName}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'scanName'\n        ],\n        members: {\n          runId: {\n            location: 'querystring',\n            locationName: 'runId'\n          },\n          scanName: {\n            location: 'uri',\n            locationName: 'scanName'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'analysisType',\n          'createdAt',\n          'runId',\n          'scanName',\n          'scanState'\n        ],\n        members: {\n          analysisType: {},\n          createdAt: {\n            type: 'timestamp'\n          },\n          errorMessage: {},\n          numberOfRevisions: {\n            type: 'long'\n          },\n          runId: {},\n          scanName: {},\n          scanNameArn: {},\n          scanState: {},\n          updatedAt: {\n            type: 'timestamp'\n          }\n        }\n      }\n    },\n    ListFindingsMetrics: {\n      http: {\n        method: 'GET',\n        requestUri: '/metrics/findings',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'endDate',\n          'startDate'\n        ],\n        members: {\n          endDate: {\n            location: 'querystring',\n            locationName: 'endDate',\n            type: 'timestamp'\n          },\n          maxResults: {\n            location: 'querystring',\n            locationName: 'maxResults',\n            type: 'integer'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          },\n          startDate: {\n            location: 'querystring',\n            locationName: 'startDate',\n            type: 'timestamp'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          findingsMetrics: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              members: {\n                closedFindings: {\n                  shape: 'S1n'\n                },\n                date: {\n                  type: 'timestamp'\n                },\n                meanTimeToClose: {\n                  shape: 'S1n'\n                },\n                newFindings: {\n                  shape: 'S1n'\n                },\n                openFindings: {\n                  shape: 'S1n'\n                }\n              }\n            }\n          },\n          nextToken: {}\n        }\n      }\n    },\n    ListScans: {\n      http: {\n        method: 'GET',\n        requestUri: '/scans',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        members: {\n          maxResults: {\n            location: 'querystring',\n            locationName: 'maxResults',\n            type: 'integer'\n          },\n          nextToken: {\n            location: 'querystring',\n            locationName: 'nextToken'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          nextToken: {},\n          summaries: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'createdAt',\n                'runId',\n                'scanName',\n                'scanState'\n              ],\n              members: {\n                createdAt: {\n                  type: 'timestamp'\n                },\n                runId: {},\n                scanName: {},\n                scanNameArn: {},\n                scanState: {},\n                updatedAt: {\n                  type: 'timestamp'\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    ListTagsForResource: {\n      http: {\n        method: 'GET',\n        requestUri: '/tags/{resourceArn}',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'resourceArn'\n        ],\n        members: {\n          resourceArn: {\n            location: 'uri',\n            locationName: 'resourceArn'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {\n          tags: {\n            shape: 'Sy'\n          }\n        }\n      }\n    },\n    TagResource: {\n      http: {\n        requestUri: '/tags/{resourceArn}',\n        responseCode: 204\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'resourceArn',\n          'tags'\n        ],\n        members: {\n          resourceArn: {\n            location: 'uri',\n            locationName: 'resourceArn'\n          },\n          tags: {\n            shape: 'Sy'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      }\n    },\n    UntagResource: {\n      http: {\n        method: 'DELETE',\n        requestUri: '/tags/{resourceArn}',\n        responseCode: 204\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'resourceArn',\n          'tagKeys'\n        ],\n        members: {\n          resourceArn: {\n            location: 'uri',\n            locationName: 'resourceArn'\n          },\n          tagKeys: {\n            location: 'querystring',\n            locationName: 'tagKeys',\n            type: 'list',\n            member: {}\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        members: {}\n      },\n      idempotent: true\n    },\n    UpdateAccountConfiguration: {\n      http: {\n        method: 'PUT',\n        requestUri: '/updateAccountConfiguration',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'encryptionConfig'\n        ],\n        members: {\n          encryptionConfig: {\n            shape: 'S1c'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'encryptionConfig'\n        ],\n        members: {\n          encryptionConfig: {\n            shape: 'S1c'\n          }\n        }\n      }\n    }\n  },\n  shapes: {\n    Sa: {\n      type: 'list',\n      member: {\n        type: 'structure',\n        members: {\n          createdAt: {\n            type: 'timestamp'\n          },\n          description: {},\n          detectorId: {},\n          detectorName: {},\n          detectorTags: {\n            type: 'list',\n            member: {}\n          },\n          generatorId: {},\n          id: {},\n          remediation: {\n            type: 'structure',\n            members: {\n              recommendation: {\n                type: 'structure',\n                members: {\n                  text: {},\n                  url: {}\n                }\n              },\n              suggestedFixes: {\n                type: 'list',\n                member: {\n                  type: 'structure',\n                  members: {\n                    code: {},\n                    description: {}\n                  }\n                }\n              }\n            }\n          },\n          resource: {\n            type: 'structure',\n            members: {\n              id: {},\n              subResourceId: {}\n            }\n          },\n          ruleId: {},\n          severity: {},\n          status: {},\n          title: {},\n          type: {},\n          updatedAt: {\n            type: 'timestamp'\n          },\n          vulnerability: {\n            type: 'structure',\n            members: {\n              filePath: {\n                type: 'structure',\n                members: {\n                  codeSnippet: {\n                    type: 'list',\n                    member: {\n                      type: 'structure',\n                      members: {\n                        content: {},\n                        number: {\n                          type: 'integer'\n                        }\n                      }\n                    }\n                  },\n                  endLine: {\n                    type: 'integer'\n                  },\n                  name: {},\n                  path: {},\n                  startLine: {\n                    type: 'integer'\n                  }\n                }\n              },\n              id: {},\n              itemCount: {\n                deprecated: true,\n                deprecatedMessage: 'This shape is not used.',\n                type: 'integer'\n              },\n              referenceUrls: {\n                type: 'list',\n                member: {}\n              },\n              relatedVulnerabilities: {\n                type: 'list',\n                member: {}\n              }\n            }\n          }\n        }\n      }\n    },\n    Sv: {\n      type: 'structure',\n      members: {\n        codeArtifactId: {}\n      },\n      union: true\n    },\n    Sy: {\n      type: 'map',\n      key: {},\n      value: {}\n    },\n    S1c: {\n      type: 'structure',\n      members: {\n        kmsKeyArn: {}\n      }\n    },\n    S1n: {\n      type: 'structure',\n      members: {\n        critical: {\n          type: 'double'\n        },\n        high: {\n          type: 'double'\n        },\n        info: {\n          type: 'double'\n        },\n        low: {\n          type: 'double'\n        },\n        medium: {\n          type: 'double'\n        }\n      }\n    },\n    S1q: {\n      type: 'structure',\n      members: {\n        findingNumber: {\n          type: 'integer'\n        },\n        scanName: {}\n      }\n    }\n  }\n}"]}