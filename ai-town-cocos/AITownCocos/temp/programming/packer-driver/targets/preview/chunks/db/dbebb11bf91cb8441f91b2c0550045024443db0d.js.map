{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/lib/credentials/environment_credentials.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","AWS","EnvironmentCredentials","util","inherit","Credentials","constructor","envPrefix","call","get","refresh","callback","fn","process","env","error","Error","code","keys","values","i","length","prefix","expired","apply","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;;8BAEHA,Y,GAAe,cAAYC,G;;AACjCH,MAAAA,UAAU,CAACI,MAAX,CAAkBF,YAAlB,EAAgC,UAAUG,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC,YAAIC,GAAG,GAAGJ,OAAO,CAAC,SAAD,CAAjB;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCI,QAAAA,GAAG,CAACC,sBAAJ,GAA6BD,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBH,GAAG,CAACI,WAArB,EAAkC;AAE7D;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGC,UAAAA,WAAW,EAAE,SAASJ,sBAAT,CAAgCK,SAAhC,EAA2C;AACtDN,YAAAA,GAAG,CAACI,WAAJ,CAAgBG,IAAhB,CAAqB,IAArB;AACA,iBAAKD,SAAL,GAAiBA,SAAjB;AACA,iBAAKE,GAAL,CAAS,YAAW,CAAE,CAAtB;AACD,WAnB4D;;AAqB7D;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGC,UAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClC,gBAAI,CAACA,QAAL,EAAeA,QAAQ,GAAGV,GAAG,CAACE,IAAJ,CAASS,EAAT,CAAYD,QAAvB;;AAEf,gBAAI,CAACE,OAAD,IAAY,CAACA,OAAO,CAACC,GAAzB,EAA8B;AAC5BH,cAAAA,QAAQ,CAACV,GAAG,CAACE,IAAJ,CAASY,KAAT,CACP,IAAIC,KAAJ,CAAU,oDAAV,CADO,EAEP;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAFO,CAAD,CAAR;AAIA;AACD;;AAED,gBAAIC,IAAI,GAAG,CAAC,eAAD,EAAkB,mBAAlB,EAAuC,eAAvC,CAAX;AACA,gBAAIC,MAAM,GAAG,EAAb;;AAEA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,kBAAIE,MAAM,GAAG,EAAb;AACA,kBAAI,KAAKf,SAAT,EAAoBe,MAAM,GAAG,KAAKf,SAAL,GAAiB,GAA1B;AACpBY,cAAAA,MAAM,CAACC,CAAD,CAAN,GAAYP,OAAO,CAACC,GAAR,CAAYQ,MAAM,GAAGJ,IAAI,CAACE,CAAD,CAAzB,CAAZ;;AACA,kBAAI,CAACD,MAAM,CAACC,CAAD,CAAP,IAAcF,IAAI,CAACE,CAAD,CAAJ,KAAY,eAA9B,EAA+C;AAC7CT,gBAAAA,QAAQ,CAACV,GAAG,CAACE,IAAJ,CAASY,KAAT,CACP,IAAIC,KAAJ,CAAU,cAAcM,MAAd,GAAuBJ,IAAI,CAACE,CAAD,CAA3B,GAAiC,WAA3C,CADO,EAET;AAAEH,kBAAAA,IAAI,EAAE;AAAR,iBAFS,CAAD,CAAR;AAIA;AACD;AACF;;AAED,iBAAKM,OAAL,GAAe,KAAf;AACAtB,YAAAA,GAAG,CAACI,WAAJ,CAAgBmB,KAAhB,CAAsB,IAAtB,EAA4BL,MAA5B;AACAR,YAAAA,QAAQ;AACT;AAhE4D,SAAlC,CAA7B,CA5B0F,CAiG3F;;AAEA,2BAAAc,WAAW,GAAG3B,MAAM,CAACF,OAArB;AAGC,OAtGD,EAsGG,OAAO;AACR,mBAAWJ;AADH,OAAP,CAtGH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../core';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n var AWS = require('../core');\n\n /**\n  * Represents credentials from the environment.\n  *\n  * By default, this class will look for the matching environment variables\n  * prefixed by a given {envPrefix}. The un-prefixed environment variable names\n  * for each credential value is listed below:\n  *\n  * ```javascript\n  * accessKeyId: ACCESS_KEY_ID\n  * secretAccessKey: SECRET_ACCESS_KEY\n  * sessionToken: SESSION_TOKEN\n  * ```\n  *\n  * With the default prefix of 'AWS', the environment variables would be:\n  *\n  *     AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN\n  *\n  * @!attribute envPrefix\n  *   @readonly\n  *   @return [String] the prefix for the environment variable names excluding\n  *     the separating underscore ('_').\n  */\n AWS.EnvironmentCredentials = AWS.util.inherit(AWS.Credentials, {\n\n   /**\n    * Creates a new EnvironmentCredentials class with a given variable\n    * prefix {envPrefix}. For example, to load credentials using the 'AWS'\n    * prefix:\n    *\n    * ```javascript\n    * var creds = new AWS.EnvironmentCredentials('AWS');\n    * creds.accessKeyId == 'AKID' // from AWS_ACCESS_KEY_ID env var\n    * ```\n    *\n    * @param envPrefix [String] the prefix to use (e.g., 'AWS') for environment\n    *   variables. Do not include the separating underscore.\n    */\n   constructor: function EnvironmentCredentials(envPrefix) {\n     AWS.Credentials.call(this);\n     this.envPrefix = envPrefix;\n     this.get(function() {});\n   },\n\n   /**\n    * Loads credentials from the environment using the prefixed\n    * environment variables.\n    *\n    * @callback callback function(err)\n    *   Called after the (prefixed) ACCESS_KEY_ID, SECRET_ACCESS_KEY, and\n    *   SESSION_TOKEN environment variables are read. When this callback is\n    *   called with no error, it means that the credentials information has\n    *   been loaded into the object (as the `accessKeyId`, `secretAccessKey`,\n    *   and `sessionToken` properties).\n    *   @param err [Error] if an error occurred, this value will be filled\n    * @see get\n    */\n   refresh: function refresh(callback) {\n     if (!callback) callback = AWS.util.fn.callback;\n\n     if (!process || !process.env) {\n       callback(AWS.util.error(\n         new Error('No process info or environment variables available'),\n         { code: 'EnvironmentCredentialsProviderFailure' }\n       ));\n       return;\n     }\n\n     var keys = ['ACCESS_KEY_ID', 'SECRET_ACCESS_KEY', 'SESSION_TOKEN'];\n     var values = [];\n\n     for (var i = 0; i < keys.length; i++) {\n       var prefix = '';\n       if (this.envPrefix) prefix = this.envPrefix + '_';\n       values[i] = process.env[prefix + keys[i]];\n       if (!values[i] && keys[i] !== 'SESSION_TOKEN') {\n         callback(AWS.util.error(\n           new Error('Variable ' + prefix + keys[i] + ' not set.'),\n         { code: 'EnvironmentCredentialsProviderFailure' }\n         ));\n         return;\n       }\n     }\n\n     this.expired = false;\n     AWS.Credentials.apply(this, values);\n     callback();\n   }\n\n });\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../core': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}