{"version":3,"sources":["file:///Users/feiwang/workSpace/AITown/cutepet/node_modules/lodash-es/_overRest.js"],"names":["overRest","func","start","transform","nativeMax","undefined","length","args","arguments","index","array","Array","otherArgs","apply","Math","max"],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,QAAT,CAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,SAA/B,EAA0C;AACxCD,IAAAA,KAAK,GAAGE,SAAS,CAACF,KAAK,KAAKG,SAAV,GAAuBJ,IAAI,CAACK,MAAL,GAAc,CAArC,GAA0CJ,KAA3C,EAAkD,CAAlD,CAAjB;AACA,WAAO,YAAW;AAChB,UAAIK,IAAI,GAAGC,SAAX;AAAA,UACIC,KAAK,GAAG,CAAC,CADb;AAAA,UAEIH,MAAM,GAAGF,SAAS,CAACG,IAAI,CAACD,MAAL,GAAcJ,KAAf,EAAsB,CAAtB,CAFtB;AAAA,UAGIQ,KAAK,GAAGC,KAAK,CAACL,MAAD,CAHjB;;AAKA,aAAO,EAAEG,KAAF,GAAUH,MAAjB,EAAyB;AACvBI,QAAAA,KAAK,CAACD,KAAD,CAAL,GAAeF,IAAI,CAACL,KAAK,GAAGO,KAAT,CAAnB;AACD;;AACDA,MAAAA,KAAK,GAAG,CAAC,CAAT;AACA,UAAIG,SAAS,GAAGD,KAAK,CAACT,KAAK,GAAG,CAAT,CAArB;;AACA,aAAO,EAAEO,KAAF,GAAUP,KAAjB,EAAwB;AACtBU,QAAAA,SAAS,CAACH,KAAD,CAAT,GAAmBF,IAAI,CAACE,KAAD,CAAvB;AACD;;AACDG,MAAAA,SAAS,CAACV,KAAD,CAAT,GAAmBC,SAAS,CAACO,KAAD,CAA5B;AACA,aAAOG,KAAK,CAACZ,IAAD,EAAO,IAAP,EAAaW,SAAb,CAAZ;AACD,KAhBD;AAiBD;;;;AAjCMC,MAAAA,K;;;AAEP;AACIT,MAAAA,S,GAAYU,IAAI,CAACC,G;;yBAgCNf,Q","sourcesContent":["import apply from './_apply.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nexport default overRest;\n"]}