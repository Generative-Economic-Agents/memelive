{"version":3,"sources":["file:///Users/feiwang/cutepet/node_modules/aws-sdk/apis/managedblockchain-query-2023-05-04.min.json"],"names":["version","metadata","apiVersion","endpointPrefix","jsonVersion","protocol","ripServiceName","serviceFullName","serviceId","signatureVersion","signingName","uid","operations","BatchGetTokenBalance","http","requestUri","responseCode","input","type","members","getTokenBalanceInputs","member","required","tokenIdentifier","shape","ownerIdentifier","atBlockchainInstant","output","tokenBalances","balance","lastUpdatedTime","errors","errorCode","errorMessage","errorType","GetAssetContract","contractIdentifier","tokenStandard","deployerAddress","name","symbol","decimals","GetTokenBalance","GetTransaction","transactionHash","transactionId","network","transaction","blockHash","blockNumber","transactionTimestamp","transactionIndex","numberOfTransactions","to","from","contractAddress","gasUsed","cumulativeGasUsed","effectiveGasPrice","signatureV","signatureR","signatureS","transactionFee","confirmationStatus","executionStatus","ListAssetContracts","contractFilter","nextToken","maxResults","contracts","ListFilteredTransactionEvents","addressIdentifierFilter","transactionEventToAddress","timeFilter","voutFilter","voutSpent","confirmationStatusFilter","sort","sortBy","sortOrder","events","ListTokenBalances","ownerFilter","address","tokenFilter","tokenId","ListTransactionEvents","ListTransactions","fromBlockchainInstant","toBlockchainInstant","transactions","shapes","S4","S8","S9","time","Sj","S1c","include","S1j","eventType","value","voutIndex","spentVoutTransactionId","spentVoutTransactionHash","spentVoutIndex","blockchainInstant"],"mappings":"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","sourcesContent":["export default {\n  version: '2.0',\n  metadata: {\n    apiVersion: '2023-05-04',\n    endpointPrefix: 'managedblockchain-query',\n    jsonVersion: '1.1',\n    protocol: 'rest-json',\n    ripServiceName: 'chainquery',\n    serviceFullName: 'Amazon Managed Blockchain Query',\n    serviceId: 'ManagedBlockchain Query',\n    signatureVersion: 'v4',\n    signingName: 'managedblockchain-query',\n    uid: 'managedblockchain-query-2023-05-04'\n  },\n  operations: {\n    BatchGetTokenBalance: {\n      http: {\n        requestUri: '/batch-get-token-balance',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        members: {\n          getTokenBalanceInputs: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'tokenIdentifier',\n                'ownerIdentifier'\n              ],\n              members: {\n                tokenIdentifier: {\n                  shape: 'S4'\n                },\n                ownerIdentifier: {\n                  shape: 'S8'\n                },\n                atBlockchainInstant: {\n                  shape: 'S9'\n                }\n              }\n            }\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'tokenBalances',\n          'errors'\n        ],\n        members: {\n          tokenBalances: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'balance',\n                'atBlockchainInstant'\n              ],\n              members: {\n                ownerIdentifier: {\n                  shape: 'S8'\n                },\n                tokenIdentifier: {\n                  shape: 'S4'\n                },\n                balance: {},\n                atBlockchainInstant: {\n                  shape: 'S9'\n                },\n                lastUpdatedTime: {\n                  shape: 'S9'\n                }\n              }\n            }\n          },\n          errors: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'errorCode',\n                'errorMessage',\n                'errorType'\n              ],\n              members: {\n                tokenIdentifier: {\n                  shape: 'S4'\n                },\n                ownerIdentifier: {\n                  shape: 'S8'\n                },\n                atBlockchainInstant: {\n                  shape: 'S9'\n                },\n                errorCode: {},\n                errorMessage: {},\n                errorType: {}\n              }\n            }\n          }\n        }\n      }\n    },\n    GetAssetContract: {\n      http: {\n        requestUri: '/get-asset-contract',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'contractIdentifier'\n        ],\n        members: {\n          contractIdentifier: {\n            shape: 'Sj'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'contractIdentifier',\n          'tokenStandard',\n          'deployerAddress'\n        ],\n        members: {\n          contractIdentifier: {\n            shape: 'Sj'\n          },\n          tokenStandard: {},\n          deployerAddress: {},\n          metadata: {\n            type: 'structure',\n            members: {\n              name: {},\n              symbol: {},\n              decimals: {\n                type: 'integer'\n              }\n            }\n          }\n        }\n      }\n    },\n    GetTokenBalance: {\n      http: {\n        requestUri: '/get-token-balance',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'tokenIdentifier',\n          'ownerIdentifier'\n        ],\n        members: {\n          tokenIdentifier: {\n            shape: 'S4'\n          },\n          ownerIdentifier: {\n            shape: 'S8'\n          },\n          atBlockchainInstant: {\n            shape: 'S9'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'balance',\n          'atBlockchainInstant'\n        ],\n        members: {\n          ownerIdentifier: {\n            shape: 'S8'\n          },\n          tokenIdentifier: {\n            shape: 'S4'\n          },\n          balance: {},\n          atBlockchainInstant: {\n            shape: 'S9'\n          },\n          lastUpdatedTime: {\n            shape: 'S9'\n          }\n        }\n      }\n    },\n    GetTransaction: {\n      http: {\n        requestUri: '/get-transaction',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'network'\n        ],\n        members: {\n          transactionHash: {},\n          transactionId: {},\n          network: {}\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'transaction'\n        ],\n        members: {\n          transaction: {\n            type: 'structure',\n            required: [\n              'network',\n              'transactionHash',\n              'transactionTimestamp',\n              'transactionIndex',\n              'numberOfTransactions',\n              'to'\n            ],\n            members: {\n              network: {},\n              blockHash: {},\n              transactionHash: {},\n              blockNumber: {},\n              transactionTimestamp: {\n                type: 'timestamp'\n              },\n              transactionIndex: {\n                type: 'long'\n              },\n              numberOfTransactions: {\n                type: 'long'\n              },\n              to: {},\n              from: {},\n              contractAddress: {},\n              gasUsed: {},\n              cumulativeGasUsed: {},\n              effectiveGasPrice: {},\n              signatureV: {\n                type: 'integer'\n              },\n              signatureR: {},\n              signatureS: {},\n              transactionFee: {},\n              transactionId: {},\n              confirmationStatus: {},\n              executionStatus: {}\n            }\n          }\n        }\n      }\n    },\n    ListAssetContracts: {\n      http: {\n        requestUri: '/list-asset-contracts',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'contractFilter'\n        ],\n        members: {\n          contractFilter: {\n            type: 'structure',\n            required: [\n              'network',\n              'tokenStandard',\n              'deployerAddress'\n            ],\n            members: {\n              network: {},\n              tokenStandard: {},\n              deployerAddress: {}\n            }\n          },\n          nextToken: {},\n          maxResults: {\n            type: 'integer'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'contracts'\n        ],\n        members: {\n          contracts: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'contractIdentifier',\n                'tokenStandard',\n                'deployerAddress'\n              ],\n              members: {\n                contractIdentifier: {\n                  shape: 'Sj'\n                },\n                tokenStandard: {},\n                deployerAddress: {}\n              }\n            }\n          },\n          nextToken: {}\n        }\n      }\n    },\n    ListFilteredTransactionEvents: {\n      http: {\n        requestUri: '/list-filtered-transaction-events',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'network',\n          'addressIdentifierFilter'\n        ],\n        members: {\n          network: {},\n          addressIdentifierFilter: {\n            type: 'structure',\n            required: [\n              'transactionEventToAddress'\n            ],\n            members: {\n              transactionEventToAddress: {\n                type: 'list',\n                member: {}\n              }\n            }\n          },\n          timeFilter: {\n            type: 'structure',\n            members: {\n              from: {\n                shape: 'S9'\n              },\n              to: {\n                shape: 'S9'\n              }\n            }\n          },\n          voutFilter: {\n            type: 'structure',\n            required: [\n              'voutSpent'\n            ],\n            members: {\n              voutSpent: {\n                type: 'boolean'\n              }\n            }\n          },\n          confirmationStatusFilter: {\n            shape: 'S1c'\n          },\n          sort: {\n            type: 'structure',\n            members: {\n              sortBy: {},\n              sortOrder: {}\n            }\n          },\n          nextToken: {},\n          maxResults: {\n            type: 'integer'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'events'\n        ],\n        members: {\n          events: {\n            shape: 'S1j'\n          },\n          nextToken: {}\n        }\n      }\n    },\n    ListTokenBalances: {\n      http: {\n        requestUri: '/list-token-balances',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'tokenFilter'\n        ],\n        members: {\n          ownerFilter: {\n            type: 'structure',\n            required: [\n              'address'\n            ],\n            members: {\n              address: {}\n            }\n          },\n          tokenFilter: {\n            type: 'structure',\n            required: [\n              'network'\n            ],\n            members: {\n              network: {},\n              contractAddress: {},\n              tokenId: {}\n            }\n          },\n          nextToken: {},\n          maxResults: {\n            type: 'integer'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'tokenBalances'\n        ],\n        members: {\n          tokenBalances: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'balance',\n                'atBlockchainInstant'\n              ],\n              members: {\n                ownerIdentifier: {\n                  shape: 'S8'\n                },\n                tokenIdentifier: {\n                  shape: 'S4'\n                },\n                balance: {},\n                atBlockchainInstant: {\n                  shape: 'S9'\n                },\n                lastUpdatedTime: {\n                  shape: 'S9'\n                }\n              }\n            }\n          },\n          nextToken: {}\n        }\n      }\n    },\n    ListTransactionEvents: {\n      http: {\n        requestUri: '/list-transaction-events',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'network'\n        ],\n        members: {\n          transactionHash: {},\n          transactionId: {},\n          network: {},\n          nextToken: {},\n          maxResults: {\n            type: 'integer'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'events'\n        ],\n        members: {\n          events: {\n            shape: 'S1j'\n          },\n          nextToken: {}\n        }\n      }\n    },\n    ListTransactions: {\n      http: {\n        requestUri: '/list-transactions',\n        responseCode: 200\n      },\n      input: {\n        type: 'structure',\n        required: [\n          'address',\n          'network'\n        ],\n        members: {\n          address: {},\n          network: {},\n          fromBlockchainInstant: {\n            shape: 'S9'\n          },\n          toBlockchainInstant: {\n            shape: 'S9'\n          },\n          sort: {\n            type: 'structure',\n            members: {\n              sortBy: {},\n              sortOrder: {}\n            }\n          },\n          nextToken: {},\n          maxResults: {\n            type: 'integer'\n          },\n          confirmationStatusFilter: {\n            shape: 'S1c'\n          }\n        }\n      },\n      output: {\n        type: 'structure',\n        required: [\n          'transactions'\n        ],\n        members: {\n          transactions: {\n            type: 'list',\n            member: {\n              type: 'structure',\n              required: [\n                'transactionHash',\n                'network',\n                'transactionTimestamp'\n              ],\n              members: {\n                transactionHash: {},\n                transactionId: {},\n                network: {},\n                transactionTimestamp: {\n                  type: 'timestamp'\n                },\n                confirmationStatus: {}\n              }\n            }\n          },\n          nextToken: {}\n        }\n      }\n    }\n  },\n  shapes: {\n    S4: {\n      type: 'structure',\n      required: [\n        'network'\n      ],\n      members: {\n        network: {},\n        contractAddress: {},\n        tokenId: {}\n      }\n    },\n    S8: {\n      type: 'structure',\n      required: [\n        'address'\n      ],\n      members: {\n        address: {}\n      }\n    },\n    S9: {\n      type: 'structure',\n      members: {\n        time: {\n          type: 'timestamp'\n        }\n      }\n    },\n    Sj: {\n      type: 'structure',\n      required: [\n        'network',\n        'contractAddress'\n      ],\n      members: {\n        network: {},\n        contractAddress: {}\n      }\n    },\n    S1c: {\n      type: 'structure',\n      required: [\n        'include'\n      ],\n      members: {\n        include: {\n          type: 'list',\n          member: {}\n        }\n      }\n    },\n    S1j: {\n      type: 'list',\n      member: {\n        type: 'structure',\n        required: [\n          'network',\n          'transactionHash',\n          'eventType'\n        ],\n        members: {\n          network: {},\n          transactionHash: {},\n          eventType: {},\n          from: {},\n          to: {},\n          value: {},\n          contractAddress: {},\n          tokenId: {},\n          transactionId: {},\n          voutIndex: {\n            type: 'integer'\n          },\n          voutSpent: {\n            type: 'boolean'\n          },\n          spentVoutTransactionId: {},\n          spentVoutTransactionHash: {},\n          spentVoutIndex: {\n            type: 'integer'\n          },\n          blockchainInstant: {\n            shape: 'S9'\n          },\n          confirmationStatus: {}\n        }\n      }\n    }\n  }\n}"]}