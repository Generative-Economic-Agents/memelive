System.register(["__unresolved_0", "__unresolved_1", "__unresolved_2", "__unresolved_3"], function (_export, _context) {
  "use strict";

  var _cjsLoader, _req, _req0, _req1, _cjsExports, __cjsMetaURL;

  _export("default", void 0);

  return {
    setters: [function (_unresolved_) {
      _cjsLoader = _unresolved_.default;
    }, function (_unresolved_2) {
      _req = _unresolved_2.__cjsMetaURL;
    }, function (_unresolved_3) {
      _req0 = _unresolved_3.__cjsMetaURL;
    }, function (_unresolved_4) {
      _req1 = _unresolved_4.__cjsMetaURL;
    }],
    execute: function () {
      _export("__cjsMetaURL", __cjsMetaURL = _context.meta.url);

      _cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        // Generated by CoffeeScript 1.12.7
        (function () {
          var NodeType,
              XMLDTDEntity,
              XMLNode,
              isObject,
              extend = function extend(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
              this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          },
              hasProp = {}.hasOwnProperty;

          isObject = require('./Utility').isObject;
          XMLNode = require('./XMLNode');
          NodeType = require('./NodeType');

          module.exports = XMLDTDEntity = function (superClass) {
            extend(XMLDTDEntity, superClass);

            function XMLDTDEntity(parent, pe, name, value) {
              XMLDTDEntity.__super__.constructor.call(this, parent);

              if (name == null) {
                throw new Error("Missing DTD entity name. " + this.debugInfo(name));
              }

              if (value == null) {
                throw new Error("Missing DTD entity value. " + this.debugInfo(name));
              }

              this.pe = !!pe;
              this.name = this.stringify.name(name);
              this.type = NodeType.EntityDeclaration;

              if (!isObject(value)) {
                this.value = this.stringify.dtdEntityValue(value);
                this.internal = true;
              } else {
                if (!value.pubID && !value.sysID) {
                  throw new Error("Public and/or system identifiers are required for an external entity. " + this.debugInfo(name));
                }

                if (value.pubID && !value.sysID) {
                  throw new Error("System identifier is required for a public external entity. " + this.debugInfo(name));
                }

                this.internal = false;

                if (value.pubID != null) {
                  this.pubID = this.stringify.dtdPubID(value.pubID);
                }

                if (value.sysID != null) {
                  this.sysID = this.stringify.dtdSysID(value.sysID);
                }

                if (value.nData != null) {
                  this.nData = this.stringify.dtdNData(value.nData);
                }

                if (this.pe && this.nData) {
                  throw new Error("Notation declaration is not allowed in a parameter entity. " + this.debugInfo(name));
                }
              }
            }

            Object.defineProperty(XMLDTDEntity.prototype, 'publicId', {
              get: function get() {
                return this.pubID;
              }
            });
            Object.defineProperty(XMLDTDEntity.prototype, 'systemId', {
              get: function get() {
                return this.sysID;
              }
            });
            Object.defineProperty(XMLDTDEntity.prototype, 'notationName', {
              get: function get() {
                return this.nData || null;
              }
            });
            Object.defineProperty(XMLDTDEntity.prototype, 'inputEncoding', {
              get: function get() {
                return null;
              }
            });
            Object.defineProperty(XMLDTDEntity.prototype, 'xmlEncoding', {
              get: function get() {
                return null;
              }
            });
            Object.defineProperty(XMLDTDEntity.prototype, 'xmlVersion', {
              get: function get() {
                return null;
              }
            });

            XMLDTDEntity.prototype.toString = function (options) {
              return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));
            };

            return XMLDTDEntity;
          }(XMLNode);
        }).call(this); // #endregion ORIGINAL CODE

        _export("default", _cjsExports = module.exports);
      }, () => ({
        './Utility': _req,
        './XMLNode': _req0,
        './NodeType': _req1
      }));
    }
  };
});
//# sourceMappingURL=5251646da76cd7251badc6ecb20d142a2b9e8d9e.js.map